#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <map>
#include <functional>
#include <algorithm>
#include <stdexcept>

/**
 * @file product_factory.cpp
 * @brief –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã Factory Method –ø–∞—Ç—Ç–µ—Ä–Ω–∞
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * Factory Method –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
 */

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ò–Ø –ò–ì–†–û–í–´–• –û–ë–™–ï–ö–¢–û–í
// ============================================================================

/**
 * @brief –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
class GameObject {
protected:
    std::string name_;
    int health_;
    int damage_;
    
public:
    GameObject(const std::string& name, int health, int damage)
        : name_(name), health_(health), damage_(damage) {}
    
    virtual ~GameObject() = default;
    
    virtual void update() = 0;
    virtual void render() = 0;
    virtual void attack() = 0;
    virtual std::string getType() const = 0;
    
    const std::string& getName() const { return name_; }
    int getHealth() const { return health_; }
    int getDamage() const { return damage_; }
    
    void takeDamage(int damage) {
        health_ -= damage;
        if (health_ < 0) health_ = 0;
    }
    
    bool isAlive() const { return health_ > 0; }
};

/**
 * @brief –ò–≥—Ä–æ–∫
 */
class Player : public GameObject {
private:
    int experience_;
    int level_;
    
public:
    Player(const std::string& name, int health = 100, int damage = 20)
        : GameObject(name, health, damage), experience_(0), level_(1) {}
    
    void update() override {
        std::cout << "–ò–≥—Ä–æ–∫ " << name_ << " –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è (—É—Ä–æ–≤–µ–Ω—å " << level_ << ")" << std::endl;
    }
    
    void render() override {
        std::cout << "üõ°Ô∏è –ò–≥—Ä–æ–∫: " << name_ << " [HP: " << health_ << ", DMG: " << damage_ 
                  << ", LVL: " << level_ << "]" << std::endl;
    }
    
    void attack() override {
        std::cout << "‚öîÔ∏è –ò–≥—Ä–æ–∫ " << name_ << " –∞—Ç–∞–∫—É–µ—Ç —Å —É—Ä–æ–Ω–æ–º " << damage_ << std::endl;
    }
    
    std::string getType() const override {
        return "Player";
    }
    
    void gainExperience(int exp) {
        experience_ += exp;
        if (experience_ >= 100) {
            levelUp();
        }
    }
    
private:
    void levelUp() {
        level_++;
        health_ += 20;
        damage_ += 5;
        experience_ = 0;
        std::cout << "üéâ –ò–≥—Ä–æ–∫ " << name_ << " –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ " << level_ << "!" << std::endl;
    }
};

/**
 * @brief –í—Ä–∞–≥
 */
class Enemy : public GameObject {
private:
    std::string enemyType_;
    
public:
    Enemy(const std::string& name, const std::string& type, int health = 50, int damage = 15)
        : GameObject(name, health, damage), enemyType_(type) {}
    
    void update() override {
        std::cout << "–í—Ä–∞–≥ " << name_ << " (" << enemyType_ << ") –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è" << std::endl;
    }
    
    void render() override {
        std::cout << "üëπ –í—Ä–∞–≥: " << name_ << " (" << enemyType_ << ") [HP: " << health_ 
                  << ", DMG: " << damage_ << "]" << std::endl;
    }
    
    void attack() override {
        std::cout << "üó°Ô∏è –í—Ä–∞–≥ " << name_ << " –∞—Ç–∞–∫—É–µ—Ç —Å —É—Ä–æ–Ω–æ–º " << damage_ << std::endl;
    }
    
    std::string getType() const override {
        return "Enemy";
    }
    
    const std::string& getEnemyType() const { return enemyType_; }
};

/**
 * @brief NPC (Non-Player Character)
 */
class NPC : public GameObject {
private:
    std::string dialogue_;
    
public:
    NPC(const std::string& name, const std::string& dialogue, int health = 25)
        : GameObject(name, health, 0), dialogue_(dialogue) {}
    
    void update() override {
        std::cout << "NPC " << name_ << " –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è" << std::endl;
    }
    
    void render() override {
        std::cout << "üë§ NPC: " << name_ << " [HP: " << health_ << "]" << std::endl;
    }
    
    void attack() override {
        std::cout << "NPC " << name_ << " –Ω–µ –∞—Ç–∞–∫—É–µ—Ç (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π)" << std::endl;
    }
    
    std::string getType() const override {
        return "NPC";
    }
    
    void talk() {
        std::cout << "üí¨ " << name_ << " –≥–æ–≤–æ—Ä–∏—Ç: \"" << dialogue_ << "\"" << std::endl;
    }
};

/**
 * @brief –§–∞–±—Ä–∏–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
class GameObjectFactory {
public:
    virtual ~GameObjectFactory() = default;
    virtual std::unique_ptr<GameObject> createGameObject(const std::string& type, const std::string& name) = 0;
    virtual std::vector<std::string> getSupportedTypes() const = 0;
};

/**
 * @brief –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
class StandardGameObjectFactory : public GameObjectFactory {
public:
    std::unique_ptr<GameObject> createGameObject(const std::string& type, const std::string& name) override {
        if (type == "player") {
            return std::make_unique<Player>(name);
        } else if (type == "enemy") {
            return std::make_unique<Enemy>(name, "Standard");
        } else if (type == "npc") {
            return std::make_unique<NPC>(name, "–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–Ω–∏–∫!");
        }
        
        throw std::invalid_argument("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: " + type);
    }
    
    std::vector<std::string> getSupportedTypes() const override {
        return {"player", "enemy", "npc"};
    }
};

/**
 * @brief –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
 */
class AdvancedGameObjectFactory : public GameObjectFactory {
private:
    std::map<std::string, std::map<std::string, int>> stats_;
    
public:
    AdvancedGameObjectFactory() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ä–∞–≥–æ–≤
        stats_["goblin"] = {{"health", 30}, {"damage", 10}};
        stats_["orc"] = {{"health", 80}, {"damage", 25}};
        stats_["dragon"] = {{"health", 200}, {"damage", 50}};
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è NPC
        stats_["merchant"] = {{"health", 50}};
        stats_["guard"] = {{"health", 100}, {"damage", 20}};
    }
    
    std::unique_ptr<GameObject> createGameObject(const std::string& type, const std::string& name) override {
        if (type == "player") {
            return std::make_unique<Player>(name);
        } else if (type == "goblin") {
            auto stats = stats_["goblin"];
            return std::make_unique<Enemy>(name, "Goblin", stats["health"], stats["damage"]);
        } else if (type == "orc") {
            auto stats = stats_["orc"];
            return std::make_unique<Enemy>(name, "Orc", stats["health"], stats["damage"]);
        } else if (type == "dragon") {
            auto stats = stats_["dragon"];
            return std::make_unique<Enemy>(name, "Dragon", stats["health"], stats["damage"]);
        } else if (type == "merchant") {
            auto stats = stats_["merchant"];
            return std::make_unique<NPC>(name, "–•–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å?", stats["health"]);
        } else if (type == "guard") {
            auto stats = stats_["guard"];
            return std::make_unique<NPC>(name, "–°—Ç–æ–π! –ö—Ç–æ –∏–¥–µ—Ç?", stats["health"]);
        }
        
        throw std::invalid_argument("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: " + type);
    }
    
    std::vector<std::string> getSupportedTypes() const override {
        return {"player", "goblin", "orc", "dragon", "merchant", "guard"};
    }
};

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –°–û–ó–î–ê–ù–ò–Ø UI –≠–õ–ï–ú–ï–ù–¢–û–í
// ============================================================================

/**
 * @brief –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
class UIElement {
protected:
    std::string id_;
    int x_, y_;
    int width_, height_;
    
public:
    UIElement(const std::string& id, int x, int y, int width, int height)
        : id_(id), x_(x), y_(y), width_(width), height_(height) {}
    
    virtual ~UIElement() = default;
    
    virtual void render() = 0;
    virtual void handleClick() = 0;
    virtual void setText(const std::string& text) {}
    virtual std::string getType() const = 0;
    
    const std::string& getId() const { return id_; }
    int getX() const { return x_; }
    int getY() const { return y_; }
    int getWidth() const { return width_; }
    int getHeight() const { return height_; }
};

/**
 * @brief –ö–Ω–æ–ø–∫–∞
 */
class Button : public UIElement {
private:
    std::string text_;
    std::function<void()> onClickHandler_;
    
public:
    Button(const std::string& id, int x, int y, int width, int height, const std::string& text = "")
        : UIElement(id, x, y, width, height), text_(text) {}
    
    void render() override {
        std::cout << "üîò –ö–Ω–æ–ø–∫–∞ [" << id_ << "] '" << text_ << "' –≤ (" << x_ << "," << y_ 
                  << ") —Ä–∞–∑–º–µ—Ä–æ–º " << width_ << "x" << height_ << std::endl;
    }
    
    void handleClick() override {
        std::cout << "üñ±Ô∏è –ö–Ω–æ–ø–∫–∞ '" << text_ << "' –Ω–∞–∂–∞—Ç–∞!" << std::endl;
        if (onClickHandler_) {
            onClickHandler_();
        }
    }
    
    void setText(const std::string& text) override {
        text_ = text;
    }
    
    std::string getType() const override {
        return "Button";
    }
    
    void setOnClickHandler(std::function<void()> handler) {
        onClickHandler_ = handler;
    }
};

/**
 * @brief –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
 */
class TextBox : public UIElement {
private:
    std::string text_;
    std::string placeholder_;
    
public:
    TextBox(const std::string& id, int x, int y, int width, int height, const std::string& placeholder = "")
        : UIElement(id, x, y, width, height), placeholder_(placeholder) {}
    
    void render() override {
        std::string displayText = text_.empty() ? placeholder_ : text_;
        std::cout << "üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ [" << id_ << "] '" << displayText_ << "' –≤ (" << x_ << "," << y_ 
                  << ") —Ä–∞–∑–º–µ—Ä–æ–º " << width_ << "x" << height_ << std::endl;
    }
    
    void handleClick() override {
        std::cout << "üñ±Ô∏è –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ '" << id_ << "' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞" << std::endl;
    }
    
    void setText(const std::string& text) override {
        text_ = text;
    }
    
    std::string getType() const override {
        return "TextBox";
    }
    
    const std::string& getText() const { return text_; }
};

/**
 * @brief –ú–µ—Ç–∫–∞
 */
class Label : public UIElement {
private:
    std::string text_;
    
public:
    Label(const std::string& id, int x, int y, int width, int height, const std::string& text = "")
        : UIElement(id, x, y, width, height), text_(text) {}
    
    void render() override {
        std::cout << "üè∑Ô∏è –ú–µ—Ç–∫–∞ [" << id_ << "] '" << text_ << "' –≤ (" << x_ << "," << y_ 
                  << ") —Ä–∞–∑–º–µ—Ä–æ–º " << width_ << "x" << height_ << std::endl;
    }
    
    void handleClick() override {
        std::cout << "üñ±Ô∏è –ú–µ—Ç–∫–∞ '" << text_ << "' –Ω–∞–∂–∞—Ç–∞ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞)" << std::endl;
    }
    
    void setText(const std::string& text) override {
        text_ = text;
    }
    
    std::string getType() const override {
        return "Label";
    }
};

/**
 * @brief –§–∞–±—Ä–∏–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
class UIElementFactory {
public:
    virtual ~UIElementFactory() = default;
    virtual std::unique_ptr<UIElement> createElement(const std::string& type, const std::string& id,
                                                    int x, int y, int width, int height) = 0;
};

/**
 * @brief –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
class StandardUIElementFactory : public UIElementFactory {
public:
    std::unique_ptr<UIElement> createElement(const std::string& type, const std::string& id,
                                           int x, int y, int width, int height) override {
        if (type == "button") {
            return std::make_unique<Button>(id, x, y, width, height);
        } else if (type == "textbox") {
            return std::make_unique<TextBox>(id, x, y, width, height);
        } else if (type == "label") {
            return std::make_unique<Label>(id, x, y, width, height);
        }
        
        throw std::invalid_argument("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø UI —ç–ª–µ–º–µ–Ω—Ç–∞: " + type);
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
void demonstrateGameObjectFactory() {
    std::cout << "\n=== –§–∞–±—Ä–∏–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ ===" << std::endl;
    
    auto factory = std::make_unique<AdvancedGameObjectFactory>();
    
    // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
    std::vector<std::unique_ptr<GameObject>> gameObjects;
    
    gameObjects.push_back(factory->createGameObject("player", "Hero"));
    gameObjects.push_back(factory->createGameObject("goblin", "Goblin_1"));
    gameObjects.push_back(factory->createGameObject("orc", "Orc_Warrior"));
    gameObjects.push_back(factory->createGameObject("merchant", "Shop_Keeper"));
    gameObjects.push_back(factory->createGameObject("guard", "City_Guard"));
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
    std::cout << "\n–ò–≥—Ä–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã:" << std::endl;
    for (auto& obj : gameObjects) {
        obj->render();
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –±–æ—è
    std::cout << "\n–°–∏–º—É–ª—è—Ü–∏—è –±–æ—è:" << std::endl;
    auto player = std::find_if(gameObjects.begin(), gameObjects.end(),
        [](const std::unique_ptr<GameObject>& obj) {
            return obj->getType() == "Player";
        });
    
    auto enemy = std::find_if(gameObjects.begin(), gameObjects.end(),
        [](const std::unique_ptr<GameObject>& obj) {
            return obj->getType() == "Enemy";
        });
    
    if (player != gameObjects.end() && enemy != gameObjects.end()) {
        (*player)->attack();
        (*enemy)->takeDamage((*player)->getDamage());
        
        (*enemy)->attack();
        (*player)->takeDamage((*enemy)->getDamage());
        
        std::cout << "\n–ü–æ—Å–ª–µ –±–æ—è:" << std::endl;
        (*player)->render();
        (*enemy)->render();
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
void demonstrateUIElementFactory() {
    std::cout << "\n=== –§–∞–±—Ä–∏–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ ===" << std::endl;
    
    auto factory = std::make_unique<StandardUIElementFactory>();
    
    // –°–æ–∑–¥–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
    std::vector<std::unique_ptr<UIElement>> elements;
    
    elements.push_back(factory->createElement("label", "title", 10, 10, 200, 30));
    elements.push_back(factory->createElement("textbox", "username", 10, 50, 200, 25));
    elements.push_back(factory->createElement("button", "login", 10, 85, 100, 30));
    elements.push_back(factory->createElement("button", "cancel", 120, 85, 100, 30));
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    elements[0]->setText("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É");
    elements[1]->setText(""); // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ
    elements[2]->setText("–í–æ–π—Ç–∏");
    elements[3]->setText("–û—Ç–º–µ–Ω–∞");
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
    std::cout << "\nUI —ç–ª–µ–º–µ–Ω—Ç—ã:" << std::endl;
    for (auto& element : elements) {
        element->render();
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–æ–≤
    std::cout << "\n–°–∏–º—É–ª—è—Ü–∏—è –∫–ª–∏–∫–æ–≤:" << std::endl;
    for (auto& element : elements) {
        element->handleClick();
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
void demonstrateDynamicCreation() {
    std::cout << "\n=== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ ===" << std::endl;
    
    auto gameFactory = std::make_unique<AdvancedGameObjectFactory>();
    auto uiFactory = std::make_unique<StandardUIElementFactory>();
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    std::vector<std::string> gameObjectTypes = {"player", "goblin", "orc", "merchant"};
    std::vector<std::string> uiElementTypes = {"button", "textbox", "label"};
    
    std::cout << "\n–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤:" << std::endl;
    for (size_t i = 0; i < gameObjectTypes.size(); ++i) {
        try {
            auto obj = gameFactory->createGameObject(gameObjectTypes[i], "Dynamic_" + std::to_string(i));
            obj->render();
        } catch (const std::exception& e) {
            std::cout << "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: " << e.what() << std::endl;
        }
    }
    
    std::cout << "\n–°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤:" << std::endl;
    for (size_t i = 0; i < uiElementTypes.size(); ++i) {
        try {
            auto element = uiFactory->createElement(uiElementTypes[i], "dynamic_" + std::to_string(i), 
                                                   10 + i * 110, 10, 100, 30);
            element->render();
        } catch (const std::exception& e) {
            std::cout << "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–∞: " << e.what() << std::endl;
        }
    }
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üéÆ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã Factory Method" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateGameObjectFactory();
    demonstrateUIElementFactory();
    demonstrateDynamicCreation();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ Factory Method –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–∏–±–∫–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
    std::cout << "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏" << std::endl;
    std::cout << "‚Ä¢ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞" << std::endl;
    std::cout << "‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤ –∏ UI —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤" << std::endl;
    std::cout << "‚Ä¢ –í—Å–µ–≥–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
    
    return 0;
}
