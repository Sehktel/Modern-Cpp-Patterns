/**
 * @file hello_world.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ Hello World –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ C++ –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–¥–Ω–∏ –∏ —Ç–µ –∂–µ –∑–∞–¥–∞—á–∏ —Ä–µ—à–∞–ª–∏—Å—å –≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö C++,
 * –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—è –ø—Ä–æ–≥—Ä–µ—Å—Å —è–∑—ã–∫–∞ –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.
 * 
 * @author Sehktel
 * @license MIT License
 * @copyright Copyright (c) 2025 Sehktel
 * @version 1.0
 */

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <optional>
#include <tuple>
#include <algorithm>
#include <numeric>

// ============================================================================
// –≠–í–û–õ–Æ–¶–ò–Ø HELLO WORLD
// ============================================================================

/**
 * @brief –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Hello World (C++98 —Å—Ç–∏–ª—å)
 * 
 * –ü—Ä–æ–±–ª–µ–º—ã —ç—Ç–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:
 * - –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
 * - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
 * - –ú–Ω–æ–≥–æ—Å–ª–æ–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
 */
void helloWorldClassic() {
    std::cout << "=== –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π C++ (C++98) ===" << std::endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    std::vector<std::string>* messages = new std::vector<std::string>();
    messages->push_back("Hello");
    messages->push_back("World");
    messages->push_back("from");
    messages->push_back("Classic");
    messages->push_back("C++!");
    
    // –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    for (std::vector<std::string>::iterator it = messages->begin(); 
         it != messages->end(); ++it) {
        std::cout << *it << " ";
    }
    std::cout << std::endl;
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    delete messages;
}

/**
 * @brief –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Hello World (C++11 —Å—Ç–∏–ª—å)
 * 
 * –£–ª—É—á—à–µ–Ω–∏—è:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é (RAII)
 * - Auto –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∏–ø–æ–≤
 * - Range-based for loops
 * - nullptr –≤–º–µ—Å—Ç–æ NULL
 */
void helloWorldModern() {
    std::cout << "\n=== –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π C++ (C++11) ===" << std::endl;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
    auto messages = std::make_unique<std::vector<std::string>>();
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    messages->push_back("Hello");
    messages->push_back("World");
    messages->push_back("from");
    messages->push_back("Modern");
    messages->push_back("C++!");
    
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
    for (const auto& message : *messages) {
        std::cout << message << " ";
    }
    std::cout << std::endl;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
}

/**
 * @brief –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π Hello World (C++17 —Å—Ç–∏–ª—å)
 * 
 * –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - Structured bindings
 * - std::optional –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 * - std::string_view –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
 * - Constexpr –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
 */
void helloWorldAdvanced() {
    std::cout << "\n=== –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π C++ (C++17) ===" << std::endl;
    
    // Structured bindings –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä–∞–º–∏ –∏ –∫–æ—Ä—Ç–µ–∂–∞–º–∏
    auto [greeting, target] = std::make_tuple("Hello", "Modern C++");
    std::cout << greeting << " " << target << "!" << std::endl;
    
    // std::optional –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    std::optional<std::string> maybeMessage = getMessageIfAvailable();
    if (maybeMessage.has_value()) {
        std::cout << "–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " << maybeMessage.value() << std::endl;
    } else {
        std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ" << std::endl;
    }
    
    // std::string_view –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
    printMessage(std::string_view("–ü—Ä–∏–≤–µ—Ç –æ—Ç C++17!"));
    
    // Constexpr –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    constexpr int result = calculateAtCompileTime(5, 3);
    std::cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: " << result << std::endl;
}

// ============================================================================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ std::optional
 * @return std::optional<std::string> –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
std::optional<std::string> getMessageIfAvailable() {
    static int callCount = 0;
    ++callCount;
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —á–µ—Ç–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö
    if (callCount % 2 == 0) {
        return "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ!";
    }
    return std::nullopt; // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ std::string_view
 * @param message –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É (–±–µ–∑ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
 */
void printMessage(std::string_view message) {
    std::cout << "string_view —Å–æ–æ–±—â–µ–Ω–∏–µ: " << message << std::endl;
}

/**
 * @brief Constexpr —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
 * @param a –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ
 * @param b –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ
 * @return –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 */
constexpr int calculateAtCompileTime(int a, int b) {
    return a * a + b * b;
}

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–û–í–†–ï–ú–ï–ù–ù–´–• –ò–î–ò–û–ú
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–¥–∏–æ–º—ã C++
 */
void demonstrateModernIdioms() {
    std::cout << "\n=== –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–¥–∏–æ–º—ã C++ ===" << std::endl;
    
    // 1. Auto —Å lambda —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    auto add = [](int a, int b) { return a + b; };
    std::cout << "Lambda —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << add(5, 3) << std::endl;
    
    // 2. Range-based for —Å structured bindings
    std::map<std::string, int> wordCounts = {
        {"hello", 5},
        {"world", 3},
        {"modern", 2},
        {"c++", 1}
    };
    
    std::cout << "–ß–∞—Å—Ç–æ—Ç–∞ —Å–ª–æ–≤:" << std::endl;
    for (const auto& [word, count] : wordCounts) {
        std::cout << "  " << word << ": " << count << std::endl;
    }
    
    // 3. –ê–ª–≥–æ—Ä–∏—Ç–º—ã STL —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
    std::vector<int> evenNumbers;
    std::copy_if(numbers.begin(), numbers.end(), 
                 std::back_inserter(evenNumbers),
                 [](int n) { return n % 2 == 0; });
    
    std::cout << "–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: ";
    for (const auto& num : evenNumbers) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    // 4. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    std::vector<int> squares;
    std::transform(numbers.begin(), numbers.end(), 
                   std::back_inserter(squares),
                   [](int n) { return n * n; });
    
    std::cout << "–ö–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª: ";
    for (const auto& square : squares) {
        std::cout << square << " ";
    }
    std::cout << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—É—Ä—Å –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º C++!" << std::endl;
    std::cout << "üìö –£—Ä–æ–∫ 1.1: Hello World –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º C++" << std::endl;
    std::cout << std::string(60, '=') << std::endl;
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–∏ Hello World
    helloWorldClassic();
    helloWorldModern();
    helloWorldAdvanced();
    demonstrateModernIdioms();
    
    std::cout << "\n‚úÖ –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò–∑—É—á–∏—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ README.md" << std::endl;
    
    return 0;
}
