#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <functional>
#include <optional>
#include <variant>
#include <any>
#include <chrono>
#include <thread>

/**
 * @file modern_features.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π C++17/20
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ C++,
 * –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
 */

// ============================================================================
// VARIANT –ò TYPE-SAFE ALTERNATIVES
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è std::variant –¥–ª—è type-safe unions
 */
void demonstrateVariant() {
    std::cout << "\n=== std::variant - Type-Safe Unions ===" << std::endl;
    
    // variant –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∏–ø–æ–≤
    std::variant<int, std::string, double> value;
    
    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
    value = 42;
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ: " << std::get<int>(value) << std::endl;
    
    value = std::string("Hello Variant");
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ: " << std::get<std::string>(value) << std::endl;
    
    value = 3.14;
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ: " << std::get<double>(value) << std::endl;
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–∏–ø–∞
    if (std::holds_alternative<std::string>(value)) {
        std::cout << "–°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " << std::get<std::string>(value) << std::endl;
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è std::any –¥–ª—è type erasure
 */
void demonstrateAny() {
    std::cout << "\n=== std::any - Type Erasure ===" << std::endl;
    
    std::any value;
    
    // –ú–æ–∂–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –ª—é–±–æ–π —Ç–∏–ø
    value = 42;
    value = std::string("Hello Any");
    value = std::vector<int>{1, 2, 3, 4, 5};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∏ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (value.type() == typeid(std::vector<int>)) {
        auto vec = std::any_cast<std::vector<int>>(value);
        std::cout << "–í–µ–∫—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç " << vec.size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤" << std::endl;
    }
}

// ============================================================================
// FUNCTIONAL PROGRAMMING FEATURES
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ C++
 */
void demonstrateFunctionalProgramming() {
    std::cout << "\n=== –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ===" << std::endl;
    
    std::vector<int> numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    
    // 1. Map (transform)
    std::vector<int> doubled;
    std::transform(numbers.begin(), numbers.end(), 
                   std::back_inserter(doubled),
                   [](int x) { return x * 2; });
    
    std::cout << "–£–¥–≤–æ–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞: ";
    for (const auto& num : doubled) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    // 2. Filter (copy_if)
    std::vector<int> evens;
    std::copy_if(numbers.begin(), numbers.end(), 
                 std::back_inserter(evens),
                 [](int x) { return x % 2 == 0; });
    
    std::cout << "–ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞: ";
    for (const auto& num : evens) {
        std::cout << num << " ";
    }
    std::cout << std::endl;
    
    // 3. Reduce (accumulate)
    int sum = std::accumulate(numbers.begin(), numbers.end(), 0);
    std::cout << "–°—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª: " << sum << std::endl;
    
    // 4. Compose functions
    auto compose = [](auto f, auto g) {
        return [f, g](auto x) { return f(g(x)); };
    };
    
    auto square = [](int x) { return x * x; };
    auto addOne = [](int x) { return x + 1; };
    
    auto squareThenAddOne = compose(addOne, square);
    std::cout << "5^2 + 1 = " << squareThenAddOne(5) << std::endl;
}

// ============================================================================
// SMART POINTERS AND MEMORY MANAGEMENT
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ smart pointers
 */
void demonstrateSmartPointers() {
    std::cout << "\n=== Smart Pointers ===" << std::endl;
    
    // 1. unique_ptr - –µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ
    auto uniqueData = std::make_unique<std::vector<int>>();
    uniqueData->push_back(1);
    uniqueData->push_back(2);
    uniqueData->push_back(3);
    
    std::cout << "unique_ptr —Å–æ–¥–µ—Ä–∂–∏—Ç " << uniqueData->size() << " —ç–ª–µ–º–µ–Ω—Ç–æ–≤" << std::endl;
    
    // 2. shared_ptr - —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ
    auto sharedData = std::make_shared<std::string>("Shared String");
    std::cout << "shared_ptr —Å—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫: " << sharedData.use_count() << std::endl;
    
    {
        auto anotherReference = sharedData;
        std::cout << "–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏ —Å—á–µ—Ç—á–∏–∫: " << sharedData.use_count() << std::endl;
    } // anotherReference —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
    
    std::cout << "–ü–æ—Å–ª–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏–∏ —Å—á–µ—Ç—á–∏–∫: " << sharedData.use_count() << std::endl;
    
    // 3. weak_ptr - —Å–ª–∞–±–∞—è —Å—Å—ã–ª–∫–∞ (–Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫)
    std::weak_ptr<std::string> weakRef = sharedData;
    std::cout << "weak_ptr –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫: " << sharedData.use_count() << std::endl;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (auto locked = weakRef.lock()) {
        std::cout << "–û–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ weak_ptr: " << *locked << std::endl;
    }
}

// ============================================================================
// ASYNC PROGRAMMING
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
 */
void demonstrateAsyncProgramming() {
    std::cout << "\n=== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ===" << std::endl;
    
    auto start = std::chrono::high_resolution_clock::now();
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    std::cout << "–ù–∞—á–∏–Ω–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É..." << std::endl;
    
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    
    std::cout << "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ " << duration.count() << " –º—Å" << std::endl;
}

// ============================================================================
// TYPE TRAITS AND METAPROGRAMMING
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è type traits
 */
template<typename T>
void demonstrateTypeTraits(T value) {
    std::cout << "\n=== Type Traits –¥–ª—è —Ç–∏–ø–∞ " << typeid(T).name() << " ===" << std::endl;
    
    std::cout << "–Ø–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º: " << std::boolalpha << std::is_integral_v<T> << std::endl;
    std::cout << "–Ø–≤–ª—è–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–µ–º: " << std::boolalpha << std::is_pointer_v<T> << std::endl;
    std::cout << "–Ø–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π: " << std::boolalpha << std::is_reference_v<T> << std::endl;
    std::cout << "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π: " << std::boolalpha << std::is_const_v<T> << std::endl;
}

// ============================================================================
// CONSTEXPR –ò COMPILE-TIME COMPUTATIONS
// ============================================================================

/**
 * @brief Constexpr —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
 */
constexpr int fibonacci(int n) {
    if (n <= 1) return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è constexpr –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
 */
void demonstrateConstexpr() {
    std::cout << "\n=== Constexpr –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ===" << std::endl;
    
    // –≠—Ç–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    constexpr int fib10 = fibonacci(10);
    constexpr int fib15 = fibonacci(15);
    
    std::cout << "10-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏: " << fib10 << std::endl;
    std::cout << "15-–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏: " << fib15 << std::endl;
    
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–º–µ—Ä–∞ –º–∞—Å—Å–∏–≤–∞
    int array[fib10];
    std::cout << "–†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞: " << sizeof(array) / sizeof(array[0]) << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
// ============================================================================

int main() {
    std::cout << "üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π C++" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateVariant();
    demonstrateAny();
    demonstrateFunctionalProgramming();
    demonstrateSmartPointers();
    demonstrateAsyncProgramming();
    demonstrateConstexpr();
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è type traits —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏
    demonstrateTypeTraits(42);
    demonstrateTypeTraits(std::string("Hello"));
    demonstrateTypeTraits(3.14);
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "–≠—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è." << std::endl;
    
    return 0;
}
