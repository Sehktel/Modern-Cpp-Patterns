#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <random>
#include <algorithm>
#include <cmath>

/**
 * @file game_strategies.cpp
 * @brief –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã Strategy –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –∏–≥—Ä–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Strategy –ø–∞—Ç—Ç–µ—Ä–Ω–∞
 * –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–≥—Ä–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ò–ò.
 */

// ============================================================================
// –ò–ì–†–û–í–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ò–ò
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ò–ò
 */
class AIStrategy {
public:
    virtual ~AIStrategy() = default;
    virtual std::string getAction(const std::string& situation) = 0;
    virtual std::string getStrategyName() const = 0;
    virtual int getAggressiveness() const = 0; // 0-100
};

/**
 * @brief –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
class AggressiveStrategy : public AIStrategy {
private:
    std::mt19937 rng_;
    
public:
    AggressiveStrategy() : rng_(std::random_device{}()) {}
    
    std::string getAction(const std::string& situation) override {
        std::vector<std::string> actions = {
            "–ê—Ç–∞–∫–æ–≤–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ—â–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
            "–ë—Ä–æ—Å–∏—Ç—å—Å—è –≤ –±–æ–π",
            "–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±–æ–µ–≤–æ–π –∫—Ä–∏–∫",
            "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±–µ—Ä—Å–µ—Ä–∫"
        };
        
        std::uniform_int_distribution<int> dist(0, static_cast<int>(actions.size()) - 1);
        return actions[dist(rng_)];
    }
    
    std::string getStrategyName() const override {
        return "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è";
    }
    
    int getAggressiveness() const override {
        return 90;
    }
};

/**
 * @brief –ó–∞—â–∏—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
class DefensiveStrategy : public AIStrategy {
private:
    std::mt19937 rng_;
    
public:
    DefensiveStrategy() : rng_(std::random_device{}()) {}
    
    std::string getAction(const std::string& situation) override {
        std::vector<std::string> actions = {
            "–ü–æ–¥–Ω—è—Ç—å —â–∏—Ç",
            "–û—Ç—Å—Ç—É–ø–∏—Ç—å –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –º–µ—Å—Ç—É",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—â–∏—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ",
            "–õ–µ—á–∏—Ç—å —Å–æ—é–∑–Ω–∏–∫–æ–≤",
            "–ñ–¥–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞"
        };
        
        std::uniform_int_distribution<int> dist(0, static_cast<int>(actions.size()) - 1);
        return actions[dist(rng_)];
    }
    
    std::string getStrategyName() const override {
        return "–ó–∞—â–∏—Ç–Ω–∞—è";
    }
    
    int getAggressiveness() const override {
        return 20;
    }
};

/**
 * @brief –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
class BalancedStrategy : public AIStrategy {
private:
    std::mt19937 rng_;
    
public:
    BalancedStrategy() : rng_(std::random_device{}()) {}
    
    std::string getAction(const std::string& situation) override {
        std::vector<std::string> actions = {
            "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é",
            "–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Å —Å–æ—é–∑–Ω–∏–∫–∞–º–∏",
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
            "–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É",
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –∞—Ç–∞–∫–∏ –∏ –∑–∞—â–∏—Ç—ã"
        };
        
        std::uniform_int_distribution<int> dist(0, static_cast<int>(actions.size()) - 1);
        return actions[dist(rng_)];
    }
    
    std::string getStrategyName() const override {
        return "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è";
    }
    
    int getAggressiveness() const override {
        return 50;
    }
};

/**
 * @brief –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
 */
class RandomStrategy : public AIStrategy {
private:
    std::mt19937 rng_;
    
public:
    RandomStrategy() : rng_(std::random_device{}()) {}
    
    std::string getAction(const std::string& situation) override {
        std::vector<std::string> actions = {
            "–°–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ",
            "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–∫—Ç–∏–∫—É",
            "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å",
            "–î–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ",
            "–ò–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
        };
        
        std::uniform_int_distribution<int> dist(0, static_cast<int>(actions.size()) - 1);
        return actions[dist(rng_)];
    }
    
    std::string getStrategyName() const override {
        return "–°–ª—É—á–∞–π–Ω–∞—è";
    }
    
    int getAggressiveness() const override {
        return 50; // –°–ª—É—á–∞–π–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
    }
};

/**
 * @brief –ò–≥—Ä–æ–≤–æ–π –ò–ò
 */
class GameAI {
private:
    std::unique_ptr<AIStrategy> strategy_;
    std::string aiName_;
    int health_;
    int mana_;
    
public:
    GameAI(const std::string& name, int health = 100, int mana = 100)
        : aiName_(name), health_(health), mana_(mana) {}
    
    void setStrategy(std::unique_ptr<AIStrategy> strategy) {
        strategy_ = std::move(strategy);
    }
    
    void act(const std::string& situation) {
        if (strategy_) {
            std::string action = strategy_->getAction(situation);
            std::cout << "ü§ñ " << aiName_ << " (" << strategy_->getStrategyName() 
                      << "): " << action << std::endl;
        } else {
            std::cout << "ü§ñ " << aiName_ << ": –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" << std::endl;
        }
    }
    
    void takeDamage(int damage) {
        health_ -= damage;
        std::cout << "üíî " << aiName_ << " –ø–æ–ª—É—á–∞–µ—Ç " << damage 
                  << " —É—Ä–æ–Ω–∞. –ó–¥–æ—Ä–æ–≤—å–µ: " << health_ << std::endl;
    }
    
    void heal(int amount) {
        health_ += amount;
        std::cout << "üíö " << aiName_ << " –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç " << amount 
                  << " –∑–¥–æ—Ä–æ–≤—å—è. –ó–¥–æ—Ä–æ–≤—å–µ: " << health_ << std::endl;
    }
    
    int getHealth() const { return health_; }
    int getMana() const { return mana_; }
    const std::string& getName() const { return aiName_; }
    
    std::string getCurrentStrategyName() const {
        return strategy_ ? strategy_->getStrategyName() : "No Strategy";
    }
};

// ============================================================================
// –°–¢–†–ê–¢–ï–ì–ò–ò –î–í–ò–ñ–ï–ù–ò–Ø
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
 */
class MovementStrategy {
public:
    virtual ~MovementStrategy() = default;
    virtual std::pair<int, int> calculateNextPosition(int currentX, int currentY, 
                                                     int targetX, int targetY) = 0;
    virtual std::string getMovementType() const = 0;
};

/**
 * @brief –ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
 */
class LinearMovement : public MovementStrategy {
public:
    std::pair<int, int> calculateNextPosition(int currentX, int currentY, 
                                            int targetX, int targetY) override {
        int dx = targetX - currentX;
        int dy = targetY - currentY;
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if (dx != 0) dx = dx / std::abs(dx);
        if (dy != 0) dy = dy / std::abs(dy);
        
        return {currentX + dx, currentY + dy};
    }
    
    std::string getMovementType() const override {
        return "–ü—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω–æ–µ";
    }
};

/**
 * @brief –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
 */
class DiagonalMovement : public MovementStrategy {
public:
    std::pair<int, int> calculateNextPosition(int currentX, int currentY, 
                                            int targetX, int targetY) override {
        int dx = targetX - currentX;
        int dy = targetY - currentY;
        
        // –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
        if (dx != 0 && dy != 0) {
            dx = dx / std::abs(dx);
            dy = dy / std::abs(dy);
        } else if (dx != 0) {
            dx = dx / std::abs(dx);
            dy = 0;
        } else if (dy != 0) {
            dx = 0;
            dy = dy / std::abs(dy);
        }
        
        return {currentX + dx, currentY + dy};
    }
    
    std::string getMovementType() const override {
        return "–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–µ";
    }
};

/**
 * @brief –ó–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
 */
class ZigzagMovement : public MovementStrategy {
private:
    bool horizontalFirst_ = true;
    
public:
    std::pair<int, int> calculateNextPosition(int currentX, int currentY, 
                                            int targetX, int targetY) override {
        int dx = targetX - currentX;
        int dy = targetY - currentY;
        
        if (horizontalFirst_) {
            if (dx != 0) {
                horizontalFirst_ = false;
                return {currentX + (dx / std::abs(dx)), currentY};
            } else if (dy != 0) {
                horizontalFirst_ = false;
                return {currentX, currentY + (dy / std::abs(dy))};
            }
        } else {
            if (dy != 0) {
                horizontalFirst_ = true;
                return {currentX, currentY + (dy / std::abs(dy))};
            } else if (dx != 0) {
                horizontalFirst_ = true;
                return {currentX + (dx / std::abs(dx)), currentY};
            }
        }
        
        return {currentX, currentY};
    }
    
    std::string getMovementType() const override {
        return "–ó–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω–æ–µ";
    }
};

/**
 * @brief –ò–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º
 */
class GameObject {
private:
    std::unique_ptr<MovementStrategy> movementStrategy_;
    std::string name_;
    int x_, y_;
    
public:
    GameObject(const std::string& name, int x = 0, int y = 0)
        : name_(name), x_(x), y_(y) {}
    
    void setMovementStrategy(std::unique_ptr<MovementStrategy> strategy) {
        movementStrategy_ = std::move(strategy);
    }
    
    void moveTo(int targetX, int targetY) {
        if (movementStrategy_) {
            auto [newX, newY] = movementStrategy_->calculateNextPosition(x_, y_, targetX, targetY);
            std::cout << "üéÆ " << name_ << " (" << movementStrategy_->getMovementType() 
                      << ") –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å (" << x_ << "," << y_ << ") –Ω–∞ (" 
                      << newX << "," << newY << ")" << std::endl;
            x_ = newX;
            y_ = newY;
        } else {
            std::cout << "üéÆ " << name_ << ": –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" << std::endl;
        }
    }
    
    std::pair<int, int> getPosition() const {
        return {x_, y_};
    }
    
    const std::string& getName() const {
        return name_;
    }
};

// ============================================================================
// –°–¢–†–ê–¢–ï–ì–ò–ò –ê–¢–ê–ö–ò
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ç–∞–∫–∏
 */
class AttackStrategy {
public:
    virtual ~AttackStrategy() = default;
    virtual int calculateDamage(int baseDamage, int level) = 0;
    virtual std::string getAttackType() const = 0;
    virtual double getCriticalChance() const = 0;
};

/**
 * @brief –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞
 */
class PhysicalAttack : public AttackStrategy {
public:
    int calculateDamage(int baseDamage, int level) override {
        return baseDamage + (level * 2);
    }
    
    std::string getAttackType() const override {
        return "–§–∏–∑–∏—á–µ—Å–∫–∞—è";
    }
    
    double getCriticalChance() const override {
        return 0.15; // 15% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
    }
};

/**
 * @brief –ú–∞–≥–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞
 */
class MagicalAttack : public AttackStrategy {
public:
    int calculateDamage(int baseDamage, int level) override {
        return static_cast<int>(baseDamage * 1.5) + (level * 3);
    }
    
    std::string getAttackType() const override {
        return "–ú–∞–≥–∏—á–µ—Å–∫–∞—è";
    }
    
    double getCriticalChance() const override {
        return 0.25; // 25% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
    }
};

/**
 * @brief –ê—Ç–∞–∫–∞ —è–¥–æ–º
 */
class PoisonAttack : public AttackStrategy {
public:
    int calculateDamage(int baseDamage, int level) override {
        return baseDamage + (level * 1); // –ú–µ–Ω—å—à–µ —É—Ä–æ–Ω–∞, –Ω–æ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
    }
    
    std::string getAttackType() const override {
        return "–Ø–¥–æ–≤–∏—Ç–∞—è";
    }
    
    double getCriticalChance() const override {
        return 0.10; // 10% —à–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞
    }
};

/**
 * @brief –ò–≥—Ä–æ–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂
 */
class GameCharacter {
private:
    std::unique_ptr<AttackStrategy> attackStrategy_;
    std::string name_;
    int level_;
    int baseDamage_;
    
public:
    GameCharacter(const std::string& name, int level = 1, int baseDamage = 10)
        : name_(name), level_(level), baseDamage_(baseDamage) {}
    
    void setAttackStrategy(std::unique_ptr<AttackStrategy> strategy) {
        attackStrategy_ = std::move(strategy);
    }
    
    int attack() {
        if (attackStrategy_) {
            int damage = attackStrategy_->calculateDamage(baseDamage_, level_);
            std::cout << "‚öîÔ∏è " << name_ << " (" << attackStrategy_->getAttackType() 
                      << ") –∞—Ç–∞–∫—É–µ—Ç —Å —É—Ä–æ–Ω–æ–º " << damage << std::endl;
            return damage;
        } else {
            std::cout << "‚öîÔ∏è " << name_ << ": –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Ç–∞–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" << std::endl;
            return 0;
        }
    }
    
    std::string getAttackType() const {
        return attackStrategy_ ? attackStrategy_->getAttackType() : "No Strategy";
    }
    
    double getCriticalChance() const {
        return attackStrategy_ ? attackStrategy_->getCriticalChance() : 0.0;
    }
    
    const std::string& getName() const {
        return name_;
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ò–ò
 */
void demonstrateAIStrategies() {
    std::cout << "\n=== –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ò–ò ===" << std::endl;
    
    GameAI ai1("–í–æ–∏–Ω", 120, 50);
    GameAI ai2("–ú–∞–≥", 80, 150);
    GameAI ai3("–†–∞–∑–±–æ–π–Ω–∏–∫", 100, 80);
    GameAI ai4("–°—Ç—Ä–∞–Ω–Ω–∏–∫", 90, 100);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    ai1.setStrategy(std::make_unique<AggressiveStrategy>());
    ai2.setStrategy(std::make_unique<DefensiveStrategy>());
    ai3.setStrategy(std::make_unique<BalancedStrategy>());
    ai4.setStrategy(std::make_unique<RandomStrategy>());
    
    std::vector<GameAI*> ais = {&ai1, &ai2, &ai3, &ai4};
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏—Ç—É–∞—Ü–∏–π
    std::vector<std::string> situations = {
        "–í—Ä–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è",
        "–°–æ—é–∑–Ω–∏–∫ —Ä–∞–Ω–µ–Ω",
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–∫—Ä–æ–≤–∏—â–µ",
        "–õ–æ–≤—É—à–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    };
    
    for (const auto& situation : situations) {
        std::cout << "\n--- –°–∏—Ç—É–∞—Ü–∏—è: " << situation << " ---" << std::endl;
        for (auto* ai : ais) {
            ai->act(situation);
        }
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–≤–∏–∂–µ–Ω–∏—è
 */
void demonstrateMovementStrategies() {
    std::cout << "\n=== –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è ===" << std::endl;
    
    GameObject player("–ò–≥—Ä–æ–∫", 0, 0);
    GameObject enemy("–í—Ä–∞–≥", 5, 5);
    GameObject npc("NPC", 3, 3);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    player.setMovementStrategy(std::make_unique<LinearMovement>());
    enemy.setMovementStrategy(std::make_unique<DiagonalMovement>());
    npc.setMovementStrategy(std::make_unique<ZigzagMovement>());
    
    std::vector<GameObject*> objects = {&player, &enemy, &npc};
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
    int targetX = 10, targetY = 10;
    std::cout << "–¶–µ–ª—å: (" << targetX << "," << targetY << ")" << std::endl;
    
    for (int step = 0; step < 5; ++step) {
        std::cout << "\n--- –®–∞–≥ " << (step + 1) << " ---" << std::endl;
        for (auto* obj : objects) {
            obj->moveTo(targetX, targetY);
        }
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∞—Ç–∞–∫–∏
 */
void demonstrateAttackStrategies() {
    std::cout << "\n=== –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ç–∞–∫–∏ ===" << std::endl;
    
    GameCharacter warrior("–í–æ–∏–Ω", 5, 15);
    GameCharacter mage("–ú–∞–≥", 8, 12);
    GameCharacter assassin("–£–±–∏–π—Ü–∞", 6, 18);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ç–∞–∫–∏
    warrior.setAttackStrategy(std::make_unique<PhysicalAttack>());
    mage.setAttackStrategy(std::make_unique<MagicalAttack>());
    assassin.setAttackStrategy(std::make_unique<PoisonAttack>());
    
    std::vector<GameCharacter*> characters = {&warrior, &mage, &assassin};
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ç–∞–∫
    for (int round = 1; round <= 3; ++round) {
        std::cout << "\n--- –†–∞—É–Ω–¥ " << round << " ---" << std::endl;
        for (auto* character : characters) {
            character->attack();
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    std::cout << "\n--- –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---" << std::endl;
    for (auto* character : characters) {
        std::cout << character->getName() << ":" << std::endl;
        std::cout << "  –¢–∏–ø –∞—Ç–∞–∫–∏: " << character->getAttackType() << std::endl;
        std::cout << "  –®–∞–Ω—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞—Ä–∞: " << (character->getCriticalChance() * 100) << "%" << std::endl;
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–º–µ–Ω—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
 */
void demonstrateDynamicStrategyChange() {
    std::cout << "\n=== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π ===" << std::endl;
    
    GameAI adaptiveAI("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ò–ò", 100, 100);
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    adaptiveAI.setStrategy(std::make_unique<AggressiveStrategy>());
    std::cout << "–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: " << adaptiveAI.getCurrentStrategyName() << std::endl;
    adaptiveAI.act("–í—Ä–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
    
    // –ú–µ–Ω—è–µ–º –Ω–∞ –∑–∞—â–∏—Ç–Ω—É—é –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
    adaptiveAI.takeDamage(80);
    std::cout << "\n–ó–¥–æ—Ä–æ–≤—å–µ –Ω–∏–∑–∫–æ–µ, –º–µ–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –Ω–∞ –∑–∞—â–∏—Ç–Ω—É—é..." << std::endl;
    adaptiveAI.setStrategy(std::make_unique<DefensiveStrategy>());
    adaptiveAI.act("–í—Ä–∞–≥ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è");
    
    // –õ–µ—á–∏–º—Å—è –∏ –º–µ–Ω—è–µ–º –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é
    adaptiveAI.heal(60);
    std::cout << "\n–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –º–µ–Ω—è–µ–º –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é..." << std::endl;
    adaptiveAI.setStrategy(std::make_unique<BalancedStrategy>());
    adaptiveAI.act("–°–∏—Ç—É–∞—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∞—Å—å");
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üéÆ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∏–≥—Ä–æ–≤–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateAIStrategies();
    demonstrateMovementStrategies();
    demonstrateAttackStrategies();
    demonstrateDynamicStrategyChange();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ Strategy –ø–∞—Ç—Ç–µ—Ä–Ω –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ò–ò" << std::endl;
    std::cout << "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è" << std::endl;
    std::cout << "‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ç–∞–∫–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π" << std::endl;
    std::cout << "‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–µ–ª–∞–µ—Ç –ò–ò –±–æ–ª–µ–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º" << std::endl;
    std::cout << "‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω —É–ø—Ä–æ—â–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è" << std::endl;
    
    return 0;
}
