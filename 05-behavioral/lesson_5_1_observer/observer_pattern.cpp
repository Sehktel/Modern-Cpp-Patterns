#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <mutex>
#include <algorithm>
#include <thread>
#include <chrono>

/**
 * @file observer_pattern.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer,
 * –æ—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º C++17/20.
 */

// ============================================================================
// –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô OBSERVER PATTERN
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
 */
class Observer {
public:
    virtual ~Observer() = default;
    virtual void update(const std::string& message) = 0;
    virtual std::string getName() const = 0;
};

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—É–±—ä–µ–∫—Ç–∞
 */
class Subject {
public:
    virtual ~Subject() = default;
    virtual void attach(std::shared_ptr<Observer> observer) = 0;
    virtual void detach(std::shared_ptr<Observer> observer) = 0;
    virtual void notify(const std::string& message) = 0;
};

/**
 * @brief –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—É–±—ä–µ–∫—Ç - —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
class NotificationSystem : public Subject {
private:
    std::vector<std::weak_ptr<Observer>> observers_;
    std::string systemName_;
    
public:
    explicit NotificationSystem(const std::string& name) : systemName_(name) {}
    
    void attach(std::shared_ptr<Observer> observer) override {
        observers_.push_back(observer);
        std::cout << "Observer '" << observer->getName() 
                  << "' –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–∏—Å—Ç–µ–º—É '" << systemName_ << "'" << std::endl;
    }
    
    void detach(std::shared_ptr<Observer> observer) override {
        observers_.erase(
            std::remove_if(observers_.begin(), observers_.end(),
                [&observer](const std::weak_ptr<Observer>& weak_obs) {
                    return weak_obs.lock() == observer;
                }),
            observers_.end());
        std::cout << "Observer '" << observer->getName() 
                  << "' –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã '" << systemName_ << "'" << std::endl;
    }
    
    void notify(const std::string& message) override {
        std::cout << "\n--- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã '" << systemName_ << "' ---" << std::endl;
        
        for (auto it = observers_.begin(); it != observers_.end();) {
            if (auto observer = it->lock()) {
                observer->update(message);
                ++it;
            } else {
                it = observers_.erase(it);
            }
        }
    }
    
    void publishMessage(const std::string& message) {
        notify(message);
    }
    
    size_t getObserverCount() const {
        return observers_.size();
    }
};

/**
 * @brief –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å - Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
class EmailObserver : public Observer {
private:
    std::string email_;
    
public:
    explicit EmailObserver(const std::string& email) : email_(email) {}
    
    void update(const std::string& message) override {
        std::cout << "üìß Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ " << email_ 
                  << ": " << message << std::endl;
    }
    
    std::string getName() const override {
        return "EmailObserver(" + email_ + ")";
    }
};

/**
 * @brief –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å - SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
class SMSObserver : public Observer {
private:
    std::string phoneNumber_;
    
public:
    explicit SMSObserver(const std::string& phone) : phoneNumber_(phone) {}
    
    void update(const std::string& message) override {
        std::cout << "üì± SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ " << phoneNumber_ 
                  << ": " << message << std::endl;
    }
    
    std::string getName() const override {
        return "SMSObserver(" + phoneNumber_ + ")";
    }
};

/**
 * @brief –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
class LoggingObserver : public Observer {
private:
    std::string logFile_;
    
public:
    explicit LoggingObserver(const std::string& logFile) : logFile_(logFile) {}
    
    void update(const std::string& message) override {
        std::cout << "üìù –ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ " << logFile_ 
                  << ": " << message << std::endl;
    }
    
    std::string getName() const override {
        return "LoggingObserver(" + logFile_ + ")";
    }
};

// ============================================================================
// –°–û–í–†–ï–ú–ï–ù–ù–´–ô OBSERVER –° std::function
// ============================================================================

/**
 * @brief –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—É–±—ä–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º std::function
 */
class ModernSubject {
private:
    std::vector<std::function<void(const std::string&)>> observers_;
    std::string subjectName_;
    
public:
    explicit ModernSubject(const std::string& name) : subjectName_(name) {}
    
    void attach(std::function<void(const std::string&)> observer) {
        observers_.push_back(observer);
        std::cout << "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ '" << subjectName_ << "'" << std::endl;
    }
    
    void notify(const std::string& message) {
        std::cout << "\n--- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Å—É–±—ä–µ–∫—Ç–∞ '" << subjectName_ << "' ---" << std::endl;
        for (const auto& observer : observers_) {
            observer(message);
        }
    }
    
    void publishMessage(const std::string& message) {
        notify(message);
    }
    
    size_t getObserverCount() const {
        return observers_.size();
    }
};

// ============================================================================
// EVENT-DRIVEN OBSERVER
// ============================================================================

/**
 * @brief –®–∞–±–ª–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–±—ã—Ç–∏–π
 */
template<typename... Args>
class Event {
private:
    std::vector<std::function<void(Args...)>> handlers_;
    std::string eventName_;
    
public:
    explicit Event(const std::string& name) : eventName_(name) {}
    
    void subscribe(std::function<void(Args...)> handler) {
        handlers_.push_back(handler);
        std::cout << "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ '" << eventName_ << "'" << std::endl;
    }
    
    void emit(Args... args) {
        std::cout << "\n--- –°–æ–±—ã—Ç–∏–µ '" << eventName_ << "' ---" << std::endl;
        for (const auto& handler : handlers_) {
            handler(args...);
        }
    }
    
    size_t getSubscriberCount() const {
        return handlers_.size();
    }
    
    const std::string& getName() const {
        return eventName_;
    }
};

// ============================================================================
// RAII OBSERVER –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–¢–ü–ò–°–ö–û–ô
// ============================================================================

/**
 * @brief RAII –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–æ–π
 */
class RAIIObserver {
private:
    std::function<void()> unsubscribe_;
    std::string observerName_;
    
public:
    template<typename Subject, typename Observer>
    RAIIObserver(Subject& subject, Observer observer, const std::string& name)
        : observerName_(name) {
        subject.attach(observer);
        unsubscribe_ = [&subject, observer]() {
            subject.detach(observer);
        };
        std::cout << "RAII Observer '" << name << "' —Å–æ–∑–¥–∞–Ω" << std::endl;
    }
    
    ~RAIIObserver() {
        if (unsubscribe_) {
            unsubscribe_();
            std::cout << "RAII Observer '" << observerName_ << "' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø–∏—Å–∞–Ω" << std::endl;
        }
    }
    
    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    RAIIObserver(const RAIIObserver&) = delete;
    RAIIObserver& operator=(const RAIIObserver&) = delete;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    RAIIObserver(RAIIObserver&& other) noexcept 
        : unsubscribe_(std::move(other.unsubscribe_)), observerName_(std::move(other.observerName_)) {
        other.unsubscribe_ = nullptr;
    }
    
    const std::string& getName() const {
        return observerName_;
    }
};

// ============================================================================
// THREAD-SAFE OBSERVER
// ============================================================================

/**
 * @brief –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å—É–±—ä–µ–∫—Ç
 */
class ThreadSafeSubject {
private:
    std::vector<std::function<void(const std::string&)>> observers_;
    mutable std::mutex mutex_;
    std::string subjectName_;
    
public:
    explicit ThreadSafeSubject(const std::string& name) : subjectName_(name) {}
    
    void attach(std::function<void(const std::string&)> observer) {
        std::lock_guard<std::mutex> lock(mutex_);
        observers_.push_back(observer);
        std::cout << "–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ '" << subjectName_ << "'" << std::endl;
    }
    
    void detach(std::function<void(const std::string&)> observer) {
        std::lock_guard<std::mutex> lock(mutex_);
        observers_.erase(
            std::remove(observers_.begin(), observers_.end(), observer),
            observers_.end());
        std::cout << "–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–Ω –æ—Ç '" << subjectName_ << "'" << std::endl;
    }
    
    void notify(const std::string& message) {
        std::vector<std::function<void(const std::string&)>> observers_copy;
        {
            std::lock_guard<std::mutex> lock(mutex_);
            observers_copy = observers_;
        }
        
        std::cout << "\n--- –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç '" << subjectName_ << "' ---" << std::endl;
        for (const auto& observer : observers_copy) {
            observer(message);
        }
    }
    
    void publishMessage(const std::string& message) {
        notify(message);
    }
    
    size_t getObserverCount() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return observers_.size();
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ Observer
 */
void demonstrateClassicObserver() {
    std::cout << "\n=== –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Observer Pattern ===" << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    auto notificationSystem = std::make_unique<NotificationSystem>("Main System");
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    auto emailObserver = std::make_shared<EmailObserver>("user@example.com");
    auto smsObserver = std::make_shared<SMSObserver>("+1234567890");
    auto logObserver = std::make_shared<LoggingObserver>("system.log");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    notificationSystem->attach(emailObserver);
    notificationSystem->attach(smsObserver);
    notificationSystem->attach(logObserver);
    
    std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: " << notificationSystem->getObserverCount() << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notificationSystem->publishMessage("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞");
    notificationSystem->publishMessage("–ù–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ");
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    notificationSystem->detach(smsObserver);
    std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏: " << notificationSystem->getObserverCount() << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notificationSystem->publishMessage("SMS –±–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ Observer
 */
void demonstrateModernObserver() {
    std::cout << "\n=== –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Observer —Å std::function ===" << std::endl;
    
    ModernSubject subject("Modern System");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å –ø–æ–º–æ—â—å—é lambda —Ñ—É–Ω–∫—Ü–∏–π
    subject.attach([](const std::string& msg) {
        std::cout << "üîî Lambda 1: " << msg << std::endl;
    });
    
    subject.attach([](const std::string& msg) {
        std::cout << "üîî Lambda 2: " << msg << std::endl;
    });
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ç–æ—Ä–∞
    struct MessagePrinter {
        std::string prefix_;
        explicit MessagePrinter(const std::string& prefix) : prefix_(prefix) {}
        
        void operator()(const std::string& msg) {
            std::cout << prefix_ << ": " << msg << std::endl;
        }
    };
    
    MessagePrinter printer("üéØ Functor");
    subject.attach([printer](const std::string& msg) {
        printer(msg);
    });
    
    std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: " << subject.getObserverCount() << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    subject.publishMessage("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ Observer");
    subject.publishMessage("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ std::function");
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Event-driven Observer
 */
void demonstrateEventDrivenObserver() {
    std::cout << "\n=== Event-driven Observer ===" << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
    Event<int, std::string> dataChanged("DataChanged");
    Event<std::string> userLogin("UserLogin");
    Event<> systemShutdown("SystemShutdown");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    dataChanged.subscribe([](int value, const std::string& name) {
        std::cout << "üìä –î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å: " << name << " = " << value << std::endl;
    });
    
    userLogin.subscribe([](const std::string& username) {
        std::cout << "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: " << username << std::endl;
    });
    
    systemShutdown.subscribe([]() {
        std::cout << "üõë –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É" << std::endl;
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    dataChanged.emit(42, "temperature");
    dataChanged.emit(100, "pressure");
    
    userLogin.emit("john_doe");
    userLogin.emit("jane_smith");
    
    systemShutdown.emit();
    
    std::cout << "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ DataChanged: " << dataChanged.getSubscriberCount() << std::endl;
    std::cout << "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ UserLogin: " << userLogin.getSubscriberCount() << std::endl;
    std::cout << "–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ SystemShutdown: " << systemShutdown.getSubscriberCount() << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAII Observer
 */
void demonstrateRAIIObserver() {
    std::cout << "\n=== RAII Observer —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–æ–π ===" << std::endl;
    
    auto notificationSystem = std::make_unique<NotificationSystem>("RAII System");
    
    // –°–æ–∑–¥–∞–µ–º RAII –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    {
        auto emailObserver = std::make_shared<EmailObserver>("raii@example.com");
        RAIIObserver raiiEmail(*notificationSystem, emailObserver, "RAII Email");
        
        auto smsObserver = std::make_shared<SMSObserver>("+9876543210");
        RAIIObserver raiiSMS(*notificationSystem, smsObserver, "RAII SMS");
        
        std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: " << notificationSystem->getObserverCount() << std::endl;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        notificationSystem->publishMessage("RAII Observer —Ä–∞–±–æ—Ç–∞–µ—Ç");
        
        std::cout << "–í—ã—Ö–æ–¥–∏–º –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏..." << std::endl;
    } // RAII –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∑–¥–µ—Å—å
    
    std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏: " 
              << notificationSystem->getObserverCount() << std::endl;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    notificationSystem->publishMessage("RAII –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å");
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ Observer
 */
void demonstrateThreadSafeObserver() {
    std::cout << "\n=== –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π Observer ===" << std::endl;
    
    ThreadSafeSubject subject("Thread Safe System");
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    subject.attach([](const std::string& msg) {
        std::cout << "üßµ Thread 1: " << msg << std::endl;
    });
    
    subject.attach([](const std::string& msg) {
        std::cout << "üßµ Thread 2: " << msg << std::endl;
    });
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    std::vector<std::thread> threads;
    
    for (int i = 0; i < 3; ++i) {
        threads.emplace_back([&subject, i]() {
            std::this_thread::sleep_for(std::chrono::milliseconds(100 * i));
            subject.publishMessage("–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ—Ç–æ–∫–∞ " + std::to_string(i));
        });
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for (auto& thread : threads) {
        thread.join();
    }
    
    std::cout << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: " << subject.getObserverCount() << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üëÅÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateClassicObserver();
    demonstrateModernObserver();
    demonstrateEventDrivenObserver();
    demonstrateRAIIObserver();
    demonstrateThreadSafeObserver();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Observer Pattern –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ Observer –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ª–∞–±—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏" << std::endl;
    std::cout << "‚Ä¢ std::function –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥" << std::endl;
    std::cout << "‚Ä¢ RAII –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ç–ø–∏—Å–∫—É" << std::endl;
    std::cout << "‚Ä¢ Thread-safe –≤–µ—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º –∫–æ–¥–µ" << std::endl;
    std::cout << "‚Ä¢ Event-driven –ø–æ–¥—Ö–æ–¥ —É–ø—Ä–æ—â–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Å–æ–±—ã—Ç–∏—è–º–∏" << std::endl;
    
    return 0;
}
