#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <stack>
#include <map>
#include <chrono>
#include <thread>

/**
 * @file undo_redo.cpp
 * @brief –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
 * —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–∞–º—è—Ç–∏.
 */

// ============================================================================
// –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –û–¢–ú–ï–ù–´
// ============================================================================

/**
 * @brief –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 */
class AdvancedCommand {
public:
    virtual ~AdvancedCommand() = default;
    virtual void execute() = 0;
    virtual void undo() = 0;
    virtual std::string getDescription() const = 0;
    virtual std::chrono::system_clock::time_point getTimestamp() const = 0;
    virtual bool canGroupWith(const AdvancedCommand& other) const = 0;
    virtual std::unique_ptr<AdvancedCommand> clone() const = 0;
};

/**
 * @brief –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π
 */
class AdvancedCommandManager {
private:
    struct CommandGroup {
        std::vector<std::unique_ptr<AdvancedCommand>> commands_;
        std::string groupName_;
        std::chrono::system_clock::time_point timestamp_;
        
        CommandGroup(const std::string& name) 
            : groupName_(name), timestamp_(std::chrono::system_clock::now()) {}
    };
    
    std::stack<std::unique_ptr<CommandGroup>> history_;
    std::stack<std::unique_ptr<CommandGroup>> redoStack_;
    std::unique_ptr<CommandGroup> currentGroup_;
    size_t maxHistorySize_;
    
public:
    explicit AdvancedCommandManager(size_t maxSize = 50) 
        : maxHistorySize_(maxSize) {}
    
    void startGroup(const std::string& groupName) {
        if (currentGroup_) {
            endGroup();
        }
        currentGroup_ = std::make_unique<CommandGroup>(groupName);
        std::cout << "üìÅ –ù–∞—á–∞—Ç–∞ –≥—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥: " << groupName << std::endl;
    }
    
    void endGroup() {
        if (currentGroup_ && !currentGroup_->commands_.empty()) {
            history_.push(std::move(currentGroup_));
            currentGroup_ = nullptr;
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
            while (!redoStack_.empty()) {
                redoStack_.pop();
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            while (history_.size() > maxHistorySize_) {
                history_.pop();
            }
        }
    }
    
    void executeCommand(std::unique_ptr<AdvancedCommand> command) {
        if (currentGroup_) {
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
            currentGroup_->commands_.push_back(std::move(command));
            currentGroup_->commands_.back()->execute();
        } else {
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            auto group = std::make_unique<CommandGroup>("–û–¥–∏–Ω–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
            group->commands_.push_back(std::move(command));
            group->commands_.back()->execute();
            history_.push(std::move(group));
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–æ–≤—Ç–æ—Ä–∞
            while (!redoStack_.empty()) {
                redoStack_.pop();
            }
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            while (history_.size() > maxHistorySize_) {
                history_.pop();
            }
        }
    }
    
    void undo() {
        if (!history_.empty()) {
            auto group = std::move(history_.top());
            history_.pop();
            
            std::cout << "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã: " << group->groupName_ 
                      << " (" << group->commands_.size() << " –∫–æ–º–∞–Ω–¥)" << std::endl;
            
            // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            for (auto it = group->commands_.rbegin(); it != group->commands_.rend(); ++it) {
                (*it)->undo();
            }
            
            redoStack_.push(std::move(group));
        } else {
            std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã" << std::endl;
        }
    }
    
    void redo() {
        if (!redoStack_.empty()) {
            auto group = std::move(redoStack_.top());
            redoStack_.pop();
            
            std::cout << "üîÑ –ü–æ–≤—Ç–æ—Ä –≥—Ä—É–ø–ø—ã: " << group->groupName_ 
                      << " (" << group->commands_.size() << " –∫–æ–º–∞–Ω–¥)" << std::endl;
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –ø—Ä—è–º–æ–º –ø–æ—Ä—è–¥–∫–µ
            for (auto& command : group->commands_) {
                command->execute();
            }
            
            history_.push(std::move(group));
        } else {
            std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞" << std::endl;
        }
    }
    
    void undoGroup(const std::string& groupName) {
        std::stack<std::unique_ptr<CommandGroup>> tempStack;
        
        // –ò—â–µ–º –≥—Ä—É–ø–ø—É —Å –Ω—É–∂–Ω—ã–º –∏–º–µ–Ω–µ–º
        while (!history_.empty()) {
            auto group = std::move(history_.top());
            history_.pop();
            
            if (group->groupName_ == groupName) {
                std::cout << "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã: " << groupName << std::endl;
                
                // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
                for (auto it = group->commands_.rbegin(); it != group->commands_.rend(); ++it) {
                    (*it)->undo();
                }
                
                redoStack_.push(std::move(group));
                break;
            } else {
                tempStack.push(std::move(group));
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–µ–∫
        while (!tempStack.empty()) {
            history_.push(std::move(tempStack.top()));
            tempStack.pop();
        }
    }
    
    void showHistory() const {
        std::cout << "\nüìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:" << std::endl;
        
        std::stack<std::unique_ptr<CommandGroup>> tempStack = history_;
        int index = 1;
        
        while (!tempStack.empty()) {
            const auto& group = tempStack.top();
            auto time_t = std::chrono::system_clock::to_time_t(group->timestamp_);
            
            std::cout << "  " << index << ". " << group->groupName_ 
                      << " (" << group->commands_.size() << " –∫–æ–º–∞–Ω–¥) - " 
                      << std::ctime(&time_t);
            
            tempStack.pop();
            ++index;
        }
        
        std::cout << "–í—Å–µ–≥–æ –≥—Ä—É–ø–ø: " << history_.size() << std::endl;
    }
    
    bool canUndo() const {
        return !history_.empty();
    }
    
    bool canRedo() const {
        return !redoStack_.empty();
    }
    
    size_t getHistorySize() const {
        return history_.size();
    }
    
    void clearHistory() {
        while (!history_.empty()) {
            history_.pop();
        }
        while (!redoStack_.empty()) {
            redoStack_.pop();
        }
        std::cout << "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞" << std::endl;
    }
};

// ============================================================================
// –ö–û–ù–ö–†–ï–¢–ù–´–ï –ö–û–ú–ê–ù–î–´
// ============================================================================

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
 */
class TextChangeCommand : public AdvancedCommand {
private:
    std::string* text_;
    std::string oldText_;
    std::string newText_;
    std::string description_;
    std::chrono::system_clock::time_point timestamp_;
    
public:
    TextChangeCommand(std::string* text, const std::string& newText, const std::string& description)
        : text_(text), newText_(newText), description_(description), 
          timestamp_(std::chrono::system_clock::now()) {
        oldText_ = *text_;
    }
    
    void execute() override {
        *text_ = newText_;
        std::cout << "üìù " << description_ << ": \"" << newText_ << "\"" << std::endl;
    }
    
    void undo() override {
        *text_ = oldText_;
        std::cout << "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞: \"" << oldText_ << "\"" << std::endl;
    }
    
    std::string getDescription() const override {
        return description_;
    }
    
    std::chrono::system_clock::time_point getTimestamp() const override {
        return timestamp_;
    }
    
    bool canGroupWith(const AdvancedCommand& other) const override {
        const auto* otherTextCmd = dynamic_cast<const TextChangeCommand*>(&other);
        return otherTextCmd && otherTextCmd->text_ == text_;
    }
    
    std::unique_ptr<AdvancedCommand> clone() const override {
        return std::make_unique<TextChangeCommand>(text_, newText_, description_);
    }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
 */
class NumberChangeCommand : public AdvancedCommand {
private:
    int* value_;
    int oldValue_;
    int newValue_;
    std::string description_;
    std::chrono::system_clock::time_point timestamp_;
    
public:
    NumberChangeCommand(int* value, int newValue, const std::string& description)
        : value_(value), newValue_(newValue), description_(description),
          timestamp_(std::chrono::system_clock::now()) {
        oldValue_ = *value_;
    }
    
    void execute() override {
        *value_ = newValue_;
        std::cout << "üî¢ " << description_ << ": " << newValue_ << std::endl;
    }
    
    void undo() override {
        *value_ = oldValue_;
        std::cout << "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞: " << oldValue_ << std::endl;
    }
    
    std::string getDescription() const override {
        return description_;
    }
    
    std::chrono::system_clock::time_point getTimestamp() const override {
        return timestamp_;
    }
    
    bool canGroupWith(const AdvancedCommand& other) const override {
        const auto* otherNumCmd = dynamic_cast<const NumberChangeCommand*>(&other);
        return otherNumCmd && otherNumCmd->value_ == value_;
    }
    
    std::unique_ptr<AdvancedCommand> clone() const override {
        return std::make_unique<NumberChangeCommand>(value_, newValue_, description_);
    }
};

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ò –ó–ê–ì–†–£–ó–ö–ò –°–û–°–¢–û–Ø–ù–ò–Ø
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
class Stateful {
public:
    virtual ~Stateful() = default;
    virtual std::string serialize() const = 0;
    virtual void deserialize(const std::string& data) = 0;
    virtual std::string getStateDescription() const = 0;
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
class SaveStateCommand : public AdvancedCommand {
private:
    Stateful* object_;
    std::string savedState_;
    std::string description_;
    std::chrono::system_clock::time_point timestamp_;
    
public:
    SaveStateCommand(Stateful* object, const std::string& description)
        : object_(object), description_(description),
          timestamp_(std::chrono::system_clock::now()) {
        savedState_ = object_->serialize();
    }
    
    void execute() override {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " << description_ << std::endl;
        std::cout << "   –°–æ—Å—Ç–æ—è–Ω–∏–µ: " << object_->getStateDescription() << std::endl;
    }
    
    void undo() override {
        object_->deserialize(savedState_);
        std::cout << "‚Ü©Ô∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: " << description_ << std::endl;
    }
    
    std::string getDescription() const override {
        return "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: " + description_;
    }
    
    std::chrono::system_clock::time_point getTimestamp() const override {
        return timestamp_;
    }
    
    bool canGroupWith(const AdvancedCommand& other) const override {
        return false; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ –≥—Ä—É–ø–ø–∏—Ä—É—é—Ç—Å—è
    }
    
    std::unique_ptr<AdvancedCommand> clone() const override {
        return std::make_unique<SaveStateCommand>(object_, description_);
    }
};

/**
 * @brief –ü—Ä–∏–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
 */
class Document : public Stateful {
private:
    std::string content_;
    int fontSize_;
    std::string fontFamily_;
    
public:
    Document() : fontSize_(12), fontFamily_("Arial") {}
    
    void setContent(const std::string& content) {
        content_ = content;
    }
    
    void setFontSize(int size) {
        fontSize_ = size;
    }
    
    void setFontFamily(const std::string& family) {
        fontFamily_ = family;
    }
    
    std::string serialize() const override {
        return content_ + "|" + std::to_string(fontSize_) + "|" + fontFamily_;
    }
    
    void deserialize(const std::string& data) override {
        size_t pos1 = data.find('|');
        size_t pos2 = data.find('|', pos1 + 1);
        
        if (pos1 != std::string::npos && pos2 != std::string::npos) {
            content_ = data.substr(0, pos1);
            fontSize_ = std::stoi(data.substr(pos1 + 1, pos2 - pos1 - 1));
            fontFamily_ = data.substr(pos2 + 1);
        }
    }
    
    std::string getStateDescription() const override {
        return "–î–æ–∫—É–º–µ–Ω—Ç: \"" + content_ + "\", —Ä–∞–∑–º–µ—Ä: " + std::to_string(fontSize_) + 
               ", —à—Ä–∏—Ñ—Ç: " + fontFamily_;
    }
    
    const std::string& getContent() const { return content_; }
    int getFontSize() const { return fontSize_; }
    const std::string& getFontFamily() const { return fontFamily_; }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥
 */
void demonstrateCommandGrouping() {
    std::cout << "\n=== –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ ===" << std::endl;
    
    AdvancedCommandManager manager;
    Document doc;
    
    // –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    manager.startGroup("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 16, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞"));
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.fontFamily_, "Times New Roman", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"));
    manager.endGroup();
    
    // –ì—Ä—É–ø–ø–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    manager.startGroup("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! –ö–∞–∫ –¥–µ–ª–∞?", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 18, "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞"));
    manager.endGroup();
    
    std::cout << "\n–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    manager.undo();
    std::cout << "\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã:" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º –µ—â–µ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É
    manager.undo();
    std::cout << "\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
void demonstrateStateSaving() {
    std::cout << "\n=== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ===" << std::endl;
    
    AdvancedCommandManager manager;
    Document doc;
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc.setContent("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç");
    doc.setFontSize(14);
    doc.setFontFamily("Calibri");
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    manager.executeCommand(std::make_unique<SaveStateCommand>(&doc, "–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"));
    
    // –í–Ω–æ—Å–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    manager.startGroup("–ò–∑–º–µ–Ω–µ–Ω–∏—è");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 20, "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞"));
    manager.endGroup();
    
    std::cout << "\n–ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π:" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    manager.undo();
    std::cout << "\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è):" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
 */
void demonstrateCommandHistory() {
    std::cout << "\n=== –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ ===" << std::endl;
    
    AdvancedCommandManager manager(5); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 5 –≥—Ä—É–ø–ø–∞–º–∏
    
    Document doc;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –∫–æ–º–∞–Ω–¥
    for (int i = 1; i <= 7; ++i) {
        manager.startGroup("–ì—Ä—É–ø–ø–∞ " + std::to_string(i));
        manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–¢–µ–∫—Å—Ç " + std::to_string(i), "–ò–∑–º–µ–Ω–µ–Ω–∏–µ " + std::to_string(i)));
        manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 10 + i, "–†–∞–∑–º–µ—Ä " + std::to_string(i)));
        manager.endGroup();
        
        std::this_thread::sleep_for(std::chrono::milliseconds(100)); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    manager.showHistory();
    
    // –û—Ç–º–µ–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
    std::cout << "\n--- –û—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ ---" << std::endl;
    manager.undo();
    manager.undo();
    manager.undo();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    manager.showHistory();
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    std::cout << "\n--- –ü–æ–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ ---" << std::endl;
    manager.redo();
    manager.redo();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    manager.showHistory();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
 */
void demonstrateSelectiveUndo() {
    std::cout << "\n=== –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –≥—Ä—É–ø–ø ===" << std::endl;
    
    AdvancedCommandManager manager;
    Document doc;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
    manager.startGroup("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–ó–∞–≥–æ–ª–æ–≤–æ–∫", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 24, "–†–∞–∑–º–µ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞"));
    manager.endGroup();
    
    manager.startGroup("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.content_, "–ó–∞–≥–æ–ª–æ–≤–æ–∫\n\n–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 14, "–†–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"));
    manager.endGroup();
    
    manager.startGroup("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ");
    manager.executeCommand(std::make_unique<TextChangeCommand>(&doc.fontFamily_, "Georgia", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞"));
    manager.executeCommand(std::make_unique<NumberChangeCommand>(&doc.fontSize_, 16, "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä"));
    manager.endGroup();
    
    std::cout << "\n–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—É "–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç"
    manager.undoGroup("–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç");
    
    std::cout << "\n–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã '–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç':" << std::endl;
    std::cout << doc.getStateDescription() << std::endl;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    manager.showHistory();
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üîÑ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–∞" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateCommandGrouping();
    demonstrateStateSaving();
    demonstrateCommandHistory();
    demonstrateSelectiveUndo();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–º–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" << std::endl;
    std::cout << "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é –æ—Ç–º–µ–Ω—É" << std::endl;
    std::cout << "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–º–æ–≥–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" << std::endl;
    std::cout << "‚Ä¢ –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –¥–∞–µ—Ç –≥–∏–±–∫–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏" << std::endl;
    std::cout << "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —É—Ç–µ—á–∫–∏" << std::endl;
    
    return 0;
}
