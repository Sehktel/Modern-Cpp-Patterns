#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <stack>
#include <queue>
#include <chrono>
#include <thread>

/**
 * @file command_pattern.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Command
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Command,
 * –æ—Ç –±–∞–∑–æ–≤—ã—Ö –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –æ—Ç–º–µ–Ω—ã –∏ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞–º–∏.
 */

// ============================================================================
// –ë–ê–ó–û–í–´–ô COMMAND PATTERN
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥—ã
 */
class Command {
public:
    virtual ~Command() = default;
    virtual void execute() = 0;
    virtual void undo() = 0;
    virtual std::string getDescription() const = 0;
};

/**
 * @brief –ü–æ–ª—É—á–∞—Ç–µ–ª—å - –°–≤–µ—Ç
 */
class Light {
private:
    bool isOn_;
    int brightness_;
    
public:
    Light() : isOn_(false), brightness_(0) {}
    
    void turnOn() {
        isOn_ = true;
        brightness_ = 100;
        std::cout << "üí° –°–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω (—è—Ä–∫–æ—Å—Ç—å: " << brightness_ << "%)" << std::endl;
    }
    
    void turnOff() {
        isOn_ = false;
        brightness_ = 0;
        std::cout << "üí° –°–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω" << std::endl;
    }
    
    void setBrightness(int brightness) {
        if (isOn_) {
            brightness_ = brightness;
            std::cout << "üí° –Ø—Ä–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " << brightness_ << "%" << std::endl;
        }
    }
    
    bool isOn() const { return isOn_; }
    int getBrightness() const { return brightness_; }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞
 */
class LightOnCommand : public Command {
private:
    Light* light_;
    
public:
    explicit LightOnCommand(Light* light) : light_(light) {}
    
    void execute() override {
        light_->turnOn();
    }
    
    void undo() override {
        light_->turnOff();
    }
    
    std::string getDescription() const override {
        return "–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç";
    }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞
 */
class LightOffCommand : public Command {
private:
    Light* light_;
    
public:
    explicit LightOffCommand(Light* light) : light_(light) {}
    
    void execute() override {
        light_->turnOff();
    }
    
    void undo() override {
        light_->turnOn();
    }
    
    std::string getDescription() const override {
        return "–í—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç";
    }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
 */
class BrightnessCommand : public Command {
private:
    Light* light_;
    int newBrightness_;
    int oldBrightness_;
    
public:
    BrightnessCommand(Light* light, int brightness) 
        : light_(light), newBrightness_(brightness), oldBrightness_(light->getBrightness()) {}
    
    void execute() override {
        light_->setBrightness(newBrightness_);
    }
    
    void undo() override {
        light_->setBrightness(oldBrightness_);
    }
    
    std::string getDescription() const override {
        return "–ò–∑–º–µ–Ω–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å –Ω–∞ " + std::to_string(newBrightness_) + "%";
    }
};

/**
 * @brief –í—ã–∑—ã–≤–∞—é—â–∏–π - –ü—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
class RemoteControl {
private:
    std::unique_ptr<Command> command_;
    std::string name_;
    
public:
    explicit RemoteControl(const std::string& name) : name_(name) {}
    
    void setCommand(std::unique_ptr<Command> command) {
        command_ = std::move(command);
    }
    
    void pressButton() {
        if (command_) {
            std::cout << "üéÆ " << name_ << " –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É: " << command_->getDescription() << std::endl;
            command_->execute();
        } else {
            std::cout << "üéÆ " << name_ << ": –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" << std::endl;
        }
    }
    
    void pressUndoButton() {
        if (command_) {
            std::cout << "‚Ü©Ô∏è " << name_ << " –æ—Ç–º–µ–Ω—è–µ—Ç: " << command_->getDescription() << std::endl;
            command_->undo();
        } else {
            std::cout << "‚Ü©Ô∏è " << name_ << ": –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!" << std::endl;
        }
    }
};

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –û–¢–ú–ï–ù–´ –° –ò–°–¢–û–†–ò–ï–ô
// ============================================================================

/**
 * @brief –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–∞–Ω–¥ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
 */
class CommandManager {
private:
    std::stack<std::unique_ptr<Command>> history_;
    std::stack<std::unique_ptr<Command>> redoStack_;
    
public:
    void executeCommand(std::unique_ptr<Command> command) {
        command->execute();
        history_.push(std::move(command));
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–æ–≤—Ç–æ—Ä–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        while (!redoStack_.empty()) {
            redoStack_.pop();
        }
    }
    
    void undo() {
        if (!history_.empty()) {
            auto command = std::move(history_.top());
            history_.pop();
            
            command->undo();
            redoStack_.push(std::move(command));
        } else {
            std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã" << std::endl;
        }
    }
    
    void redo() {
        if (!redoStack_.empty()) {
            auto command = std::move(redoStack_.top());
            redoStack_.pop();
            
            command->execute();
            history_.push(std::move(command));
        } else {
            std::cout << "‚ùå –ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞" << std::endl;
        }
    }
    
    bool canUndo() const {
        return !history_.empty();
    }
    
    bool canRedo() const {
        return !redoStack_.empty();
    }
    
    size_t getHistorySize() const {
        return history_.size();
    }
    
    size_t getRedoStackSize() const {
        return redoStack_.size();
    }
};

// ============================================================================
// –ú–ê–ö–†–û–ö–û–ú–ê–ù–î–´
// ============================================================================

/**
 * @brief –ú–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞ - —Å–æ—Å—Ç–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
 */
class MacroCommand : public Command {
private:
    std::vector<std::unique_ptr<Command>> commands_;
    std::string macroName_;
    
public:
    explicit MacroCommand(const std::string& name) : macroName_(name) {}
    
    void addCommand(std::unique_ptr<Command> command) {
        commands_.push_back(std::move(command));
    }
    
    void execute() override {
        std::cout << "üé¨ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: " << macroName_ << std::endl;
        for (auto& command : commands_) {
            command->execute();
        }
    }
    
    void undo() override {
        std::cout << "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—ã: " << macroName_ << std::endl;
        // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for (auto it = commands_.rbegin(); it != commands_.rend(); ++it) {
            (*it)->undo();
        }
    }
    
    std::string getDescription() const override {
        return "–ú–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: " + macroName_ + " (" + std::to_string(commands_.size()) + " –∫–æ–º–∞–Ω–¥)";
    }
    
    size_t getCommandCount() const {
        return commands_.size();
    }
};

// ============================================================================
// –û–ß–ï–†–ï–î–¨ –ö–û–ú–ê–ù–î
// ============================================================================

/**
 * @brief –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
class CommandQueue {
private:
    std::queue<std::unique_ptr<Command>> commandQueue_;
    std::string queueName_;
    
public:
    explicit CommandQueue(const std::string& name) : queueName_(name) {}
    
    void addCommand(std::unique_ptr<Command> command) {
        commandQueue_.push(std::move(command));
        std::cout << "üìã –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å '" << queueName_ << "'" << std::endl;
    }
    
    void processNext() {
        if (!commandQueue_.empty()) {
            auto command = std::move(commandQueue_.front());
            commandQueue_.pop();
            
            std::cout << "‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '" << queueName_ << "': " 
                      << command->getDescription() << std::endl;
            command->execute();
        } else {
            std::cout << "üìã –û—á–µ—Ä–µ–¥—å '" << queueName_ << "' –ø—É—Å—Ç–∞" << std::endl;
        }
    }
    
    void processAll() {
        std::cout << "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –≤ –æ—á–µ—Ä–µ–¥–∏ '" << queueName_ << "'" << std::endl;
        while (!commandQueue_.empty()) {
            processNext();
        }
    }
    
    size_t getQueueSize() const {
        return commandQueue_.size();
    }
    
    bool isEmpty() const {
        return commandQueue_.empty();
    }
};

// ============================================================================
// –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´
// ============================================================================

/**
 * @brief –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º std::function
 */
class FunctionalCommand : public Command {
private:
    std::function<void()> executeFunc_;
    std::function<void()> undoFunc_;
    std::string description_;
    
public:
    FunctionalCommand(std::function<void()> execute, 
                     std::function<void()> undo, 
                     const std::string& description)
        : executeFunc_(execute), undoFunc_(undo), description_(description) {}
    
    void execute() override {
        if (executeFunc_) {
            executeFunc_();
        }
    }
    
    void undo() override {
        if (undoFunc_) {
            undoFunc_();
        }
    }
    
    std::string getDescription() const override {
        return description_;
    }
};

// ============================================================================
// –ò–ì–†–û–í–´–ï –ö–û–ú–ê–ù–î–´
// ============================================================================

/**
 * @brief –ò–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç
 */
class GameObject {
private:
    std::string name_;
    int x_, y_;
    
public:
    GameObject(const std::string& name, int x = 0, int y = 0) 
        : name_(name), x_(x), y_(y) {}
    
    void move(int deltaX, int deltaY) {
        x_ += deltaX;
        y_ += deltaY;
        std::cout << "üéÆ " << name_ << " –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ (" << x_ << "," << y_ << ")" << std::endl;
    }
    
    void moveTo(int newX, int newY) {
        x_ = newX;
        y_ = newY;
        std::cout << "üéÆ " << name_ << " –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ (" << x_ << "," << y_ << ")" << std::endl;
    }
    
    void attack() {
        std::cout << "‚öîÔ∏è " << name_ << " –∞—Ç–∞–∫—É–µ—Ç!" << std::endl;
    }
    
    void defend() {
        std::cout << "üõ°Ô∏è " << name_ << " –∑–∞—â–∏—â–∞–µ—Ç—Å—è!" << std::endl;
    }
    
    int getX() const { return x_; }
    int getY() const { return y_; }
    const std::string& getName() const { return name_; }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è
 */
class MoveCommand : public Command {
private:
    GameObject* object_;
    int deltaX_, deltaY_;
    int oldX_, oldY_;
    
public:
    MoveCommand(GameObject* object, int deltaX, int deltaY)
        : object_(object), deltaX_(deltaX), deltaY_(deltaY) {
        oldX_ = object->getX();
        oldY_ = object->getY();
    }
    
    void execute() override {
        object_->move(deltaX_, deltaY_);
    }
    
    void undo() override {
        object_->moveTo(oldX_, oldY_);
    }
    
    std::string getDescription() const override {
        return "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å " + object_->getName() + " –Ω–∞ (" + 
               std::to_string(deltaX_) + "," + std::to_string(deltaY_) + ")";
    }
};

/**
 * @brief –ö–æ–º–∞–Ω–¥–∞ –∞—Ç–∞–∫–∏
 */
class AttackCommand : public Command {
private:
    GameObject* object_;
    
public:
    explicit AttackCommand(GameObject* object) : object_(object) {}
    
    void execute() override {
        object_->attack();
    }
    
    void undo() override {
        // –û—Ç–º–µ–Ω–∞ –∞—Ç–∞–∫–∏ - –∑–∞—â–∏—Ç–∞
        object_->defend();
    }
    
    std::string getDescription() const override {
        return "–ê—Ç–∞–∫–∞ " + object_->getName();
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ Command
 */
void demonstrateBasicCommand() {
    std::cout << "\n=== –ë–∞–∑–æ–≤—ã–π Command Pattern ===" << std::endl;
    
    Light light;
    RemoteControl remote("–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—É–ª—å—Ç");
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤–∫–ª—é—á–µ–Ω–∏—è —Å–≤–µ—Ç–∞
    remote.setCommand(std::make_unique<LightOnCommand>(&light));
    remote.pressButton();
    
    // –ú–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
    remote.setCommand(std::make_unique<BrightnessCommand>(&light, 50));
    remote.pressButton();
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
    remote.pressUndoButton();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã–∫–ª—é—á–µ–Ω–∏—è
    remote.setCommand(std::make_unique<LightOffCommand>(&light));
    remote.pressButton();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç–º–µ–Ω—ã
 */
void demonstrateUndoRedo() {
    std::cout << "\n=== –°–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã –∏ –ø–æ–≤—Ç–æ—Ä–∞ ===" << std::endl;
    
    Light light;
    CommandManager manager;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥
    manager.executeCommand(std::make_unique<LightOnCommand>(&light));
    manager.executeCommand(std::make_unique<BrightnessCommand>(&light, 75));
    manager.executeCommand(std::make_unique<BrightnessCommand>(&light, 25));
    
    std::cout << "\n–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥: " << manager.getHistorySize() << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    std::cout << "\n--- –û—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ ---" << std::endl;
    manager.undo();
    manager.undo();
    
    std::cout << "–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å: " << (manager.canUndo() ? "–î–∞" : "–ù–µ—Ç") << std::endl;
    std::cout << "–ú–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å: " << (manager.canRedo() ? "–î–∞" : "–ù–µ—Ç") << std::endl;
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    std::cout << "\n--- –ü–æ–≤—Ç–æ—Ä –∫–æ–º–∞–Ω–¥ ---" << std::endl;
    manager.redo();
    manager.redo();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥
 */
void demonstrateMacroCommands() {
    std::cout << "\n=== –ú–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—ã ===" << std::endl;
    
    Light light1, light2;
    
    // –°–æ–∑–¥–∞–µ–º –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—É "–í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º"
    auto eveningMode = std::make_unique<MacroCommand>("–í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–∂–∏–º");
    eveningMode->addCommand(std::make_unique<LightOnCommand>(&light1));
    eveningMode->addCommand(std::make_unique<BrightnessCommand>(&light1, 30));
    eveningMode->addCommand(std::make_unique<LightOnCommand>(&light2));
    eveningMode->addCommand(std::make_unique<BrightnessCommand>(&light2, 20));
    
    std::cout << "–°–æ–∑–¥–∞–Ω–∞ –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥–∞: " << eveningMode->getDescription() << std::endl;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—É
    eveningMode->execute();
    
    // –û—Ç–º–µ–Ω—è–µ–º –º–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—É
    eveningMode->undo();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥
 */
void demonstrateCommandQueue() {
    std::cout << "\n=== –û—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥ ===" << std::endl;
    
    Light light;
    CommandQueue queue("–û—á–µ—Ä–µ–¥—å –æ—Å–≤–µ—â–µ–Ω–∏—è");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –æ—á–µ—Ä–µ–¥—å
    queue.addCommand(std::make_unique<LightOnCommand>(&light));
    queue.addCommand(std::make_unique<BrightnessCommand>(&light, 60));
    queue.addCommand(std::make_unique<BrightnessCommand>(&light, 80));
    queue.addCommand(std::make_unique<BrightnessCommand>(&light, 100));
    
    std::cout << "–†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: " << queue.getQueueSize() << std::endl;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    std::cout << "\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ ---" << std::endl;
    queue.processNext();
    queue.processNext();
    
    std::cout << "–û—Å—Ç–∞–ª–æ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏: " << queue.getQueueSize() << std::endl;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–º–∞–Ω–¥—ã
    std::cout << "\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–æ–º–∞–Ω–¥ ---" << std::endl;
    queue.processAll();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 */
void demonstrateFunctionalCommands() {
    std::cout << "\n=== –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===" << std::endl;
    
    int counter = 0;
    
    // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
    auto incrementCommand = std::make_unique<FunctionalCommand>(
        [&counter]() {
            ++counter;
            std::cout << "–°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ: " << counter << std::endl;
        },
        [&counter]() {
            --counter;
            std::cout << "–°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω –¥–æ: " << counter << std::endl;
        },
        "–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫"
    );
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    incrementCommand->execute();
    incrementCommand->execute();
    
    // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    incrementCommand->undo();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
 */
void demonstrateGameCommands() {
    std::cout << "\n=== –ò–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã ===" << std::endl;
    
    GameObject player("–ò–≥—Ä–æ–∫", 0, 0);
    GameObject enemy("–í—Ä–∞–≥", 5, 5);
    
    CommandManager gameManager;
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    gameManager.executeCommand(std::make_unique<MoveCommand>(&player, 2, 3));
    gameManager.executeCommand(std::make_unique<AttackCommand>(&player));
    gameManager.executeCommand(std::make_unique<MoveCommand>(&player, 1, 1));
    
    std::cout << "\n–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: (" << player.getX() << "," << player.getY() << ")" << std::endl;
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    std::cout << "\n--- –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π ---" << std::endl;
    gameManager.undo();
    gameManager.undo();
    
    std::cout << "–ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã: (" << player.getX() << "," << player.getY() << ")" << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Command" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateBasicCommand();
    demonstrateUndoRedo();
    demonstrateMacroCommands();
    demonstrateCommandQueue();
    demonstrateFunctionalCommands();
    demonstrateGameCommands();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Command Pattern –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ Command –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–∞–∫ –æ–±—ä–µ–∫—Ç—ã" << std::endl;
    std::cout << "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–º–µ–Ω—ã –ª–µ–≥–∫–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ undo –æ–ø–µ—Ä–∞—Ü–∏–∏" << std::endl;
    std::cout << "‚Ä¢ –ú–∞–∫—Ä–æ–∫–æ–º–∞–Ω–¥—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" << std::endl;
    std::cout << "‚Ä¢ –û—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ" << std::endl;
    std::cout << "‚Ä¢ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–æ—â–∞—é—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π" << std::endl;
    
    return 0;
}
