#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <chrono>
#include <thread>
#include <cstdio>
#include <stdexcept>

/**
 * @file smart_pointers.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π C++11/14/17
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π
 * –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º C++.
 */

// ============================================================================
// –ë–ê–ó–û–í–´–ï –ü–†–ò–ú–ï–†–´ SMART POINTERS
// ============================================================================

/**
 * @brief –ü—Ä–∏–º–µ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
class MyClass {
private:
    std::string name_;
    int value_;
    
public:
    explicit MyClass(const std::string& name, int value = 0) 
        : name_(name), value_(value) {
        std::cout << "üèóÔ∏è –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç: " << name_ << " (–∑–Ω–∞—á–µ–Ω–∏–µ: " << value_ << ")" << std::endl;
    }
    
    ~MyClass() {
        std::cout << "üóëÔ∏è –£–Ω–∏—á—Ç–æ–∂–µ–Ω –æ–±—ä–µ–∫—Ç: " << name_ << std::endl;
    }
    
    void setValue(int value) {
        value_ = value;
        std::cout << "üìù " << name_ << ": –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ " << value_ << std::endl;
    }
    
    int getValue() const {
        return value_;
    }
    
    const std::string& getName() const {
        return name_;
    }
    
    void doSomething() {
        std::cout << "‚ö° " << name_ << " –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ" << std::endl;
    }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è std::unique_ptr
 */
void demonstrateUniquePtr() {
    std::cout << "\n=== std::unique_ptr ===" << std::endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ unique_ptr
    std::unique_ptr<MyClass> ptr1 = std::make_unique<MyClass>("–û–±—ä–µ–∫—Ç 1", 42);
    std::cout << "–°–æ–∑–¥–∞–Ω unique_ptr –¥–ª—è: " << ptr1->getName() << std::endl;
    
    // –ü–µ—Ä–µ–¥–∞—á–∞ –≤–ª–∞–¥–µ–Ω–∏—è
    std::cout << "\n–ü–µ—Ä–µ–¥–∞—á–∞ –≤–ª–∞–¥–µ–Ω–∏—è..." << std::endl;
    std::unique_ptr<MyClass> ptr2 = std::move(ptr1);
    
    std::cout << "ptr1 –ø–æ—Å–ª–µ move: " << (ptr1 ? "–Ω–µ null" : "null") << std::endl;
    std::cout << "ptr2 –≤–ª–∞–¥–µ–µ—Ç: " << (ptr2 ? ptr2->getName() : "–Ω–∏—á–µ–º") << std::endl;
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    if (ptr2) {
        ptr2->doSomething();
        ptr2->setValue(100);
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
    std::cout << "\n–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏..." << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è std::shared_ptr
 */
void demonstrateSharedPtr() {
    std::cout << "\n=== std::shared_ptr ===" << std::endl;
    
    // –°–æ–∑–¥–∞–Ω–∏–µ shared_ptr
    std::shared_ptr<MyClass> ptr1 = std::make_shared<MyClass>("–†–∞–∑–¥–µ–ª—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç", 200);
    std::cout << "–°–æ–∑–¥–∞–Ω shared_ptr. –°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫: " << ptr1.use_count() << std::endl;
    
    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è
    std::cout << "\n–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–Ω–∏—è..." << std::endl;
    std::shared_ptr<MyClass> ptr2 = ptr1;
    std::shared_ptr<MyClass> ptr3 = ptr1;
    
    std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è ptr2 –∏ ptr3: " << ptr1.use_count() << std::endl;
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏
    ptr1->doSomething();
    ptr2->setValue(300);
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ptr3: " << ptr3->getValue() << std::endl;
    
    // –°–±—Ä–æ—Å –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏
    std::cout << "\n–°–±—Ä–æ—Å ptr2..." << std::endl;
    ptr2.reset();
    std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ ptr2: " << ptr1.use_count() << std::endl;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Å—ã–ª–∫–∏
    std::cout << "\n–í—ã—Ö–æ–¥ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏..." << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è std::weak_ptr
 */
void demonstrateWeakPtr() {
    std::cout << "\n=== std::weak_ptr ===" << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º shared_ptr
    std::shared_ptr<MyClass> shared = std::make_shared<MyClass>("–°–ª–∞–±–∞—è —Å—Å—ã–ª–∫–∞ –æ–±—ä–µ–∫—Ç", 500);
    std::cout << "–°–æ–∑–¥–∞–Ω shared_ptr. –°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫: " << shared.use_count() << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º weak_ptr
    std::weak_ptr<MyClass> weak = shared;
    std::cout << "–°–æ–∑–¥–∞–Ω weak_ptr. –°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ shared_ptr: " << shared.use_count() << std::endl;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–∏–≤ –ª–∏ –æ–±—ä–µ–∫—Ç
    if (auto locked = weak.lock()) {
        std::cout << "–û–±—ä–µ–∫—Ç –∂–∏–≤! –ò–º—è: " << locked->getName() << std::endl;
        locked->doSomething();
    } else {
        std::cout << "–û–±—ä–µ–∫—Ç —É–∂–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω" << std::endl;
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º shared_ptr
    std::cout << "\n–°–±—Ä–æ—Å shared_ptr..." << std::endl;
    shared.reset();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º weak_ptr –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
    if (auto locked = weak.lock()) {
        std::cout << "–û–±—ä–µ–∫—Ç –≤—Å–µ –µ—â–µ –∂–∏–≤: " << locked->getName() << std::endl;
    } else {
        std::cout << "–û–±—ä–µ–∫—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω, weak_ptr –Ω–µ –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" << std::endl;
    }
    
    std::cout << "weak_ptr –∏—Å—Ç–µ–∫: " << (weak.expired() ? "–î–∞" : "–ù–µ—Ç") << std::endl;
}

// ============================================================================
// –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –£–î–ê–õ–ò–¢–ï–õ–ò
// ============================================================================

/**
 * @brief –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–¥–∞–ª–∏—Ç–µ–ª—å –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */
class FileDeleter {
private:
    std::string filename_;
    
public:
    explicit FileDeleter(const std::string& filename) : filename_(filename) {}
    
    void operator()(FILE* file) {
        if (file) {
            fclose(file);
            std::cout << "üìÅ –§–∞–π–ª '" << filename_ << "' –∑–∞–∫—Ä—ã—Ç" << std::endl;
        }
    }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É–¥–∞–ª–∏—Ç–µ–ª–µ–π
 */
void demonstrateCustomDeleters() {
    std::cout << "\n=== –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–¥–∞–ª–∏—Ç–µ–ª–∏ ===" << std::endl;
    
    // –£–¥–∞–ª–∏—Ç–µ–ª—å –¥–ª—è —Ñ–∞–π–ª–∞
    {
        std::unique_ptr<FILE, FileDeleter> file(
            fopen("test.txt", "w"), 
            FileDeleter("test.txt")
        );
        
        if (file) {
            fprintf(file.get(), "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ\n");
            std::cout << "üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª" << std::endl;
        }
        // –§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∑–¥–µ—Å—å
    }
    
    // –õ—è–º–±–¥–∞-—É–¥–∞–ª–∏—Ç–µ–ª—å
    {
        auto lambdaDeleter = [](MyClass* obj) {
            std::cout << "üóëÔ∏è –õ—è–º–±–¥–∞ —É–¥–∞–ª—è–µ—Ç: " << obj->getName() << std::endl;
            delete obj;
        };
        
        std::unique_ptr<MyClass, decltype(lambdaDeleter)> ptr(
            new MyClass("–õ—è–º–±–¥–∞ –æ–±—ä–µ–∫—Ç", 999),
            lambdaDeleter
        );
        
        ptr->doSomething();
        // –û–±—ä–µ–∫—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–µ–π
    }
}

// ============================================================================
// –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–°–°–ò–í–ê–ú–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
 */
void demonstrateArrayPointers() {
    std::cout << "\n=== –£–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ ===" << std::endl;
    
    // unique_ptr –¥–ª—è –º–∞—Å—Å–∏–≤–∞
    std::unique_ptr<int[]> array = std::make_unique<int[]>(5);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤
    for (int i = 0; i < 5; ++i) {
        array[i] = i * i;
    }
    
    std::cout << "–ú–∞—Å—Å–∏–≤: ";
    for (int i = 0; i < 5; ++i) {
        std::cout << array[i] << " ";
    }
    std::cout << std::endl;
    
    // shared_ptr –¥–ª—è –º–∞—Å—Å–∏–≤–∞ (–º–µ–Ω–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–æ)
    std::shared_ptr<int[]> sharedArray(new int[3]{1, 4, 9}, std::default_delete<int[]>());
    
    std::cout << "Shared –º–∞—Å—Å–∏–≤: ";
    for (int i = 0; i < 3; ++i) {
        std::cout << sharedArray[i] << " ";
    }
    std::cout << std::endl;
}

// ============================================================================
// enable_shared_from_this
// ============================================================================

/**
 * @brief –ö–ª–∞—Å—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π shared_from_this
 */
class SharedObject : public std::enable_shared_from_this<SharedObject> {
private:
    std::string name_;
    int value_;
    
public:
    explicit SharedObject(const std::string& name, int value = 0) 
        : name_(name), value_(value) {
        std::cout << "üèóÔ∏è SharedObject —Å–æ–∑–¥–∞–Ω: " << name_ << std::endl;
    }
    
    ~SharedObject() {
        std::cout << "üóëÔ∏è SharedObject —É–Ω–∏—á—Ç–æ–∂–µ–Ω: " << name_ << std::endl;
    }
    
    std::shared_ptr<SharedObject> getSharedPtr() {
        return shared_from_this();
    }
    
    void simulateAsyncOperation() {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        auto self = shared_from_this();
        std::cout << "üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è " << name_ << std::endl;
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã std::async –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        
        std::cout << "‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è " << name_ << std::endl;
    }
    
    const std::string& getName() const { return name_; }
    int getValue() const { return value_; }
    void setValue(int value) { value_ = value; }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è enable_shared_from_this
 */
void demonstrateSharedFromThis() {
    std::cout << "\n=== enable_shared_from_this ===" << std::endl;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ make_shared (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)
    auto obj = std::make_shared<SharedObject>("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç", 777);
    
    std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫: " << obj.use_count() << std::endl;
    
    // –ü–æ–ª—É—á–∞–µ–º shared_ptr –∏–∑ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    auto selfPtr = obj->getSharedPtr();
    std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ –ø–æ—Å–ª–µ getSharedPtr: " << obj.use_count() << std::endl;
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    obj->simulateAsyncOperation();
    
    std::cout << "–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: " << obj->getValue() << std::endl;
}

// ============================================================================
// –ê–õ–ò–ê–°–ò–ù–ì –ö–û–ù–°–¢–†–£–ö–¢–û–†–´
// ============================================================================

/**
 * @brief –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∞–ª–∏–∞—Å–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞–º–∏
 */
class Container {
private:
    std::shared_ptr<int[]> data_;
    size_t size_;
    
public:
    explicit Container(size_t size) : size_(size) {
        data_ = std::shared_ptr<int[]>(new int[size], std::default_delete<int[]>());
        std::cout << "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω —Å " << size << " —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏" << std::endl;
    }
    
    // –ê–ª–∏–∞—Å–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç shared_ptr –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
    std::shared_ptr<int> getElement(size_t index) {
        if (index < size_) {
            // –°–æ–∑–¥–∞–µ–º shared_ptr, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑–¥–µ–ª—è–µ—Ç –≤–ª–∞–¥–µ–Ω–∏–µ —Å data_
            return std::shared_ptr<int>(data_, &data_[index]);
        }
        return nullptr;
    }
    
    void setElement(size_t index, int value) {
        if (index < size_) {
            data_[index] = value;
        }
    }
    
    size_t getSize() const { return size_; }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–ª–∏–∞—Å–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–≤
 */
void demonstrateAliasingConstructors() {
    std::cout << "\n=== –ê–ª–∏–∞—Å–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã ===" << std::endl;
    
    Container container(5);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    for (size_t i = 0; i < container.getSize(); ++i) {
        container.setElement(i, static_cast<int>(i * 10));
    }
    
    // –ü–æ–ª—É—á–∞–µ–º shared_ptr –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    std::vector<std::shared_ptr<int>> elementPtrs;
    for (size_t i = 0; i < container.getSize(); ++i) {
        elementPtrs.push_back(container.getElement(i));
    }
    
    std::cout << "–≠–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ shared_ptr: ";
    for (const auto& ptr : elementPtrs) {
        if (ptr) {
            std::cout << *ptr << " ";
        }
    }
    std::cout << std::endl;
    
    // –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∏–∑ shared_ptr
    if (!elementPtrs.empty()) {
        *elementPtrs[2] = 999;
        std::cout << "–ò–∑–º–µ–Ω–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º 2" << std::endl;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç—Ä–∞–∑–∏–ª–æ—Å—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    std::cout << "–≠–ª–µ–º–µ–Ω—Ç 2 –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ: " << *container.getElement(2) << std::endl;
}

// ============================================================================
// –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ò –°–†–ê–í–ù–ï–ù–ò–ï
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
void demonstratePerformance() {
    std::cout << "\n=== –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ===" << std::endl;
    
    const size_t iterations = 100000;
    
    // –¢–µ—Å—Ç unique_ptr
    auto start = std::chrono::high_resolution_clock::now();
    for (size_t i = 0; i < iterations; ++i) {
        auto ptr = std::make_unique<MyClass>("Perf test " + std::to_string(i));
        ptr->setValue(static_cast<int>(i));
    }
    auto end = std::chrono::high_resolution_clock::now();
    auto uniquePtrTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    
    // –¢–µ—Å—Ç shared_ptr
    start = std::chrono::high_resolution_clock::now();
    for (size_t i = 0; i < iterations; ++i) {
        auto ptr = std::make_shared<MyClass>("Perf test " + std::to_string(i));
        ptr->setValue(static_cast<int>(i));
    }
    end = std::chrono::high_resolution_clock::now();
    auto sharedPtrTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
    
    std::cout << "unique_ptr –≤—Ä–µ–º—è: " << uniquePtrTime.count() << " –º–∫—Å" << std::endl;
    std::cout << "shared_ptr –≤—Ä–µ–º—è: " << sharedPtrTime.count() << " –º–∫—Å" << std::endl;
    std::cout << "shared_ptr –º–µ–¥–ª–µ–Ω–Ω–µ–µ –≤ " 
              << (double)sharedPtrTime.count() / uniquePtrTime.count() << " —Ä–∞–∑" << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π C++" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateUniquePtr();
    demonstrateSharedPtr();
    demonstrateWeakPtr();
    demonstrateCustomDeleters();
    demonstrateArrayPointers();
    demonstrateSharedFromThis();
    demonstrateAliasingConstructors();
    demonstratePerformance();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ unique_ptr –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–ª–∏—á–Ω–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" << std::endl;
    std::cout << "‚Ä¢ shared_ptr –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª—è—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ, –Ω–æ –∏–º–µ–µ—Ç –Ω–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã" << std::endl;
    std::cout << "‚Ä¢ weak_ptr —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å—Å—ã–ª–∫–∏" << std::endl;
    std::cout << "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —É–¥–∞–ª–∏—Ç–µ–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–±—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏" << std::endl;
    std::cout << "‚Ä¢ enable_shared_from_this –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è shared_ptr –∏–∑ this" << std::endl;
    std::cout << "‚Ä¢ –ê–ª–∏–∞—Å–∏–Ω–≥ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–∞–∑–¥–µ–ª—è—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
    
    return 0;
}
