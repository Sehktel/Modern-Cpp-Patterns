#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <map>
#include <unordered_map>
#include <chrono>
#include <thread>
#include <mutex>
#include <cassert>

/**
 * @file memory_management.cpp
 * @brief –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é —Å —É–º–Ω—ã–º–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 * —É–º–Ω—ã—Ö —É–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.
 */

// ============================================================================
// –ú–ï–ù–ï–î–ñ–ï–† –†–ï–°–£–†–°–û–í
// ============================================================================

/**
 * @brief –ë–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
 */
class Resource {
public:
    virtual ~Resource() = default;
    virtual std::string getName() const = 0;
    virtual bool isAvailable() const = 0;
    virtual void cleanup() = 0;
};

/**
 * @brief –†–µ—Å—É—Ä—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseResource : public Resource {
private:
    std::string connectionString_;
    bool connected_;
    
public:
    explicit DatabaseResource(const std::string& connectionString) 
        : connectionString_(connectionString), connected_(true) {
        std::cout << "üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: " << connectionString_ << std::endl;
    }
    
    ~DatabaseResource() override {
        if (connected_) {
            cleanup();
        }
    }
    
    std::string getName() const override {
        return "Database: " + connectionString_;
    }
    
    bool isAvailable() const override {
        return connected_;
    }
    
    void cleanup() override {
        if (connected_) {
            std::cout << "üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î: " << connectionString_ << std::endl;
            connected_ = false;
        }
    }
    
    void executeQuery(const std::string& query) {
        if (connected_) {
            std::cout << "üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: " << query << std::endl;
        } else {
            throw std::runtime_error("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞");
        }
    }
};

/**
 * @brief –†–µ—Å—É—Ä—Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 */
class FileSystemResource : public Resource {
private:
    std::string path_;
    bool mounted_;
    
public:
    explicit FileSystemResource(const std::string& path) 
        : path_(path), mounted_(true) {
        std::cout << "üìÅ –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: " << path_ << std::endl;
    }
    
    ~FileSystemResource() override {
        if (mounted_) {
            cleanup();
        }
    }
    
    std::string getName() const override {
        return "FileSystem: " + path_;
    }
    
    bool isAvailable() const override {
        return mounted_;
    }
    
    void cleanup() override {
        if (mounted_) {
            std::cout << "üì§ –†–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: " << path_ << std::endl;
            mounted_ = false;
        }
    }
    
    void writeFile(const std::string& filename, const std::string& content) {
        if (mounted_) {
            std::cout << "üìù –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ " << filename << " –≤ " << path_ << std::endl;
        } else {
            throw std::runtime_error("–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞");
        }
    }
};

/**
 * @brief –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ —Å —É–º–Ω—ã–º–∏ —É–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
 */
class ResourceManager {
private:
    std::map<std::string, std::unique_ptr<Resource>> resources_;
    mutable std::mutex mutex_;
    
public:
    template<typename ResourceType, typename... Args>
    void addResource(const std::string& name, Args&&... args) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto resource = std::make_unique<ResourceType>(std::forward<Args>(args)...);
        resources_[name] = std::move(resource);
        
        std::cout << "‚úÖ –†–µ—Å—É—Ä—Å '" << name << "' –¥–æ–±–∞–≤–ª–µ–Ω" << std::endl;
    }
    
    std::unique_ptr<Resource> borrowResource(const std::string& name) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto it = resources_.find(name);
        if (it != resources_.end() && it->second->isAvailable()) {
            std::cout << "üîó –†–µ—Å—É—Ä—Å '" << name << "' –≤—ã–¥–∞–Ω –≤ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ" << std::endl;
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            return nullptr; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        }
        
        return nullptr;
    }
    
    void removeResource(const std::string& name) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto it = resources_.find(name);
        if (it != resources_.end()) {
            std::cout << "üóëÔ∏è –†–µ—Å—É—Ä—Å '" << name << "' —É–¥–∞–ª–µ–Ω" << std::endl;
            resources_.erase(it);
        }
    }
    
    void listResources() const {
        std::lock_guard<std::mutex> lock(mutex_);
        
        std::cout << "\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:" << std::endl;
        for (const auto& [name, resource] : resources_) {
            std::cout << "  - " << name << ": " << resource->getName() 
                      << " (–¥–æ—Å—Ç—É–ø–µ–Ω: " << (resource->isAvailable() ? "–î–∞" : "–ù–µ—Ç") << ")" << std::endl;
        }
    }
    
    size_t getResourceCount() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return resources_.size();
    }
    
    ~ResourceManager() {
        std::cout << "üèÅ ResourceManager —É–Ω–∏—á—Ç–æ–∂–∞–µ—Ç—Å—è, –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..." << std::endl;
        // –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç—è—Ç—Å—è —á–µ—Ä–µ–∑ unique_ptr
    }
};

// ============================================================================
// –ö–≠–® –° WEAK_PTR
// ============================================================================

/**
 * @brief –ö—ç—à —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
template<typename Key, typename Value>
class WeakPtrCache {
private:
    std::unordered_map<Key, std::weak_ptr<Value>> cache_;
    mutable std::mutex mutex_;
    
public:
    std::shared_ptr<Value> get(const Key& key) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto it = cache_.find(key);
        if (it != cache_.end()) {
            if (auto locked = it->second.lock()) {
                std::cout << "üéØ –ö—ç—à: –Ω–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª—é—á–∞ '" << key << "'" << std::endl;
                return locked;
            } else {
                // –û–±—ä–µ–∫—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω, –æ—á–∏—â–∞–µ–º weak_ptr
                cache_.erase(it);
                std::cout << "üßπ –ö—ç—à: –æ—á–∏—â–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π weak_ptr –¥–ª—è –∫–ª—é—á–∞ '" << key << "'" << std::endl;
            }
        }
        
        return nullptr;
    }
    
    void put(const Key& key, std::shared_ptr<Value> value) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        cache_[key] = value;
        std::cout << "üíæ –ö—ç—à: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–ª—é—á–∞ '" << key << "'" << std::endl;
    }
    
    void cleanup() {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto it = cache_.begin();
        while (it != cache_.end()) {
            if (it->second.expired()) {
                std::cout << "üßπ –ö—ç—à: –æ—á–∏—â–µ–Ω –∏—Å—Ç–µ–∫—à–∏–π weak_ptr –¥–ª—è –∫–ª—é—á–∞ '" << it->first << "'" << std::endl;
                it = cache_.erase(it);
            } else {
                ++it;
            }
        }
    }
    
    size_t size() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return cache_.size();
    }
    
    void printStats() const {
        std::lock_guard<std::mutex> lock(mutex_);
        
        size_t alive = 0, expired = 0;
        for (const auto& [key, weak] : cache_) {
            if (weak.expired()) {
                ++expired;
            } else {
                ++alive;
            }
        }
        
        std::cout << "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: –≤—Å–µ–≥–æ " << cache_.size() 
                  << ", –∂–∏–≤—ã—Ö " << alive << ", –∏—Å—Ç–µ–∫—à–∏—Ö " << expired << std::endl;
    }
};

/**
 * @brief –û–±—ä–µ–∫—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class CacheableObject {
private:
    std::string data_;
    int id_;
    
public:
    CacheableObject(int id, const std::string& data) : data_(data), id_(id) {
        std::cout << "üèóÔ∏è CacheableObject —Å–æ–∑–¥–∞–Ω: ID=" << id_ << ", –¥–∞–Ω–Ω—ã–µ='" << data_ << "'" << std::endl;
    }
    
    ~CacheableObject() {
        std::cout << "üóëÔ∏è CacheableObject —É–Ω–∏—á—Ç–æ–∂–µ–Ω: ID=" << id_ << std::endl;
    }
    
    const std::string& getData() const { return data_; }
    int getId() const { return id_; }
    
    void process() {
        std::cout << "‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–∫—Ç–∞ ID=" << id_ << ": " << data_ << std::endl;
    }
};

// ============================================================================
// –ü–£–õ –û–ë–™–ï–ö–¢–û–í
// ============================================================================

/**
 * @brief –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º shared_ptr
 */
template<typename ObjectType>
class ObjectPool {
private:
    std::vector<std::shared_ptr<ObjectType>> available_;
    std::vector<std::shared_ptr<ObjectType>> inUse_;
    mutable std::mutex mutex_;
    size_t maxSize_;
    
public:
    explicit ObjectPool(size_t maxSize = 10) : maxSize_(maxSize) {}
    
    template<typename... Args>
    std::shared_ptr<ObjectType> acquire(Args&&... args) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        if (!available_.empty()) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
            auto obj = available_.back();
            available_.pop_back();
            inUse_.push_back(obj);
            
            std::cout << "üîÑ –ü—É–ª: –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç" << std::endl;
            return obj;
        } else if (available_.size() + inUse_.size() < maxSize_) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
            auto obj = std::make_shared<ObjectType>(std::forward<Args>(args)...);
            inUse_.push_back(obj);
            
            std::cout << "üÜï –ü—É–ª: —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç" << std::endl;
            return obj;
        } else {
            // –ü—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω
            std::cout << "‚ùå –ü—É–ª: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
            return nullptr;
        }
    }
    
    void release(std::shared_ptr<ObjectType> obj) {
        std::lock_guard<std::mutex> lock(mutex_);
        
        auto it = std::find(inUse_.begin(), inUse_.end(), obj);
        if (it != inUse_.end()) {
            inUse_.erase(it);
            available_.push_back(obj);
            
            std::cout << "‚Ü©Ô∏è –ü—É–ª: –æ–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω" << std::endl;
        }
    }
    
    void printStats() const {
        std::lock_guard<std::mutex> lock(mutex_);
        
        std::cout << "üìä –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤: –¥–æ—Å—Ç—É–ø–Ω–æ " << available_.size() 
                  << ", –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è " << inUse_.size() 
                  << ", –º–∞–∫—Å–∏–º—É–º " << maxSize_ << std::endl;
    }
    
    size_t getAvailableCount() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return available_.size();
    }
    
    size_t getInUseCount() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return inUse_.size();
    }
};

/**
 * @brief –û–±—ä–µ–∫—Ç –¥–ª—è –ø—É–ª–∞
 */
class PoolObject {
private:
    int id_;
    std::string state_;
    
public:
    explicit PoolObject(int id) : id_(id), state_("—Å–æ–∑–¥–∞–Ω") {
        std::cout << "üèóÔ∏è PoolObject —Å–æ–∑–¥–∞–Ω: ID=" << id_ << std::endl;
    }
    
    ~PoolObject() {
        std::cout << "üóëÔ∏è PoolObject —É–Ω–∏—á—Ç–æ–∂–µ–Ω: ID=" << id_ << std::endl;
    }
    
    void reset() {
        state_ = "—Å–±—Ä–æ—à–µ–Ω";
        std::cout << "üîÑ PoolObject ID=" << id_ << " —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" << std::endl;
    }
    
    void use() {
        state_ = "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è";
        std::cout << "‚ö° PoolObject ID=" << id_ << " –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" << std::endl;
    }
    
    int getId() const { return id_; }
    const std::string& getState() const { return state_; }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
 */
void demonstrateResourceManager() {
    std::cout << "\n=== –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ ===" << std::endl;
    
    ResourceManager manager;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    manager.addResource<DatabaseResource>("main_db", "postgresql://localhost/mydb");
    manager.addResource<DatabaseResource>("backup_db", "postgresql://backup/mydb");
    manager.addResource<FileSystemResource>("data_fs", "/data");
    manager.addResource<FileSystemResource>("cache_fs", "/cache");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
    manager.listResources();
    std::cout << "–í—Å–µ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤: " << manager.getResourceCount() << std::endl;
    
    // –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω —Ä–µ—Å—É—Ä—Å
    manager.removeResource("backup_db");
    manager.listResources();
    
    // –ü—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—Å—Ç—è—Ç—Å—è
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∞ —Å weak_ptr
 */
void demonstrateWeakPtrCache() {
    std::cout << "\n=== –ö—ç—à —Å weak_ptr ===" << std::endl;
    
    WeakPtrCache<std::string, CacheableObject> cache;
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã
    {
        auto obj1 = std::make_shared<CacheableObject>(1, "–î–∞–Ω–Ω—ã–µ 1");
        auto obj2 = std::make_shared<CacheableObject>(2, "–î–∞–Ω–Ω—ã–µ 2");
        auto obj3 = std::make_shared<CacheableObject>(3, "–î–∞–Ω–Ω—ã–µ 3");
        
        cache.put("key1", obj1);
        cache.put("key2", obj2);
        cache.put("key3", obj3);
        
        cache.printStats();
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫—ç—à–∞
        auto retrieved1 = cache.get("key1");
        auto retrieved2 = cache.get("key2");
        
        if (retrieved1) {
            retrieved1->process();
        }
        if (retrieved2) {
            retrieved2->process();
        }
        
        cache.printStats();
    }
    
    // obj1, obj2, obj3 —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã, –Ω–æ weak_ptr –æ—Å—Ç–∞–ª–∏—Å—å
    cache.printStats();
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ –∫—ç—à–∞
    auto retrieved1 = cache.get("key1");
    if (!retrieved1) {
        std::cout << "‚ùå –û–±—ä–µ–∫—Ç –¥–ª—è key1 –Ω–µ –Ω–∞–π–¥–µ–Ω (—É–Ω–∏—á—Ç–æ–∂–µ–Ω)" << std::endl;
    }
    
    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ weak_ptr
    cache.cleanup();
    cache.printStats();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—É–ª–∞ –æ–±—ä–µ–∫—Ç–æ–≤
 */
void demonstrateObjectPool() {
    std::cout << "\n=== –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ ===" << std::endl;
    
    ObjectPool<PoolObject> pool(3);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ø—É–ª–∞
    std::vector<std::shared_ptr<PoolObject>> objects;
    
    for (int i = 0; i < 5; ++i) {
        auto obj = pool.acquire(i + 1);
        if (obj) {
            obj->use();
            objects.push_back(obj);
        }
        pool.printStats();
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã
    if (!objects.empty()) {
        pool.release(objects[0]);
        pool.release(objects[1]);
        objects.erase(objects.begin(), objects.begin() + 2);
    }
    
    pool.printStats();
    
    // –ü–æ–ª—É—á–∞–µ–º –µ—â–µ –æ–±—ä–µ–∫—Ç—ã
    for (int i = 0; i < 3; ++i) {
        auto obj = pool.acquire(i + 10);
        if (obj) {
            obj->use();
            objects.push_back(obj);
        }
        pool.printStats();
    }
    
    // –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –ø—É–ª –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ shared_ptr
    std::cout << "–í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –ø—É–ª –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏..." << std::endl;
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è
 */
void demonstrateCircularReferences() {
    std::cout << "\n=== –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ ===" << std::endl;
    
    struct Node {
        std::string name_;
        std::shared_ptr<Node> parent_;
        std::vector<std::shared_ptr<Node>> children_;
        
        explicit Node(const std::string& name) : name_(name) {
            std::cout << "üèóÔ∏è –£–∑–µ–ª —Å–æ–∑–¥–∞–Ω: " << name_ << std::endl;
        }
        
        ~Node() {
            std::cout << "üóëÔ∏è –£–∑–µ–ª —É–Ω–∏—á—Ç–æ–∂–µ–Ω: " << name_ << std::endl;
        }
        
        void addChild(std::shared_ptr<Node> child) {
            child->parent_ = shared_from_this();
            children_.push_back(child);
        }
        
        std::shared_ptr<Node> getSharedPtr() {
            return std::static_pointer_cast<Node>(shared_from_this());
        }
    };
    
    // –ü—Ä–æ–±–ª–µ–º–∞: —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ shared_ptr
    std::cout << "\n--- –ü—Ä–æ–±–ª–µ–º–∞ —Å shared_ptr ---" << std::endl;
    {
        auto parent = std::make_shared<Node>("–†–æ–¥–∏—Ç–µ–ª—å");
        auto child = std::make_shared<Node>("–†–µ–±–µ–Ω–æ–∫");
        
        parent->children_.push_back(child);
        child->parent_ = parent;
        
        std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ parent: " << parent.use_count() << std::endl;
        std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ child: " << child.use_count() << std::endl;
    }
    std::cout << "‚ùå –û–±—ä–µ–∫—Ç—ã –Ω–µ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã –∏–∑-–∑–∞ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫!" << std::endl;
    
    // –†–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ weak_ptr
    std::cout << "\n--- –†–µ—à–µ–Ω–∏–µ —Å weak_ptr ---" << std::endl;
    {
        struct SafeNode {
            std::string name_;
            std::weak_ptr<SafeNode> parent_;
            std::vector<std::shared_ptr<SafeNode>> children_;
            
            explicit SafeNode(const std::string& name) : name_(name) {
                std::cout << "üèóÔ∏è SafeNode —Å–æ–∑–¥–∞–Ω: " << name_ << std::endl;
            }
            
            ~SafeNode() {
                std::cout << "üóëÔ∏è SafeNode —É–Ω–∏—á—Ç–æ–∂–µ–Ω: " << name_ << std::endl;
            }
            
            void addChild(std::shared_ptr<SafeNode> child) {
                child->parent_ = std::static_pointer_cast<SafeNode>(shared_from_this());
                children_.push_back(child);
            }
            
            std::shared_ptr<SafeNode> getParent() {
                return parent_.lock();
            }
        };
        
        auto parent = std::make_shared<SafeNode>("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å");
        auto child = std::make_shared<SafeNode>("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–±–µ–Ω–æ–∫");
        
        parent->children_.push_back(child);
        child->parent_ = parent;
        
        std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ parent: " << parent.use_count() << std::endl;
        std::cout << "–°—á–µ—Ç—á–∏–∫ —Å—Å—ã–ª–æ–∫ child: " << child.use_count() << std::endl;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ weak_ptr
        if (auto parentPtr = child->getParent()) {
            std::cout << "‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–æ–¥–∏—Ç–µ–ª—é —á–µ—Ä–µ–∑ weak_ptr: " << parentPtr->name_ << std::endl;
        }
    }
    std::cout << "‚úÖ –û–±—ä–µ–∫—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!" << std::endl;
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é" << std::endl;
    std::cout << std::string(50, '=') << std::endl;
    
    demonstrateResourceManager();
    demonstrateWeakPtrCache();
    demonstrateObjectPool();
    demonstrateCircularReferences();
    
    std::cout << "\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" << std::endl;
    std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:" << std::endl;
    std::cout << "‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º" << std::endl;
    std::cout << "‚Ä¢ –ö—ç—à–∏ —Å weak_ptr –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏" << std::endl;
    std::cout << "‚Ä¢ –ü—É–ª –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–≤—ã—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è" << std::endl;
    std::cout << "‚Ä¢ weak_ptr —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫" << std::endl;
    std::cout << "‚Ä¢ –£–º–Ω—ã–µ —É–∫–∞–∑–∞—Ç–µ–ª–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç exception safety" << std::endl;
    
    return 0;
}
