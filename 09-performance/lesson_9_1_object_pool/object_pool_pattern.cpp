#include <iostream>
#include <queue>
#include <mutex>
#include <memory>
#include <functional>
#include <atomic>
#include <thread>
#include <vector>
#include <chrono>
#include <random>
#include <unordered_set>

/**
 * @file object_pool_pattern.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Object Pool Pattern
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Object Pool —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
 * –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
 */

// ============================================================================
// –ë–ê–ó–û–í–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø OBJECT POOL
// ============================================================================

/**
 * @brief –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Object Pool
 */
template<typename T>
class ObjectPool {
private:
    std::queue<std::unique_ptr<T>> pool_;
    std::mutex mutex_;
    std::function<std::unique_ptr<T>()> factory_;
    std::atomic<size_t> maxSize_;
    std::atomic<size_t> currentSize_{0};
    std::atomic<size_t> createdCount_{0};
    std::atomic<size_t> borrowedCount_{0};
    std::atomic<size_t> returnedCount_{0};
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–¥–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    std::unordered_set<T*> borrowedObjects_;
    std::mutex borrowedMutex_;
    
public:
    explicit ObjectPool(size_t maxSize = 100, 
                       std::function<std::unique_ptr<T>()> factory = []() { 
                           return std::make_unique<T>(); 
                       })
        : maxSize_(maxSize), factory_(factory) {
        
        std::cout << "üèä ObjectPool —Å–æ–∑–¥–∞–Ω: maxSize=" << maxSize_ << std::endl;
        
        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –æ–±—ä–µ–∫—Ç–æ–≤
        size_t initialSize = maxSize_ / 2;
        for (size_t i = 0; i < initialSize; ++i) {
            pool_.push(factory_());
            currentSize_.fetch_add(1);
            createdCount_.fetch_add(1);
        }
        
        std::cout << "üèä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–æ " << initialSize << " –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –ø—É–ª–∞
    std::unique_ptr<T> acquire() {
        std::unique_lock<std::mutex> lock(mutex_);
        
        if (!pool_.empty()) {
            auto obj = std::move(pool_.front());
            pool_.pop();
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            {
                std::lock_guard<std::mutex> borrowedLock(borrowedMutex_);
                borrowedObjects_.insert(obj.get());
            }
            
            borrowedCount_.fetch_add(1);
            
            std::cout << "üèä –í—ã–¥–∞–Ω –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞ (–¥–æ—Å—Ç—É–ø–Ω–æ: " << pool_.size() 
                      << ", –≤—Å–µ–≥–æ: " << currentSize_.load() << ")" << std::endl;
            
            return obj;
        }
        
        // –ï—Å–ª–∏ –ø—É–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç)
        if (currentSize_.load() < maxSize_.load()) {
            currentSize_.fetch_add(1);
            createdCount_.fetch_add(1);
            
            auto obj = factory_();
            
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            {
                std::lock_guard<std::mutex> borrowedLock(borrowedMutex_);
                borrowedObjects_.insert(obj.get());
            }
            
            borrowedCount_.fetch_add(1);
            
            std::cout << "üèä –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ: " << pool_.size() 
                      << ", –≤—Å–µ–≥–æ: " << currentSize_.load() << ")" << std::endl;
            
            return obj;
        }
        
        std::cout << "üèä –ü—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –æ–±—ä–µ–∫—Ç –Ω–µ –≤—ã–¥–∞–Ω" << std::endl;
        return nullptr;
    }
    
    // –í–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞ –≤ –ø—É–ª
    void release(std::unique_ptr<T> obj) {
        if (!obj) return;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        if constexpr (std::is_base_of_v<Resettable, T>) {
            obj->reset();
        }
        
        std::lock_guard<std::mutex> lock(mutex_);
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        {
            std::lock_guard<std::mutex> borrowedLock(borrowedMutex_);
            borrowedObjects_.erase(obj.get());
        }
        
        pool_.push(std::move(obj));
        returnedCount_.fetch_add(1);
        
        std::cout << "üèä –û–±—ä–µ–∫—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –ø—É–ª (–¥–æ—Å—Ç—É–ø–Ω–æ: " << pool_.size() 
                  << ", –≤—Å–µ–≥–æ: " << currentSize_.load() << ")" << std::endl;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    struct Statistics {
        size_t maxSize;
        size_t currentSize;
        size_t available;
        size_t borrowed;
        size_t createdCount;
        size_t borrowedCount;
        size_t returnedCount;
        double utilizationRate;
    };
    
    Statistics getStatistics() const {
        Statistics stats;
        stats.maxSize = maxSize_.load();
        stats.currentSize = currentSize_.load();
        
        {
            std::lock_guard<std::mutex> lock(mutex_);
            stats.available = pool_.size();
        }
        
        {
            std::lock_guard<std::mutex> lock(borrowedMutex_);
            stats.borrowed = borrowedObjects_.size();
        }
        
        stats.createdCount = createdCount_.load();
        stats.borrowedCount = borrowedCount_.load();
        stats.returnedCount = returnedCount_.load();
        
        if (stats.createdCount > 0) {
            stats.utilizationRate = static_cast<double>(stats.borrowedCount) / stats.createdCount;
        } else {
            stats.utilizationRate = 0.0;
        }
        
        return stats;
    }
    
    void printStatistics() const {
        auto stats = getStatistics();
        std::cout << "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê OBJECT POOL ===" << std::endl;
        std::cout << "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: " << stats.maxSize << std::endl;
        std::cout << "–¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: " << stats.currentSize << std::endl;
        std::cout << "–î–æ—Å—Ç—É–ø–Ω–æ: " << stats.available << std::endl;
        std::cout << "–í—ã–¥–∞–Ω–æ: " << stats.borrowed << std::endl;
        std::cout << "–°–æ–∑–¥–∞–Ω–æ –≤—Å–µ–≥–æ: " << stats.createdCount << std::endl;
        std::cout << "–í—ã–¥–∞–Ω–æ –≤—Å–µ–≥–æ: " << stats.borrowedCount << std::endl;
        std::cout << "–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤—Å–µ–≥–æ: " << stats.returnedCount << std::endl;
        std::cout << "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: " << (stats.utilizationRate * 100) << "%" << std::endl;
        std::cout << "===============================" << std::endl;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–ª–∞
    size_t available() const {
        std::lock_guard<std::mutex> lock(mutex_);
        return pool_.size();
    }
    
    size_t total() const {
        return currentSize_.load();
    }
    
    size_t borrowed() const {
        std::lock_guard<std::mutex> lock(borrowedMutex_);
        return borrowedObjects_.size();
    }
    
    bool isEmpty() const {
        return available() == 0;
    }
    
    bool isFull() const {
        return currentSize_.load() >= maxSize_.load();
    }
};

// ============================================================================
// RAII –û–ë–ï–†–¢–ö–ê –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–û–ó–í–†–ê–¢–ê
// ============================================================================

/**
 * @brief RAII –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –ø—É–ª
 */
template<typename T>
class PooledObject {
private:
    ObjectPool<T>& pool_;
    std::unique_ptr<T> object_;
    
public:
    explicit PooledObject(ObjectPool<T>& pool) : pool_(pool), object_(pool.acquire()) {
        if (!object_) {
            throw std::runtime_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –ø—É–ª–∞");
        }
    }
    
    ~PooledObject() {
        if (object_) {
            pool_.release(std::move(object_));
        }
    }
    
    // –ó–∞–ø—Ä–µ—â–∞–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    PooledObject(const PooledObject&) = delete;
    PooledObject& operator=(const PooledObject&) = delete;
    
    // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
    PooledObject(PooledObject&& other) noexcept 
        : pool_(other.pool_), object_(std::move(other.object_)) {}
    
    PooledObject& operator=(PooledObject&& other) noexcept {
        if (this != &other) {
            if (object_) {
                pool_.release(std::move(object_));
            }
            object_ = std::move(other.object_);
        }
        return *this;
    }
    
    T* get() const { return object_.get(); }
    T* operator->() const { return object_.get(); }
    T& operator*() const { return *object_; }
    
    explicit operator bool() const { return object_ != nullptr; }
};

// ============================================================================
// –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –°–ë–†–û–°–ê –°–û–°–¢–û–Ø–ù–ò–Ø
// ============================================================================

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 */
class Resettable {
public:
    virtual ~Resettable() = default;
    virtual void reset() = 0;
};

// ============================================================================
// –ü–†–ò–ú–ï–†–´ –û–ë–™–ï–ö–¢–û–í –î–õ–Ø –ü–£–õ–ê
// ============================================================================

/**
 * @brief –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseConnection : public Resettable {
private:
    std::string connectionString_;
    bool isConnected_;
    std::chrono::system_clock::time_point createdAt_;
    
public:
    explicit DatabaseConnection(const std::string& connStr = "localhost:5432") 
        : connectionString_(connStr), isConnected_(false),
          createdAt_(std::chrono::system_clock::now()) {
        connect();
    }
    
    ~DatabaseConnection() {
        disconnect();
    }
    
    void reset() override {
        if (isConnected_) {
            disconnect();
        }
        isConnected_ = false;
        std::cout << "üîÑ DatabaseConnection —Å–±—Ä–æ—à–µ–Ω" << std::endl;
    }
    
    bool executeQuery(const std::string& query) {
        if (!isConnected_) {
            connect();
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        std::this_thread::sleep_for(std::chrono::milliseconds(10 + (rand() % 50)));
        
        std::cout << "üóÑÔ∏è –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: " << query << std::endl;
        return true;
    }
    
    std::string getConnectionInfo() const {
        return "DB: " + connectionString_ + " (—Å–æ–∑–¥–∞–Ω–æ: " + 
               std::to_string(std::chrono::duration_cast<std::chrono::seconds>(
                   std::chrono::system_clock::now() - createdAt_).count()) + "s –Ω–∞–∑–∞–¥)";
    }
    
private:
    void connect() {
        std::cout << "üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: " << connectionString_ << std::endl;
        isConnected_ = true;
    }
    
    void disconnect() {
        if (isConnected_) {
            std::cout << "üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î: " << connectionString_ << std::endl;
            isConnected_ = false;
        }
    }
};

/**
 * @brief –ò–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç
 */
class GameObject : public Resettable {
private:
    int id_;
    float x_, y_, z_;
    bool active_;
    std::chrono::system_clock::time_point createdAt_;
    
public:
    GameObject() : id_(-1), x_(0), y_(0), z_(0), active_(false),
                   createdAt_(std::chrono::system_clock::now()) {}
    
    void reset() override {
        id_ = -1;
        x_ = y_ = z_ = 0.0f;
        active_ = false;
        std::cout << "üîÑ GameObject —Å–±—Ä–æ—à–µ–Ω" << std::endl;
    }
    
    void initialize(int id, float x, float y, float z) {
        id_ = id;
        x_ = x;
        y_ = y;
        z_ = z;
        active_ = true;
        
        std::cout << "üéÆ GameObject " << id_ << " –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–∑–∏—Ü–∏–∏ (" 
                  << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;
    }
    
    void update(float deltaTime) {
        if (!active_) return;
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
        x_ += deltaTime * 10.0f;
        y_ += deltaTime * 5.0f;
        
        std::cout << "üéÆ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ GameObject " << id_ << " -> (" 
                  << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;
    }
    
    void render() {
        if (!active_) return;
        
        std::cout << "üé® –û—Ç—Ä–∏—Å–æ–≤–∫–∞ GameObject " << id_ << " –≤ –ø–æ–∑–∏—Ü–∏–∏ (" 
                  << x_ << ", " << y_ << ", " << z_ << ")" << std::endl;
    }
    
    bool isActive() const { return active_; }
    int getId() const { return id_; }
    
    std::string getInfo() const {
        return "GameObject{id=" + std::to_string(id_) + 
               ", pos=(" + std::to_string(x_) + "," + std::to_string(y_) + "," + std::to_string(z_) + 
               "), active=" + (active_ ? "true" : "false") + "}";
    }
};

/**
 * @brief –°–µ—Ç–µ–≤–æ–π —Å–æ–∫–µ—Ç
 */
class NetworkSocket : public Resettable {
private:
    std::string address_;
    int port_;
    bool isConnected_;
    std::chrono::system_clock::time_point createdAt_;
    
public:
    NetworkSocket(const std::string& addr = "127.0.0.1", int p = 8080)
        : address_(addr), port_(p), isConnected_(false),
          createdAt_(std::chrono::system_clock::now()) {}
    
    void reset() override {
        if (isConnected_) {
            disconnect();
        }
        isConnected_ = false;
        std::cout << "üîÑ NetworkSocket —Å–±—Ä–æ—à–µ–Ω" << std::endl;
    }
    
    bool connect() {
        if (!isConnected_) {
            std::cout << "üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " << address_ << ":" << port_ << std::endl;
            isConnected_ = true;
        }
        return isConnected_;
    }
    
    bool sendData(const std::string& data) {
        if (!isConnected_) {
            return false;
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        std::this_thread::sleep_for(std::chrono::milliseconds(5));
        std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö: " << data << " -> " << address_ << ":" << port_ << std::endl;
        return true;
    }
    
    std::string receiveData() {
        if (!isConnected_) {
            return "";
        }
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        std::this_thread::sleep_for(std::chrono::milliseconds(3));
        return "–û—Ç–≤–µ—Ç –æ—Ç " + address_ + ":" + std::to_string(port_);
    }
    
    void disconnect() {
        if (isConnected_) {
            std::cout << "üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç " << address_ << ":" << port_ << std::endl;
            isConnected_ = false;
        }
    }
    
    std::string getConnectionInfo() const {
        return "Socket: " + address_ + ":" + std::to_string(port_) + 
               " (—Å–æ–∑–¥–∞–Ω: " + std::to_string(std::chrono::duration_cast<std::chrono::seconds>(
                   std::chrono::system_clock::now() - createdAt_).count()) + "s –Ω–∞–∑–∞–¥)";
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ Object Pool
 */
void demonstrateBasicObjectPool() {
    std::cout << "\n=== –ë–ê–ó–û–í–´–ô OBJECT POOL ===" << std::endl;
    
    ObjectPool<DatabaseConnection> dbPool(5, []() {
        return std::make_unique<DatabaseConnection>("pool_db:5432");
    });
    
    std::cout << "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞:" << std::endl;
    dbPool.printStatistics();
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ø—É–ª–∞
    std::vector<std::unique_ptr<DatabaseConnection>> connections;
    
    for (int i = 0; i < 7; ++i) {
        auto conn = dbPool.acquire();
        if (conn) {
            conn->executeQuery("SELECT * FROM users WHERE id = " + std::to_string(i));
            connections.push_back(std::move(conn));
        } else {
            std::cout << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ " << i << std::endl;
        }
    }
    
    std::cout << "\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:" << std::endl;
    dbPool.printStatistics();
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –ø—É–ª
    for (auto& conn : connections) {
        dbPool.release(std::move(conn));
    }
    connections.clear();
    
    std::cout << "\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤:" << std::endl;
    dbPool.printStatistics();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAII –æ–±–µ—Ä—Ç–∫–∏
 */
void demonstrateRAIIWrapper() {
    std::cout << "\n=== RAII –û–ë–ï–†–¢–ö–ê ===" << std::endl;
    
    ObjectPool<GameObject> gameObjectPool(10);
    
    std::cout << "–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞:" << std::endl;
    gameObjectPool.printStatistics();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º RAII –æ–±–µ—Ä—Ç–∫—É
    {
        std::cout << "\n--- –ë–ª–æ–∫ 1 ---" << std::endl;
        PooledObject<GameObject> obj1(gameObjectPool);
        PooledObject<GameObject> obj2(gameObjectPool);
        PooledObject<GameObject> obj3(gameObjectPool);
        
        obj1->initialize(1, 10.0f, 20.0f, 30.0f);
        obj2->initialize(2, 40.0f, 50.0f, 60.0f);
        obj3->initialize(3, 70.0f, 80.0f, 90.0f);
        
        obj1->update(1.0f);
        obj2->render();
        obj3->update(0.5f);
        
        std::cout << "–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –≤ –±–ª–æ–∫–µ:" << std::endl;
        gameObjectPool.printStatistics();
        
        std::cout << "–û–±—ä–µ–∫—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –≤ –ø—É–ª –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–ª–æ–∫–∞" << std::endl;
    }
    
    std::cout << "\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞:" << std::endl;
    gameObjectPool.printStatistics();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
void demonstratePerformance() {
    std::cout << "\n=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===" << std::endl;
    
    const int NUM_OPERATIONS = 10000;
    
    // –¢–µ—Å—Ç —Å Object Pool
    {
        std::cout << "–¢–µ—Å—Ç–∏—Ä—É—é Object Pool..." << std::endl;
        
        ObjectPool<NetworkSocket> socketPool(100);
        
        auto start = std::chrono::high_resolution_clock::now();
        
        for (int i = 0; i < NUM_OPERATIONS; ++i) {
            PooledObject<NetworkSocket> socket(socketPool);
            socket->connect();
            socket->sendData("Test data " + std::to_string(i));
            socket->receiveData();
        }
        
        auto end = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        
        std::cout << "Object Pool: " << NUM_OPERATIONS << " –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ " 
                  << duration.count() << " –º—Å" << std::endl;
        std::cout << "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " 
                  << (NUM_OPERATIONS * 1000.0 / duration.count()) << " –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫" << std::endl;
        
        socketPool.printStatistics();
    }
    
    // –¢–µ—Å—Ç –±–µ–∑ Object Pool (—Å–æ–∑–¥–∞–Ω–∏–µ/—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
    {
        std::cout << "\n–¢–µ—Å—Ç–∏—Ä—É—é –±–µ–∑ Object Pool..." << std::endl;
        
        auto start = std::chrono::high_resolution_clock::now();
        
        for (int i = 0; i < NUM_OPERATIONS; ++i) {
            auto socket = std::make_unique<NetworkSocket>();
            socket->connect();
            socket->sendData("Test data " + std::to_string(i));
            socket->receiveData();
            socket->disconnect();
        }
        
        auto end = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        
        std::cout << "–ë–µ–∑ Object Pool: " << NUM_OPERATIONS << " –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ " 
                  << duration.count() << " –º—Å" << std::endl;
        std::cout << "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " 
                  << (NUM_OPERATIONS * 1000.0 / duration.count()) << " –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫" << std::endl;
    }
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏
 */
void demonstrateMultithreading() {
    std::cout << "\n=== –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–°–¢–¨ ===" << std::endl;
    
    ObjectPool<DatabaseConnection> dbPool(20);
    
    const int NUM_THREADS = 5;
    const int OPERATIONS_PER_THREAD = 100;
    
    std::vector<std::thread> threads;
    
    auto start = std::chrono::high_resolution_clock::now();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
    for (int t = 0; t < NUM_THREADS; ++t) {
        threads.emplace_back([&dbPool, t, OPERATIONS_PER_THREAD]() {
            for (int i = 0; i < OPERATIONS_PER_THREAD; ++i) {
                PooledObject<DatabaseConnection> conn(dbPool);
                conn->executeQuery("Thread " + std::to_string(t) + 
                                 " Operation " + std::to_string(i));
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
                std::this_thread::sleep_for(std::chrono::milliseconds(1));
            }
            
            std::cout << "–ü–æ—Ç–æ–∫ " << t << " –∑–∞–≤–µ—Ä—à–µ–Ω" << std::endl;
        });
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for (auto& thread : threads) {
        thread.join();
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    
    std::cout << "–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ " << duration.count() << " –º—Å" << std::endl;
    
    dbPool.printStatistics();
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üèä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Object Pool Pattern" << std::endl;
    std::cout << std::string(60, '=') << std::endl;
    
    try {
        demonstrateBasicObjectPool();
        demonstrateRAIIWrapper();
        demonstratePerformance();
        demonstrateMultithreading();
        
        std::cout << "\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    std::cout << "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" << std::endl;
    std::cout << "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Object Pool –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤" << std::endl;
    std::cout << "2. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å reset() –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è" << std::endl;
    std::cout << "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ RAII –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞" << std::endl;
    std::cout << "4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—É–ª–∞" << std::endl;
    std::cout << "5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏" << std::endl;
    
    return 0;
}
