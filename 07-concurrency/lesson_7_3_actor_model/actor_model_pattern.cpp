#include <iostream>
#include <memory>
#include <queue>
#include <mutex>
#include <condition_variable>
#include <thread>
#include <functional>
#include <string>
#include <any>
#include <unordered_map>
#include <vector>
#include <chrono>
#include <atomic>
#include <random>

/**
 * @file actor_model_pattern.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Actor Model Pattern
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Actor Model —Å —Å–∏—Å—Ç–µ–º–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞–º–∏,
 * –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–∫—Ç–µ—Ä–æ–≤ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –Ω–∏–º–∏.
 */

// ============================================================================
// –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ –î–ê–ù–ù–´–•
// ============================================================================

/**
 * @brief –ë–∞–∑–æ–≤—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Actor Model
 */
struct Message {
    std::string type;
    std::any data;
    std::string sender;
    std::chrono::system_clock::time_point timestamp;
    
    Message(const std::string& msgType, const std::any& msgData, const std::string& msgSender = "")
        : type(msgType), data(msgData), sender(msgSender), 
          timestamp(std::chrono::system_clock::now()) {}
    
    std::string toString() const {
        auto time_t = std::chrono::system_clock::to_time_t(timestamp);
        std::string timeStr = std::ctime(&time_t);
        timeStr.pop_back(); // –£–±–∏—Ä–∞–µ–º \n
        
        return "Message{type='" + type + "', sender='" + sender + "', time=" + timeStr + "}";
    }
};

/**
 * @brief –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–∫—Ç–µ—Ä–∞
 */
class Actor {
public:
    virtual ~Actor() = default;
    virtual void receive(const Message& message) = 0;
    virtual std::string getName() const = 0;
    virtual void start() {}
    virtual void stop() {}
};

/**
 * @brief –ë–∞–∑–æ–≤—ã–π –∞–∫—Ç–µ—Ä —Å mailbox –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
 */
class BaseActor : public Actor {
private:
    std::string name_;
    std::queue<Message> mailbox_;
    std::mutex mailboxMutex_;
    std::condition_variable condition_;
    std::thread workerThread_;
    std::atomic<bool> running_{false};
    std::atomic<bool> shouldStop_{false};
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    std::atomic<size_t> messagesProcessed_{0};
    std::atomic<size_t> messagesReceived_{0};
    
protected:
    std::unordered_map<std::string, std::function<void(const Message&)>> messageHandlers_;
    
public:
    explicit BaseActor(const std::string& name) : name_(name) {
        std::cout << "[" << name_ << "] –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–∫—Ç–µ—Ä–∞" << std::endl;
    }
    
    virtual ~BaseActor() {
        stop();
    }
    
    std::string getName() const override {
        return name_;
    }
    
    void start() override {
        if (running_.exchange(true)) {
            std::cout << "[" << name_ << "] –ê–∫—Ç–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω" << std::endl;
            return;
        }
        
        shouldStop_.store(false);
        workerThread_ = std::thread(&BaseActor::messageLoop, this);
        
        std::cout << "[" << name_ << "] ‚úÖ –ê–∫—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω (ID –ø–æ—Ç–æ–∫–∞: " 
                  << std::this_thread::get_id() << ")" << std::endl;
    }
    
    void stop() override {
        if (!running_.exchange(false)) {
            std::cout << "[" << name_ << "] –ê–∫—Ç–µ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
            return;
        }
        
        std::cout << "[" << name_ << "] –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–∫—Ç–µ—Ä–∞..." << std::endl;
        
        shouldStop_.store(true);
        condition_.notify_all();
        
        if (workerThread_.joinable()) {
            workerThread_.join();
        }
        
        std::cout << "[" << name_ << "] ‚ùå –ê–∫—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" << std::endl;
        std::cout << "[" << name_ << "] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ=" << messagesReceived_.load() 
                  << ", –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=" << messagesProcessed_.load() << std::endl;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–∫—Ç–µ—Ä—É
    void send(const Message& message) {
        messagesReceived_.fetch_add(1);
        
        {
            std::lock_guard<std::mutex> lock(mailboxMutex_);
            mailbox_.push(message);
        }
        condition_.notify_one();
        
        std::cout << "[" << name_ << "] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " << message.type 
                  << " –æ—Ç " << message.sender << std::endl;
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–æ–º—É –∞–∫—Ç–µ—Ä—É
    template<typename ActorType>
    void sendTo(ActorType& target, const std::string& messageType, const std::any& data) {
        Message msg(messageType, data, name_);
        target.send(msg);
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    size_t getMessagesProcessed() const { return messagesProcessed_.load(); }
    size_t getMessagesReceived() const { return messagesReceived_.load(); }
    size_t getQueueSize() const {
        std::lock_guard<std::mutex> lock(mailboxMutex_);
        return mailbox_.size();
    }
    
protected:
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–∞—Ö)
    virtual void receive(const Message& message) override {
        messagesProcessed_.fetch_add(1);
        
        auto handler = messageHandlers_.find(message.type);
        if (handler != messageHandlers_.end()) {
            std::cout << "[" << name_ << "] üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: " << message.type << std::endl;
            handler->second(message);
        } else {
            std::cout << "[" << name_ << "] ‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: " << message.type << std::endl;
        }
    }
    
    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    void registerHandler(const std::string& messageType, 
                        std::function<void(const Message&)> handler) {
        messageHandlers_[messageType] = handler;
        std::cout << "[" << name_ << "] üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è: " << messageType << std::endl;
    }
    
private:
    void messageLoop() {
        std::cout << "[" << name_ << "] üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π" << std::endl;
        
        while (!shouldStop_.load()) {
            Message message("", std::any{}, "");
            bool hasMessage = false;
            
            {
                std::unique_lock<std::mutex> lock(mailboxMutex_);
                condition_.wait(lock, [this] { return !mailbox_.empty() || shouldStop_.load(); });
                
                if (!mailbox_.empty()) {
                    message = std::move(mailbox_.front());
                    mailbox_.pop();
                    hasMessage = true;
                }
            }
            
            if (hasMessage) {
                try {
                    receive(message);
                } catch (const std::exception& e) {
                    std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " << e.what() << std::endl;
                }
            }
        }
        
        std::cout << "[" << name_ << "] üîÑ –ó–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π" << std::endl;
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–†–´ –ê–ö–¢–ï–†–û–í
// ============================================================================

/**
 * @brief –ê–∫—Ç–µ—Ä-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */
class CalculatorActor : public BaseActor {
private:
    double result_{0.0};
    
public:
    CalculatorActor() : BaseActor("Calculator") {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        registerHandler("ADD", [this](const Message& msg) { handleAdd(msg); });
        registerHandler("SUBTRACT", [this](const Message& msg) { handleSubtract(msg); });
        registerHandler("MULTIPLY", [this](const Message& msg) { handleMultiply(msg); });
        registerHandler("DIVIDE", [this](const Message& msg) { handleDivide(msg); });
        registerHandler("GET_RESULT", [this](const Message& msg) { handleGetResult(msg); });
        registerHandler("RESET", [this](const Message& msg) { handleReset(msg); });
        registerHandler("STATUS", [this](const Message& msg) { handleStatus(msg); });
    }
    
private:
    void handleAdd(const Message& message) {
        try {
            double value = std::any_cast<double>(message.data);
            result_ += value;
            std::cout << "[" << name_ << "] ‚ûï –î–æ–±–∞–≤–∏–ª " << value << ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << result_ << std::endl;
        } catch (const std::bad_any_cast& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ADD: " << e.what() << std::endl;
        }
    }
    
    void handleSubtract(const Message& message) {
        try {
            double value = std::any_cast<double>(message.data);
            result_ -= value;
            std::cout << "[" << name_ << "] ‚ûñ –í—ã—á–µ–ª " << value << ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << result_ << std::endl;
        } catch (const std::bad_any_cast& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ SUBTRACT: " << e.what() << std::endl;
        }
    }
    
    void handleMultiply(const Message& message) {
        try {
            double value = std::any_cast<double>(message.data);
            result_ *= value;
            std::cout << "[" << name_ << "] ‚úñÔ∏è –£–º–Ω–æ–∂–∏–ª –Ω–∞ " << value << ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << result_ << std::endl;
        } catch (const std::bad_any_cast& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ MULTIPLY: " << e.what() << std::endl;
        }
    }
    
    void handleDivide(const Message& message) {
        try {
            double value = std::any_cast<double>(message.data);
            if (value != 0.0) {
                result_ /= value;
                std::cout << "[" << name_ << "] ‚ûó –†–∞–∑–¥–µ–ª–∏–ª –Ω–∞ " << value << ", —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << result_ << std::endl;
            } else {
                std::cout << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å!" << std::endl;
            }
        } catch (const std::bad_any_cast& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ DIVIDE: " << e.what() << std::endl;
        }
    }
    
    void handleGetResult(const Message& message) {
        std::cout << "[" << name_ << "] üìä –¢–µ–∫—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " << result_ << std::endl;
    }
    
    void handleReset(const Message& message) {
        result_ = 0.0;
        std::cout << "[" << name_ << "] üîÑ –°–±—Ä–æ—Å–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 0" << std::endl;
    }
    
    void handleStatus(const Message& message) {
        std::cout << "[" << name_ << "] üìà –°—Ç–∞—Ç—É—Å: —Ä–µ–∑—É–ª—å—Ç–∞—Ç=" << result_ 
                  << ", —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=" << getMessagesProcessed() << std::endl;
    }
};

/**
 * @brief –ê–∫—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
struct User {
    std::string id;
    std::string name;
    std::string email;
    bool isActive{true};
    std::chrono::system_clock::time_point createdAt;
    
    User(const std::string& userId, const std::string& userName, const std::string& userEmail)
        : id(userId), name(userName), email(userEmail), 
          createdAt(std::chrono::system_clock::now()) {}
    
    std::string toString() const {
        return "User{id='" + id + "', name='" + name + "', email='" + email + 
               "', active=" + (isActive ? "true" : "false") + "}";
    }
};

class UserManagerActor : public BaseActor {
private:
    std::unordered_map<std::string, User> users_;
    
public:
    UserManagerActor() : BaseActor("UserManager") {
        registerHandler("CREATE_USER", [this](const Message& msg) { handleCreateUser(msg); });
        registerHandler("GET_USER", [this](const Message& msg) { handleGetUser(msg); });
        registerHandler("UPDATE_USER", [this](const Message& msg) { handleUpdateUser(msg); });
        registerHandler("DELETE_USER", [this](const Message& msg) { handleDeleteUser(msg); });
        registerHandler("LIST_USERS", [this](const Message& msg) { handleListUsers(msg); });
        registerHandler("USER_COUNT", [this](const Message& msg) { handleUserCount(msg); });
    }
    
private:
    void handleCreateUser(const Message& message) {
        try {
            auto userData = std::any_cast<std::tuple<std::string, std::string, std::string>>(message.data);
            auto [id, name, email] = userData;
            
            if (users_.find(id) == users_.end()) {
                users_[id] = User(id, name, email);
                std::cout << "[" << name_ << "] üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " << id << " (" << name << ")" << std::endl;
            } else {
                std::cout << "[" << name_ << "] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " << id << " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" << std::endl;
            }
        } catch (const std::exception& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        }
    }
    
    void handleGetUser(const Message& message) {
        try {
            std::string userId = std::any_cast<std::string>(message.data);
            auto it = users_.find(userId);
            
            if (it != users_.end()) {
                const User& user = it->second;
                std::cout << "[" << name_ << "] üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " << userId << ": " 
                          << user.toString() << std::endl;
            } else {
                std::cout << "[" << name_ << "] ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " << userId << " –Ω–µ –Ω–∞–π–¥–µ–Ω" << std::endl;
            }
        } catch (const std::exception& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        }
    }
    
    void handleUpdateUser(const Message& message) {
        try {
            auto updateData = std::any_cast<std::tuple<std::string, std::string, std::string>>(message.data);
            auto [id, newName, newEmail] = updateData;
            
            auto it = users_.find(id);
            if (it != users_.end()) {
                it->second.name = newName;
                it->second.email = newEmail;
                std::cout << "[" << name_ << "] ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " << id << std::endl;
            } else {
                std::cout << "[" << name_ << "] ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " << id << " –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" << std::endl;
            }
        } catch (const std::exception& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        }
    }
    
    void handleDeleteUser(const Message& message) {
        try {
            std::string userId = std::any_cast<std::string>(message.data);
            
            auto it = users_.find(userId);
            if (it != users_.end()) {
                users_.erase(it);
                std::cout << "[" << name_ << "] üóëÔ∏è –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " << userId << std::endl;
            } else {
                std::cout << "[" << name_ << "] ‚ùì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " << userId << " –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" << std::endl;
            }
        } catch (const std::exception& e) {
            std::cerr << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " << e.what() << std::endl;
        }
    }
    
    void handleListUsers(const Message& message) {
        std::cout << "[" << name_ << "] üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (" << users_.size() << "):" << std::endl;
        for (const auto& pair : users_) {
            const User& user = pair.second;
            std::cout << "  - " << user.toString() << std::endl;
        }
    }
    
    void handleUserCount(const Message& message) {
        std::cout << "[" << name_ << "] üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " << users_.size() << std::endl;
    }
};

/**
 * @brief –ê–∫—Ç–µ—Ä-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∞–∫—Ç–µ—Ä–∞–º–∏
 */
class CoordinatorActor : public BaseActor {
private:
    std::vector<BaseActor*> managedActors_;
    
public:
    CoordinatorActor() : BaseActor("Coordinator") {
        registerHandler("ADD_ACTOR", [this](const Message& msg) { handleAddActor(msg); });
        registerHandler("SEND_TO_ALL", [this](const Message& msg) { handleSendToAll(msg); });
        registerHandler("BROADCAST", [this](const Message& msg) { handleBroadcast(msg); });
        registerHandler("LIST_ACTORS", [this](const Message& msg) { handleListActors(msg); });
    }
    
    void addActor(BaseActor* actor) {
        managedActors_.push_back(actor);
        std::cout << "[" << name_ << "] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞–∫—Ç–µ—Ä: " << actor->getName() << std::endl;
    }
    
private:
    void handleAddActor(const Message& message) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏
        std::cout << "[" << name_ << "] ‚ûï –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–µ—Ä–∞" << std::endl;
    }
    
    void handleSendToAll(const Message& message) {
        std::cout << "[" << name_ << "] üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–µ—Ä–∞–º" << std::endl;
        
        for (auto* actor : managedActors_) {
            if (actor && actor != this) {
                sendTo(*actor, "COORDINATOR_MESSAGE", message.data);
            }
        }
    }
    
    void handleBroadcast(const Message& message) {
        std::cout << "[" << name_ << "] üì° –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: " 
                  << std::any_cast<std::string>(message.data) << std::endl;
        
        for (auto* actor : managedActors_) {
            if (actor && actor != this) {
                sendTo(*actor, "BROADCAST", message.data);
            }
        }
    }
    
    void handleListActors(const Message& message) {
        std::cout << "[" << name_ << "] üìã –£–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∞–∫—Ç–µ—Ä—ã (" << managedActors_.size() << "):" << std::endl;
        for (auto* actor : managedActors_) {
            if (actor) {
                std::cout << "  - " << actor->getName() 
                          << " (—Å–æ–æ–±—â–µ–Ω–∏–π: " << actor->getMessagesProcessed() << ")" << std::endl;
            }
        }
    }
};

// ============================================================================
// –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–ö–¢–ï–†–ê–ú–ò
// ============================================================================

/**
 * @brief –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–µ—Ä–∞–º–∏
 */
class ActorSystem {
private:
    std::unordered_map<std::string, std::unique_ptr<Actor>> actors_;
    std::mutex actorsMutex_;
    
public:
    template<typename ActorType, typename... Args>
    ActorType& createActor(const std::string& name, Args&&... args) {
        std::lock_guard<std::mutex> lock(actorsMutex_);
        
        auto actor = std::make_unique<ActorType>(std::forward<Args>(args)...);
        ActorType& actorRef = *actor;
        
        actors_[name] = std::move(actor);
        actorRef.start();
        
        std::cout << "[ActorSystem] ‚úÖ –°–æ–∑–¥–∞–Ω –∞–∫—Ç–µ—Ä: " << name << std::endl;
        return actorRef;
    }
    
    Actor* getActor(const std::string& name) {
        std::lock_guard<std::mutex> lock(actorsMutex_);
        auto it = actors_.find(name);
        return (it != actors_.end()) ? it->second.get() : nullptr;
    }
    
    BaseActor* getBaseActor(const std::string& name) {
        return dynamic_cast<BaseActor*>(getActor(name));
    }
    
    void sendMessage(const std::string& actorName, const Message& message) {
        BaseActor* actor = getBaseActor(actorName);
        if (actor) {
            actor->send(message);
        } else {
            std::cout << "[ActorSystem] ‚ùì –ê–∫—Ç–µ—Ä " << actorName << " –Ω–µ –Ω–∞–π–¥–µ–Ω" << std::endl;
        }
    }
    
    template<typename... Args>
    void sendMessage(const std::string& actorName, const std::string& messageType, Args&&... args) {
        auto data = std::make_tuple(std::forward<Args>(args)...);
        Message msg(messageType, data);
        sendMessage(actorName, msg);
    }
    
    void shutdown() {
        std::cout << "[ActorSystem] üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ—Ö –∞–∫—Ç–µ—Ä–æ–≤..." << std::endl;
        
        std::lock_guard<std::mutex> lock(actorsMutex_);
        for (auto& pair : actors_) {
            pair.second->stop();
        }
        
        actors_.clear();
        std::cout << "[ActorSystem] ‚úÖ –í—Å–µ –∞–∫—Ç–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" << std::endl;
    }
    
    size_t getActorCount() const {
        std::lock_guard<std::mutex> lock(actorsMutex_);
        return actors_.size();
    }
    
    void printSystemStatus() const {
        std::lock_guard<std::mutex> lock(actorsMutex_);
        std::cout << "\n=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ê–ö–¢–ï–†–û–í ===" << std::endl;
        std::cout << "–í—Å–µ–≥–æ –∞–∫—Ç–µ—Ä–æ–≤: " << actors_.size() << std::endl;
        
        for (const auto& pair : actors_) {
            auto* baseActor = dynamic_cast<BaseActor*>(pair.second.get());
            if (baseActor) {
                std::cout << "  - " << pair.first 
                          << ": –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=" << baseActor->getMessagesProcessed()
                          << ", –≤ –æ—á–µ—Ä–µ–¥–∏=" << baseActor->getQueueSize() << std::endl;
            }
        }
        std::cout << "===============================" << std::endl;
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ Actor Model
 */
void demonstrateBasicActorModel() {
    std::cout << "\n=== –ë–ê–ó–û–í–´–ô ACTOR MODEL ===" << std::endl;
    
    ActorSystem system;
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–µ—Ä-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    CalculatorActor& calculator = system.createActor<CalculatorActor>("Calculator");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    system.sendMessage("Calculator", "ADD", 10.0);
    system.sendMessage("Calculator", "MULTIPLY", 2.0);
    system.sendMessage("Calculator", "GET_RESULT", "");
    system.sendMessage("Calculator", "SUBTRACT", 5.0);
    system.sendMessage("Calculator", "GET_RESULT", "");
    system.sendMessage("Calculator", "STATUS", "");
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    
    system.printSystemStatus();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
void demonstrateUserManagement() {
    std::cout << "\n=== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===" << std::endl;
    
    ActorSystem system;
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    UserManagerActor& userManager = system.createActor<UserManagerActor>("UserManager");
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    system.sendMessage("UserManager", "CREATE_USER", 
                      std::make_tuple(std::string("user1"), std::string("Alice"), std::string("alice@example.com")));
    system.sendMessage("UserManager", "CREATE_USER", 
                      std::make_tuple(std::string("user2"), std::string("Bob"), std::string("bob@example.com")));
    system.sendMessage("UserManager", "CREATE_USER", 
                      std::make_tuple(std::string("user3"), std::string("Charlie"), std::string("charlie@example.com")));
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    system.sendMessage("UserManager", "GET_USER", std::string("user1"));
    system.sendMessage("UserManager", "GET_USER", std::string("user2"));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    system.sendMessage("UserManager", "UPDATE_USER", 
                      std::make_tuple(std::string("user1"), std::string("Alice Updated"), std::string("alice.new@example.com")));
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    system.sendMessage("UserManager", "LIST_USERS", "");
    system.sendMessage("UserManager", "USER_COUNT", "");
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    system.sendMessage("UserManager", "DELETE_USER", std::string("user3"));
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    system.sendMessage("UserManager", "LIST_USERS", "");
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    
    system.printSystemStatus();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∞–∫—Ç–µ—Ä–∞–º–∏
 */
void demonstrateActorInteraction() {
    std::cout << "\n=== –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –ú–ï–ñ–î–£ –ê–ö–¢–ï–†–ê–ú–ò ===" << std::endl;
    
    ActorSystem system;
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–µ—Ä—ã
    CalculatorActor& calculator = system.createActor<CalculatorActor>("Calculator");
    UserManagerActor& userManager = system.createActor<UserManagerActor>("UserManager");
    CoordinatorActor& coordinator = system.createActor<CoordinatorActor>("Coordinator");
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–µ—Ä—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä
    coordinator.addActor(&calculator);
    coordinator.addActor(&userManager);
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–µ—Ä–∞–º
    system.sendMessage("Coordinator", "BROADCAST", std::string("–ü—Ä–∏–≤–µ—Ç –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞!"));
    system.sendMessage("Coordinator", "LIST_ACTORS", "");
    
    // –ê–∫—Ç–µ—Ä—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –º–µ–∂–¥—É —Å–æ–±–æ–π
    calculator.sendTo(userManager, "CREATE_USER", 
                     std::make_tuple(std::string("calc_user"), std::string("Calculator User"), std::string("calc@example.com")));
    
    userManager.sendTo(calculator, "ADD", 100.0);
    userManager.sendTo(calculator, "GET_RESULT", "");
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    std::this_thread::sleep_for(std::chrono::milliseconds(1000));
    
    system.printSystemStatus();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Actor Model
 */
void demonstratePerformance() {
    std::cout << "\n=== –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===" << std::endl;
    
    ActorSystem system;
    CalculatorActor& calculator = system.createActor<CalculatorActor>("Calculator");
    
    const int NUM_MESSAGES = 1000;
    
    auto start = std::chrono::high_resolution_clock::now();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    for (int i = 0; i < NUM_MESSAGES; ++i) {
        system.sendMessage("Calculator", "ADD", 1.0);
    }
    
    // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    while (calculator.getQueueSize() > 0) {
        std::this_thread::sleep_for(std::chrono::milliseconds(1));
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    
    std::cout << "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ " << NUM_MESSAGES << " —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ " 
              << duration.count() << " –º—Å" << std::endl;
    std::cout << "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " 
              << (NUM_MESSAGES * 1000.0 / duration.count()) << " —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫" << std::endl;
    
    system.sendMessage("Calculator", "GET_RESULT", "");
    system.sendMessage("Calculator", "STATUS", "");
    
    // –ñ–¥–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    std::this_thread::sleep_for(std::chrono::milliseconds(200));
    
    system.printSystemStatus();
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Actor Model Pattern" << std::endl;
    std::cout << std::string(60, '=') << std::endl;
    
    try {
        demonstrateBasicActorModel();
        demonstrateUserManagement();
        demonstrateActorInteraction();
        demonstratePerformance();
        
        std::cout << "\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    std::cout << "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" << std::endl;
    std::cout << "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Actor Model –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è" << std::endl;
    std::cout << "2. –í—Å–µ –æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–∫—Ç–µ—Ä–∞–º–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è" << std::endl;
    std::cout << "3. –û–¥–∏–Ω –∞–∫—Ç–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —Ä–∞–∑" << std::endl;
    std::cout << "4. –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∞–∫—Ç–µ—Ä–æ–≤" << std::endl;
    std::cout << "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" << std::endl;
    
    return 0;
}
