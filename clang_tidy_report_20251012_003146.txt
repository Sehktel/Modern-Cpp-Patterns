================================================================================
FILE: D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:20:7: warning: class 'Vulnerablehello_world' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablehello_world {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:27:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablehello_world СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:34:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablehello_world СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablehello_world' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablehello_world {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:48:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablehello_world СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:55:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablehello_world СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:86:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze hello_world_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:88:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all hello_world_vulnerabilities.cpp" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:96:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g hello_world_vulnerabilities.cpp -o hello_world_asan" << std::endl;
      |                                                                                                        ^~~~~~~~~
      |                                                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:97:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./hello_world_asan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:99:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g hello_world_vulnerabilities.cpp -o hello_world_tsan" << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:100:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./hello_world_tsan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:102:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./hello_world_vulnerabilities" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:110:160: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• hello_world ===" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_1_hello_world\hello_world_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:20:7: warning: class 'Vulnerableraii' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerableraii {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:27:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerableraii СЃРѕР·РґР°РЅ" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:34:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerableraii СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerableraii' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerableraii {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:48:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerableraii СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:55:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerableraii СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:86:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze raii_vulnerabilities.cpp" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:88:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all raii_vulnerabilities.cpp" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:96:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g raii_vulnerabilities.cpp -o raii_asan" << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:97:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./raii_asan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:99:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g raii_vulnerabilities.cpp -o raii_tsan" << std::endl;
      |                                                                                         ^~~~~~~~~
      |                                                                                         '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:100:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./raii_tsan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:102:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./raii_vulnerabilities" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:110:153: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• raii ===" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_2_raii\raii_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:20:7: warning: class 'Vulnerablesmart_pointers' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablesmart_pointers {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:27:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablesmart_pointers СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:34:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablesmart_pointers СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablesmart_pointers' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablesmart_pointers {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:48:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablesmart_pointers СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:55:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablesmart_pointers СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:86:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze smart_pointers_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:88:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all smart_pointers_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:96:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g smart_pointers_vulnerabilities.cpp -o smart_pointers_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:97:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./smart_pointers_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:99:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g smart_pointers_vulnerabilities.cpp -o smart_pointers_tsan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:100:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./smart_pointers_tsan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:102:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./smart_pointers_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:110:163: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• smart_pointers ===" << std::endl;
      |                                                                                                                    ^~~~~~~~~
      |                                                                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_3_smart_pointers\smart_pointers_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:20:7: warning: class 'Vulnerablemove_semantics' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablemove_semantics {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:27:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablemove_semantics СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:34:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablemove_semantics СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablemove_semantics' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablemove_semantics {
      |       ^
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:48:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablemove_semantics СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:55:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablemove_semantics СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:86:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze move_semantics_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:88:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all move_semantics_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:96:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g move_semantics_vulnerabilities.cpp -o move_semantics_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:97:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./move_semantics_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:99:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g move_semantics_vulnerabilities.cpp -o move_semantics_tsan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:100:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./move_semantics_tsan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:102:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./move_semantics_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:110:163: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• move_semantics ===" << std::endl;
      |                                                                                                                    ^~~~~~~~~
      |                                                                                                                    '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\01-basics\lesson_1_4_move_semantics\move_semantics_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:20:7: warning: class 'Vulnerablesolid' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablesolid {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:27:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablesolid СЃРѕР·РґР°РЅ" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:34:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablesolid СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablesolid' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablesolid {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:48:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablesolid СЃРѕР·РґР°РЅ" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:55:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablesolid СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:86:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze solid_vulnerabilities.cpp" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:88:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all solid_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:96:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g solid_vulnerabilities.cpp -o solid_asan" << std::endl;
      |                                                                                            ^~~~~~~~~
      |                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:97:39: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./solid_asan" << std::endl;
      |                                       ^~~~~~~~~
      |                                       '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:99:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g solid_vulnerabilities.cpp -o solid_tsan" << std::endl;
      |                                                                                           ^~~~~~~~~
      |                                                                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:100:39: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./solid_tsan" << std::endl;
      |                                       ^~~~~~~~~
      |                                       '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:102:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./solid_vulnerabilities" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:110:154: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• solid ===" << std::endl;
      |                                                                                                           ^~~~~~~~~
      |                                                                                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\02-principles\lesson_2_1_solid\solid_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:20:7: warning: class 'Vulnerabledry_kiss_yagni' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerabledry_kiss_yagni {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:27:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerabledry_kiss_yagni СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:34:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerabledry_kiss_yagni СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerabledry_kiss_yagni' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerabledry_kiss_yagni {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:48:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerabledry_kiss_yagni СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:55:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerabledry_kiss_yagni СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:86:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze dry_kiss_yagni_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:88:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all dry_kiss_yagni_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:96:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g dry_kiss_yagni_vulnerabilities.cpp -o dry_kiss_yagni_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:97:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./dry_kiss_yagni_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:99:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g dry_kiss_yagni_vulnerabilities.cpp -o dry_kiss_yagni_tsan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:100:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./dry_kiss_yagni_tsan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:102:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./dry_kiss_yagni_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:110:163: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• dry_kiss_yagni ===" << std::endl;
      |                                                                                                                    ^~~~~~~~~
      |                                                                                                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
D:\Work\Patterns\02-principles\lesson_2_2_dry_kiss_yagni\dry_kiss_yagni_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'

================================================================================
FILE: D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:20:7: warning: class 'Vulnerablecomposition_inheritance' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablecomposition_inheritance {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:27:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablecomposition_inheritance СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:34:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablecomposition_inheritance СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablecomposition_inheritance' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablecomposition_inheritance {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:48:93: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablecomposition_inheritance СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:55:107: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablecomposition_inheritance СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                                       ^~~~~~~~~
      |                                                                                       '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:86:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze composition_inheritance_vulnerabilities.cpp" << std::endl;
      |                                                                                      ^~~~~~~~~
      |                                                                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:88:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all composition_inheritance_vulnerabilities.cpp" << std::endl;
      |                                                                                            ^~~~~~~~~
      |                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:96:128: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g composition_inheritance_vulnerabilities.cpp -o composition_inheritance_asan" << std::endl;
      |                                                                                                                                ^~~~~~~~~
      |                                                                                                                                '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:97:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./composition_inheritance_asan" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:99:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g composition_inheritance_vulnerabilities.cpp -o composition_inheritance_tsan" << std::endl;
      |                                                                                                                               ^~~~~~~~~
      |                                                                                                                               '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:100:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./composition_inheritance_tsan" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:102:93: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./composition_inheritance_vulnerabilities" << std::endl;
      |                                                                                             ^~~~~~~~~
      |                                                                                             '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:110:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• composition_inheritance ===" << std::endl;
      |                                                                                                                             ^~~~~~~~~
      |                                                                                                                             '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\02-principles\lesson_2_3_composition_inheritance\composition_inheritance_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:20:7: warning: class 'Vulnerabledependency_injection' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerabledependency_injection {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:27:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerabledependency_injection СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:34:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerabledependency_injection СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerabledependency_injection' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerabledependency_injection {
      |       ^
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:48:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerabledependency_injection СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:55:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerabledependency_injection СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:86:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze dependency_injection_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:88:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all dependency_injection_vulnerabilities.cpp" << std::endl;
      |                                                                                         ^~~~~~~~~
      |                                                                                         '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:96:122: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g dependency_injection_vulnerabilities.cpp -o dependency_injection_asan" << std::endl;
      |                                                                                                                          ^~~~~~~~~
      |                                                                                                                          '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:97:54: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./dependency_injection_asan" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:99:121: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g dependency_injection_vulnerabilities.cpp -o dependency_injection_tsan" << std::endl;
      |                                                                                                                         ^~~~~~~~~
      |                                                                                                                         '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:100:54: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./dependency_injection_tsan" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:102:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./dependency_injection_vulnerabilities" << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
Suppressed 106438 warnings (106438 in non-user code).
  109 | int main() {
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:110:169: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• dependency_injection ===" << std::endl;
      |                                                                                                                          ^~~~~~~~~
      |                                                                                                                          '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\02-principles\lesson_2_4_dependency_injection\dependency_injection_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'

================================================================================
FILE: D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp
WARNINGS: 71
ERRORS: 0
================================================================================
107047 warnings generated.
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:32:7: warning: class 'UnsafeSingleton' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   32 | class UnsafeSingleton {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:35:9: warning: use default member initializer for 'data' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   35 |     int data;
      |         ^   
      |             {42}
   36 |     
   37 |     UnsafeSingleton() : data(42) {
      |                         ~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:37:30: warning: 42 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   37 |     UnsafeSingleton() : data(42) {
      |                              ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:38:56: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   38 |         std::cout << "UnsafeSingleton создан" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:42:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     static UnsafeSingleton* getInstance() {
      |            ~~~~~~~~~~~~~~~~ ^
      |            auto                           -> UnsafeSingleton*
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:46:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'UnsafeSingleton *' [cppcoreguidelines-owning-memory]
   46 |             instance = new UnsafeSingleton();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:51:5: warning: function 'getData' should be marked [[nodiscard]] [modernize-use-nodiscard]
   51 |     int getData() const { return data; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:51:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   51 |     int getData() const { return data; }
      |     ~~~ ^
      |     auto                -> int
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:55:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "UnsafeSingleton уничтожен" << std::endl;
      |                                                     ^~~~~~~~~
      |                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:64:7: warning: class 'LeakySingleton' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   64 | class LeakySingleton {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:69:50: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     LeakySingleton() : data(new std::vector<int>(1000000)) {
      |                                                  ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:72:55: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |         std::cout << "LeakySingleton создан" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:76:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   76 |     static LeakySingleton* getInstance() {
      |            ~~~~~~~~~~~~~~~ ^
      |            auto                          -> LeakySingleton*
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:78:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'LeakySingleton *' [cppcoreguidelines-owning-memory]
   78 |             instance = new LeakySingleton();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:85:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |         std::cout << "LeakySingleton уничтожен" << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:94:7: warning: class 'UseAfterFreeSingleton' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   94 | class UseAfterFreeSingleton {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:99:47: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   99 |     UseAfterFreeSingleton() : buffer(new char[1024]) {
      |                                               ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:100:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |         std::cout << "UseAfterFreeSingleton создан" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:104:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     static UseAfterFreeSingleton* getInstance() {
      |            ~~~~~~~~~~~~~~~~~~~~~~ ^
      |            auto                                 -> UseAfterFreeSingleton*
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:106:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'UseAfterFreeSingleton *' [cppcoreguidelines-owning-memory]
  106 |             instance = new UseAfterFreeSingleton();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:113:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  113 |         strcpy(buffer, data);
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:113:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  113 |         strcpy(buffer, data);
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:113:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  113 |         strcpy(buffer, data);
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:116:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     char* getBuffer() {
      |     ~~~~~ ^
      |     auto              -> char*
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:121:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  121 |         delete instance;
      |         ^      ~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:96:5: note: variable declared here
   96 |     static UseAfterFreeSingleton* instance;
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:127:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  127 |         std::cout << "UseAfterFreeSingleton уничтожен" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:136:7: warning: class 'ReferenceCountedSingleton' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  136 | class ReferenceCountedSingleton {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:140:9: warning: use default member initializer for 'data' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  140 |     int data;
      |         ^   
      |             {100}
  141 |     
  142 |     ReferenceCountedSingleton() : refCount(new int(1)), data(100) {
      |                                                         ~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:142:62: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  142 |     ReferenceCountedSingleton() : refCount(new int(1)), data(100) {
      |                                                              ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:143:66: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  143 |         std::cout << "ReferenceCountedSingleton создан" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:147:39: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  147 |     static ReferenceCountedSingleton* getInstance() {
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |            auto                                     -> ReferenceCountedSingleton*
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:149:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'ReferenceCountedSingleton *' [cppcoreguidelines-owning-memory]
  149 |             instance = new ReferenceCountedSingleton();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:165:5: warning: function 'getRefCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  165 |     int getRefCount() const { return *refCount; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:165:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  165 |     int getRefCount() const { return *refCount; }
      |     ~~~ ^
      |     auto                    -> int
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:166:5: warning: function 'getData' should be marked [[nodiscard]] [modernize-use-nodiscard]
  166 |     int getData() const { return data; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:166:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  166 |     int getData() const { return data; }
      |     ~~~ ^
      |     auto                -> int
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:170:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  170 |         std::cout << "ReferenceCountedSingleton уничтожен" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:181:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  181 |     std::cout << "\n=== Демонстрация Race Condition ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:186:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  186 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:9: warning: 'emplace_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  186 |     for (int i = 0; i < 10; ++i) {
  187 |         threads.emplace_back([i]() {
      |         ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  187 |         threads.emplace_back([i]() {
      |                              ^
      |                                    -> void
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:188:13: warning: 'auto instance' can be declared as 'auto *instance' [readability-qualified-auto]
  188 |             auto instance = UnsafeSingleton::getInstance();
      |             ^~~~
      |             auto *
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:190:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  190 |             std::cout << "Поток " << i << ": data = " << instance->getData() << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:200:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  200 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:202:5: warning: 'auto instance' can be declared as 'auto *instance' [readability-qualified-auto]
  202 |     auto instance = UseAfterFreeSingleton::getInstance();
      |     ^~~~
      |     auto *
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:205:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  205 |     std::cout << "Данные в буфере: " << instance->getBuffer() << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:212:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  212 |     std::cout << "Попытка использовать после уничтожения..." << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:217:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  217 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:219:5: warning: 'auto instance' can be declared as 'auto *instance' [readability-qualified-auto]
  219 |     auto instance = ReferenceCountedSingleton::getInstance();
      |     ^~~~
      |     auto *
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:222:25: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  222 |     for (int i = 0; i < 1000; ++i) {
      |                         ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:226:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  226 |     std::cout << "Количество ссылок: " << instance->getRefCount() << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:237:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  237 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:238:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  238 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:239:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  239 |     std::cout << "   clang --analyze singleton_vulnerabilities.cpp" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:240:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  240 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:241:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  241 |     std::cout << "   cppcheck --enable=all singleton_vulnerabilities.cpp" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:242:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  242 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:243:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  243 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:247:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  247 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:248:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  248 |     std::cout << "1. ThreadSanitizer (для race conditions):" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:249:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  249 |     std::cout << "   g++ -fsanitize=thread -g singleton_vulnerabilities.cpp -o singleton_tsan" << std::endl;
      |                                                                                                   ^~~~~~~~~
      |                                                                                                   '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:250:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  250 |     std::cout << "   ./singleton_tsan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:251:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  251 |     std::cout << "2. AddressSanitizer (для use-after-free):" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:252:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  252 |     std::cout << "   g++ -fsanitize=address -g singleton_vulnerabilities.cpp -o singleton_asan" << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:253:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  253 |     std::cout << "   ./singleton_asan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:254:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  254 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:255:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  255 |     std::cout << "   valgrind --tool=helgrind ./singleton_vulnerabilities" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:262:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  262 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<std::thread>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:829:43: note: frame #5: function '_Emplace_reallocate<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' calls function '_Allocate_at_least_helper<std::allocator<std::thread>>' here
  829 |         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);
      |                                           ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:783:17: note: frame #6: function '_Emplace_one_at_back<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' calls function '_Emplace_reallocate<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' here
  783 |         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:862:24: note: frame #7: function 'emplace_back<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' calls function '_Emplace_one_at_back<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' here
  862 |         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
      |                        ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:9: note: frame #8: function 'demonstrateRaceCondition' calls function 'emplace_back<(lambda at D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:187:30)>' here
  187 |         threads.emplace_back([i]() {
      |         ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:266:5: note: frame #9: function 'main' calls function 'demonstrateRaceCondition' here
  266 |     demonstrateRaceCondition();
      |     ^
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:262:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  262 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:263:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  263 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ SINGLETON ===" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:274:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  274 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\03-creational\lesson_3_1_singleton\singleton_vulnerabilities.cpp:275:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  275 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106968 warnings (106968 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp
WARNINGS: 78
ERRORS: 0
================================================================================
106889 warnings generated.
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:31:7: warning: class 'VulnerableFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   31 | class VulnerableFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:33:11: warning: use default member initializer for 'buffer' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   33 |     char* buffer;
      |           ^     
      |                 {nullptr}
   34 |     size_t bufferSize;
   35 |     
   36 | public:
   37 |     VulnerableFactory() : buffer(nullptr), bufferSize(0) {
      |                           ~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:34:12: warning: use default member initializer for 'bufferSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   34 |     size_t bufferSize;
      |            ^         
      |                      {0}
   35 |     
   36 | public:
   37 |     VulnerableFactory() : buffer(nullptr), bufferSize(0) {
      |                                            ~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:38:58: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   38 |         std::cout << "VulnerableFactory создан" << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:42:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     void* createObject(size_t size) {
      |     ~~~~~ ^
      |     auto                            -> void*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:44:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
   44 |         buffer = new char[size];
      |         ^~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:54:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   54 |     char* getBuffer() {
      |     ~~~~~ ^
      |     auto              -> char*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:60:64: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   60 |         std::cout << "VulnerableFactory уничтожен" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:67:7: warning: class 'LeakyFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   67 | class LeakyFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:73:53: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   73 |         std::cout << "LeakyFactory создан" << std::endl;
      |                                               ^~~~~~~~~
      |                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:77:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   77 |     void* createObject(size_t size) {
      |     ~~~~~ ^
      |     auto                            -> void*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:83:20: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |         if (size > 1000000) {
      |                    ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:93:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
   93 |             delete[] static_cast<char*>(obj);
      |             ^                           ~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:92:14: note: variable declared here
   92 |         for (void* obj : objects) {
      |              ^~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:95:59: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |         std::cout << "LeakyFactory уничтожен" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:102:7: warning: class 'TypeConfusionFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  102 | class TypeConfusionFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:104:11: warning: use default member initializer for 'lastObject' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  104 |     void* lastObject;
      |           ^         
      |                     {nullptr}
  105 |     
  106 | public:
  107 |     TypeConfusionFactory() : lastObject(nullptr) {
      |                              ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:108:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  108 |         std::cout << "TypeConfusionFactory создан" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:113:8: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  113 |     T* createObject(size_t size) {
      |     ~~ ^
      |     auto                         -> T*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:114:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
  114 |         lastObject = new char[size];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:121:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     void* getLastObject() {
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:127:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  127 |         std::cout << "TypeConfusionFactory уничтожен" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:134:7: warning: class 'IntegerOverflowFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  134 | class IntegerOverflowFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:136:12: warning: use default member initializer for 'totalSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  136 |     size_t totalSize;
      |            ^        
      |                     {0}
  137 |     
  138 | public:
  139 |     IntegerOverflowFactory() : totalSize(0) {
      |                                ~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:140:63: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  140 |         std::cout << "IntegerOverflowFactory создан" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:144:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  144 |     void* createObject(size_t count, size_t elementSize) {
      |     ~~~~~ ^
      |     auto                                                 -> void*
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:144:11: warning: method 'createObject' can be made static [readability-convert-member-functions-to-static]
  144 |     void* createObject(size_t count, size_t elementSize) {
      |           ^
      |     static 
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:149:25: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  149 |         if (totalSize < 1000000) {
      |                         ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:150:13: warning: returning a newly created resource of type 'void *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  150 |             return new char[totalSize];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:156:5: warning: function 'getTotalSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  156 |     size_t getTotalSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:156:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  156 |     size_t getTotalSize() const {
      |     ~~~~~~ ^
      |     auto                        -> size_t
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:161:69: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  161 |         std::cout << "IntegerOverflowFactory уничтожен" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:170:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  170 |     std::cout << "\n=== Демонстрация Buffer Overflow ===" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:175:11: warning: Value stored to 'obj1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  175 |     void* obj1 = factory.createObject(100);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:175:11: note: Value stored to 'obj1' during its initialization is never read
  175 |     void* obj1 = factory.createObject(100);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:175:39: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  175 |     void* obj1 = factory.createObject(100);
      |                                       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:176:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  176 |     std::cout << "Создан объект размером 100 байт" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:179:11: warning: Value stored to 'obj2' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  179 |     void* obj2 = factory.createObject(SIZE_MAX);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:179:11: note: Value stored to 'obj2' during its initialization is never read
  179 |     void* obj2 = factory.createObject(SIZE_MAX);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:180:111: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  180 |     std::cout << "Попытка создать объект максимального размера..." << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:184:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  184 |     std::cout << "\n=== Демонстрация Memory Leak ===" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:190:15: warning: Value stored to 'obj1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  190 |         void* obj1 = factory.createObject(100);
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:190:15: note: Value stored to 'obj1' during its initialization is never read
  190 |         void* obj1 = factory.createObject(100);
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:190:43: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  190 |         void* obj1 = factory.createObject(100);
      |                                           ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:191:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  191 |         std::cout << "Создан объект размером 100 байт" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:194:15: warning: Value stored to 'obj2' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  194 |         void* obj2 = factory.createObject(2000000);
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:194:15: note: Value stored to 'obj2' during its initialization is never read
  194 |         void* obj2 = factory.createObject(2000000);
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:194:43: warning: 2000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  194 |         void* obj2 = factory.createObject(2000000);
      |                                           ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:196:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  196 |         std::cout << "Исключение: " << e.what() << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:197:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  197 |         std::cout << "Память может быть утеряна!" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:202:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  202 |     std::cout << "\n=== Демонстрация Type Confusion ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:208:15: warning: 42 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  208 |     *intObj = 42;
      |               ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:213:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  213 |     std::cout << "Int значение: " << *intObj << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:214:59: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  214 |     std::cout << "Char значение: " << *charObj << std::endl;
      |                                                   ^~~~~~~~~
      |                                                   '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:218:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  218 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:223:11: warning: Value stored to 'obj1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  223 |     void* obj1 = factory.createObject(100, 10);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:223:11: note: Value stored to 'obj1' during its initialization is never read
  223 |     void* obj1 = factory.createObject(100, 10);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:223:39: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  223 |     void* obj1 = factory.createObject(100, 10);
      |                                       ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:223:44: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  223 |     void* obj1 = factory.createObject(100, 10);
      |                                            ^
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:224:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  224 |     std::cout << "Создан объект: 100 * 10 = 1000 байт" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:230:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  230 |     std::cout << "Попытка создать объект: " << largeCount << " * " << largeSize << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:233:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  233 |     if (obj2) {
      |         ^   
      |              != nullptr
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:234:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  234 |         std::cout << "Объект создан (возможно из-за overflow)!" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:236:58: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  236 |         std::cout << "Объект не создан" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:245:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  245 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:246:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  246 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:247:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  247 |     std::cout << "   clang --analyze factory_method_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:248:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  248 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:249:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  249 |     std::cout << "   cppcheck --enable=all factory_method_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:250:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  250 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:251:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  251 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:255:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  255 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:256:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  256 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:257:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  257 |     std::cout << "   g++ -fsanitize=address -g factory_method_vulnerabilities.cpp -o factory_method_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:258:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  258 |     std::cout << "   ./factory_method_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:259:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  259 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:260:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  260 |     std::cout << "   g++ -fsanitize=memory -g factory_method_vulnerabilities.cpp -o factory_method_msan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:261:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  261 |     std::cout << "   ./factory_method_msan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:262:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  262 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:263:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  263 |     std::cout << "   valgrind --tool=memcheck ./factory_method_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:270:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  270 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:271:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  271 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ FACTORY METHOD ===" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:283:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  283 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\03-creational\lesson_3_2_factory_method\factory_method_vulnerabilities.cpp:284:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  284 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106798 warnings (106798 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp
WARNINGS: 89
ERRORS: 0
================================================================================
107265 warnings generated.
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:30:7: warning: class 'VulnerableAbstractFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   30 | class VulnerableAbstractFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:36:66: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   36 |         std::cout << "VulnerableAbstractFactory создан" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:41:8: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     T* createObject(size_t size) {
      |     ~~ ^
      |     auto                         -> T*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:51:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   51 |     void* getObject(size_t index) {
      |     ~~~~~ ^
      |     auto                          -> void*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:58:5: warning: function 'getObjectCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
   58 |     size_t getObjectCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:58:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   58 |     size_t getObjectCount() const {
      |     ~~~~~~ ^
      |     auto                          -> size_t
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:64:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
   64 |             delete[] static_cast<char*>(obj);
      |             ^                           ~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:63:14: note: variable declared here
   63 |         for (void* obj : createdObjects) {
      |              ^~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:66:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   66 |         std::cout << "VulnerableAbstractFactory уничтожен" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:73:7: warning: class 'LeakyAbstractFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   73 | class LeakyAbstractFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:80:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   80 |         std::cout << "LeakyAbstractFactory создан" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:84:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   84 |     void* createObject(size_t size, const char* type) {
      |     ~~~~~ ^
      |     auto                                              -> void*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:92:20: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |         if (size > 1000000) {
      |                    ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:104:9: warning: use range-based for loop instead [modernize-loop-convert]
  104 |         for (size_t i = 0; i < objects.size(); ++i) {
      |         ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |             (auto & object : objects)
  105 |             delete[] static_cast<char*>(objects[i]);
      |                                         ~~~~~~~~~~
      |                                         object
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:105:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  105 |             delete[] static_cast<char*>(objects[i]);
      |             ^                                  ~~~
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:1890:5: note: variable declared here
 1890 |     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:321:24: note: expanded from macro '_NODISCARD'
  321 |     #define _NODISCARD [[nodiscard]]
      |                        ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:107:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  107 |         std::cout << "LeakyAbstractFactory уничтожен" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:114:7: warning: class 'BufferOverflowAbstractFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  114 | class BufferOverflowAbstractFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:116:11: warning: use default member initializer for 'buffer' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  116 |     char* buffer;
      |           ^     
      |                 {nullptr}
  117 |     size_t bufferSize;
  118 |     size_t currentSize;
  119 |     
  120 | public:
  121 |     BufferOverflowAbstractFactory() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                                       ~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:117:12: warning: use default member initializer for 'bufferSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  117 |     size_t bufferSize;
      |            ^         
      |                      {0}
  118 |     size_t currentSize;
  119 |     
  120 | public:
  121 |     BufferOverflowAbstractFactory() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                        ~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:118:12: warning: use default member initializer for 'currentSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  118 |     size_t currentSize;
      |            ^          
      |                       {0}
  119 |     
  120 | public:
  121 |     BufferOverflowAbstractFactory() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                                       ~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:122:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  122 |         std::cout << "BufferOverflowAbstractFactory создан" << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:126:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  126 |     void* createObjectArray(size_t count, size_t elementSize) {
      |     ~~~~~ ^
      |     auto                                                      -> void*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:133:13: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  133 |             char* newBuffer = new char[bufferSize];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:134:17: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  134 |             if (buffer) {
      |                 ^     
      |                        != nullptr
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:142:28: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  142 |         void* obj = buffer + currentSize;
      |                            ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:148:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  148 |     char* getBuffer() {
      |     ~~~~~ ^
      |     auto              -> char*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:152:5: warning: function 'getBufferSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  152 |     size_t getBufferSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:152:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  152 |     size_t getBufferSize() const {
      |     ~~~~~~ ^
      |     auto                         -> size_t
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:158:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  158 |         std::cout << "BufferOverflowAbstractFactory уничтожен" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:165:7: warning: class 'UseAfterFreeAbstractFactory' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  165 | class UseAfterFreeAbstractFactory {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:172:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  172 |         std::cout << "UseAfterFreeAbstractFactory создан" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:175:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  175 |     void* createObject(size_t size) {
      |     ~~~~~ ^
      |     auto                            -> void*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:186:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  186 |             delete[] static_cast<char*>(objects[index]);
      |             ^                                  ~~~~~~~
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:1890:5: note: variable declared here
 1890 |     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:321:24: note: expanded from macro '_NODISCARD'
  321 |     #define _NODISCARD [[nodiscard]]
      |                        ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:193:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  193 |     void* getObject(size_t index) {
      |     ~~~~~ ^
      |     auto                          -> void*
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:200:5: warning: function 'isObjectValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  200 |     bool isObjectValid(size_t index) const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:200:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  200 |     bool isObjectValid(size_t index) const {
      |     ~~~~ ^
      |     auto                                   -> bool
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:210:17: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  210 |                 delete[] static_cast<char*>(objects[i]);
      |                 ^                                  ~~~
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:1890:5: note: variable declared here
 1890 |     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:321:24: note: expanded from macro '_NODISCARD'
  321 |     #define _NODISCARD [[nodiscard]]
      |                        ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:213:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  213 |         std::cout << "UseAfterFreeAbstractFactory уничтожен" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:222:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  222 |     std::cout << "\n=== Демонстрация Type Confusion ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:228:15: warning: 42 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  228 |     *intObj = 42;
      |               ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:233:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  233 |     std::cout << "Int значение: " << *intObj << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:234:59: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  234 |     std::cout << "Char значение: " << *charObj << std::endl;
      |                                                   ^~~~~~~~~
      |                                                   '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:235:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  235 |     std::cout << "Количество объектов: " << factory.getObjectCount() << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:239:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  239 |     std::cout << "\n=== Демонстрация Memory Leak ===" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:245:15: warning: Value stored to 'obj1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  245 |         void* obj1 = factory.createObject(100, "small");
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:245:15: note: Value stored to 'obj1' during its initialization is never read
  245 |         void* obj1 = factory.createObject(100, "small");
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:245:43: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  245 |         void* obj1 = factory.createObject(100, "small");
      |                                           ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:246:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  246 |         std::cout << "Создан объект размером 100 байт" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:249:15: warning: Value stored to 'obj2' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  249 |         void* obj2 = factory.createObject(2000000, "large");
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:249:15: note: Value stored to 'obj2' during its initialization is never read
  249 |         void* obj2 = factory.createObject(2000000, "large");
      |               ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:249:43: warning: 2000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  249 |         void* obj2 = factory.createObject(2000000, "large");
      |                                           ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:251:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  251 |         std::cout << "Исключение: " << e.what() << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:252:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  252 |         std::cout << "Память может быть утеряна!" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:257:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  257 |     std::cout << "\n=== Демонстрация Buffer Overflow ===" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:262:11: warning: Value stored to 'obj1' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  262 |     void* obj1 = factory.createObjectArray(10, 100);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:262:11: note: Value stored to 'obj1' during its initialization is never read
  262 |     void* obj1 = factory.createObjectArray(10, 100);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:262:44: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  262 |     void* obj1 = factory.createObjectArray(10, 100);
      |                                            ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:262:48: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  262 |     void* obj1 = factory.createObjectArray(10, 100);
      |                                                ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:263:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  263 |     std::cout << "Создан массив: 10 * 100 = 1000 байт" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:266:11: warning: Value stored to 'obj2' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  266 |     void* obj2 = factory.createObjectArray(1000000, 1000);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:266:11: note: Value stored to 'obj2' during its initialization is never read
  266 |     void* obj2 = factory.createObjectArray(1000000, 1000);
      |           ^~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:266:44: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  266 |     void* obj2 = factory.createObjectArray(1000000, 1000);
      |                                            ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:266:53: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  266 |     void* obj2 = factory.createObjectArray(1000000, 1000);
      |                                                     ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:267:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  267 |     std::cout << "Попытка создать большой массив" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:269:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  269 |     std::cout << "Размер буфера: " << factory.getBufferSize() << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:273:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  273 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:278:11: warning: Value stored to 'obj' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
  278 |     void* obj = factory.createObject(1024);
      |           ^~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:278:11: note: Value stored to 'obj' during its initialization is never read
  278 |     void* obj = factory.createObject(1024);
      |           ^~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:278:38: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  278 |     void* obj = factory.createObject(1024);
      |                                      ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:279:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  279 |     std::cout << "Объект создан" << std::endl;
      |                                     ^~~~~~~~~
      |                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:283:55: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  283 |     std::cout << "Объект уничтожен" << std::endl;
      |                                        ^~~~~~~~~
      |                                        '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:287:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  287 |     if (danglingObj) {
      |         ^          
      |                     != nullptr
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:288:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  288 |         std::cout << "Объект все еще доступен (dangling pointer)" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:289:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  289 |         std::cout << "Валидность: " << (factory.isObjectValid(0) ? "Да" : "Нет") << std::endl;
      |                                                                                     ^~~~~~~~~
      |                                                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:298:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  298 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:299:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  299 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:300:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  300 |     std::cout << "   clang --analyze abstract_factory_vulnerabilities.cpp" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:301:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  301 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:302:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  302 |     std::cout << "   cppcheck --enable=all abstract_factory_vulnerabilities.cpp" << std::endl;
      |                                                                                     ^~~~~~~~~
      |                                                                                     '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:303:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  303 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:304:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  304 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:308:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  308 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:309:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  309 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:310:114: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  310 |     std::cout << "   g++ -fsanitize=address -g abstract_factory_vulnerabilities.cpp -o abstract_factory_asan" << std::endl;
      |                                                                                                                  ^~~~~~~~~
      |                                                                                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:311:50: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  311 |     std::cout << "   ./abstract_factory_asan" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:312:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  312 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:313:113: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  313 |     std::cout << "   g++ -fsanitize=memory -g abstract_factory_vulnerabilities.cpp -o abstract_factory_msan" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:314:50: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  314 |     std::cout << "   ./abstract_factory_msan" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:315:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  315 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:316:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  316 |     std::cout << "   valgrind --tool=memcheck ./abstract_factory_vulnerabilities" << std::endl;
      |                                                                                      ^~~~~~~~~
      |                                                                                      '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:323:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  323 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<void *>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:829:43: note: frame #5: function '_Emplace_reallocate<void *const &>' calls function '_Allocate_at_least_helper<std::allocator<void *>>' here
  829 |         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);
      |                                           ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:783:17: note: frame #6: function '_Emplace_one_at_back<void *const &>' calls function '_Emplace_reallocate<void *const &>' here
  783 |         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:871:9: note: frame #7: function 'push_back' calls function '_Emplace_one_at_back<void *const &>' here
  871 |         _Emplace_one_at_back(_Val);
      |         ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:44:9: note: frame #8: function 'createObject<int>' calls function 'push_back' here
   44 |         createdObjects.push_back(obj);
      |         ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:227:19: note: frame #9: function 'demonstrateTypeConfusion' calls function 'createObject<int>' here
  227 |     int* intObj = factory.createObject<int>(sizeof(int));
      |                   ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:327:5: note: frame #10: function 'main' calls function 'demonstrateTypeConfusion' here
  327 |     demonstrateTypeConfusion();
      |     ^
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:323:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  323 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:324:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  324 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ ABSTRACT FACTORY ===" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:336:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  336 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\03-creational\lesson_3_3_abstract_factory\abstract_factory_vulnerabilities.cpp:337:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  337 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 107163 warnings (107163 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp
WARNINGS: 74
ERRORS: 0
================================================================================
91049 warnings generated.
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:22:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
   22 |     char header[64];
      |     ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:22:17: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   22 |     char header[64];
      |                 ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:23:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
   23 |     char body[256];
      |     ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:23:15: warning: 256 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   23 |     char body[256];
      |               ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:24:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
   24 |     char footer[32];
      |     ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:24:17: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   24 |     char footer[32];
      |                 ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:27:36: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   27 |         std::cout << "Header: " << header << "\n";
      |                                    ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:28:34: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   28 |         std::cout << "Body: " << body << "\n";
      |                                  ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:29:36: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   29 |         std::cout << "Footer: " << footer << "\n";
      |                                    ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:39:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   39 |     VulnerableMessageBuilder& setHeader(const char* header) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                    -> VulnerableMessageBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:41:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   41 |         strcpy(msg_.header, header);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:41:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   41 |         strcpy(msg_.header, header);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:41:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   41 |         strcpy(msg_.header, header);  // BUFFER OVERFLOW!
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:41:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   41 |         strcpy(msg_.header, header);  // BUFFER OVERFLOW!
      |                ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:45:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |     VulnerableMessageBuilder& setBody(const char* body) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                -> VulnerableMessageBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:46:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   46 |         strcpy(msg_.body, body);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:46:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   46 |         strcpy(msg_.body, body);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:46:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   46 |         strcpy(msg_.body, body);  // BUFFER OVERFLOW!
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:46:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   46 |         strcpy(msg_.body, body);  // BUFFER OVERFLOW!
      |                ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:50:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   50 |     VulnerableMessageBuilder& setFooter(const char* footer) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                    -> VulnerableMessageBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:51:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   51 |         strcpy(msg_.footer, footer);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:51:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   51 |         strcpy(msg_.footer, footer);  // BUFFER OVERFLOW!
      |         ^~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:51:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   51 |         strcpy(msg_.footer, footer);  // BUFFER OVERFLOW!
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:51:16: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   51 |         strcpy(msg_.footer, footer);  // BUFFER OVERFLOW!
      |                ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:55:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   55 |     Message build() {
      |     ~~~~~~~ ^
      |     auto            -> Message
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:63:5: warning: uninitialized record type: 'builder' [cppcoreguidelines-pro-type-member-init]
   63 |     VulnerableMessageBuilder builder;
      |     ^                               
      |                                     {}
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:69:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
   69 |     char overflow[128];
      |     ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:69:19: warning: 128 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   69 |     char overflow[128];
      |                   ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:70:12: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   70 |     memset(overflow, 'A', 127);
      |            ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:70:27: warning: 127 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   70 |     memset(overflow, 'A', 127);
      |                           ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:71:14: warning: 127 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   71 |     overflow[127] = '\0';
      |              ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:74:23: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
   74 |     builder.setHeader(overflow);  // BUFFER OVERFLOW!
      |                       ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:87:7: warning: class 'DataBlock' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   87 | class DataBlock {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:89:11: warning: use default member initializer for 'data' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   89 |     char* data;
      |           ^   
      |               {nullptr}
   90 |     size_t size;
   91 |     
   92 |     DataBlock() : data(nullptr), size(0) {}
      |                   ~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:90:12: warning: use default member initializer for 'size' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   90 |     size_t size;
      |            ^   
      |                {0}
   91 |     
   92 |     DataBlock() : data(nullptr), size(0) {}
      |                                  ~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:98:12: warning: use default member initializer for 'chunk_size_' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   98 |     size_t chunk_size_;
      |            ^          
      |                       {0}
   99 |     size_t chunk_count_;
  100 |     
  101 | public:
  102 |     VulnerableDataBlockBuilder() : chunk_size_(0), chunk_count_(0) {}
      |                                    ~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:99:12: warning: use default member initializer for 'chunk_count_' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   99 |     size_t chunk_count_;
      |            ^           
      |                        {0}
  100 |     
  101 | public:
  102 |     VulnerableDataBlockBuilder() : chunk_size_(0), chunk_count_(0) {}
      |                                                    ~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:104:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  104 |     VulnerableDataBlockBuilder& setChunkSize(size_t size) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                  -> VulnerableDataBlockBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:109:33: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 |     VulnerableDataBlockBuilder& setChunkCount(size_t count) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                    -> VulnerableDataBlockBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:114:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  114 |     DataBlock build() {
      |     ~~~~~~~~~ ^
      |     auto              -> DataBlock
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:114:15: warning: method 'build' can be made const [readability-make-member-function-const]
  114 |     DataBlock build() {
      |               ^
      |                       const
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:126:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
  126 |         block.data = new char[block.size];  // Может выделить МЕНЬШЕ чем ожидалось!
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:138:24: warning: '/' has higher precedence than '+'; add parentheses to explicitly specify the order of operations [readability-math-missing-parentheses]
  138 |     size_t huge_size = std::numeric_limits<size_t>::max() / 2 + 1;
      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                        (                                     )
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:157:7: warning: constructor does not initialize these fields: age, is_admin [cppcoreguidelines-pro-type-member-init]
  157 | class UserAccount {
      |       ^
  158 | public:
  159 |     std::string username;
  160 |     std::string email;
  161 |     int age;
      |            
      |            {}
  162 |     bool is_admin;
      |                  
      |                  {}
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:182:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  182 |     VulnerableUserBuilder& setUsername(const std::string& name) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                        -> VulnerableUserBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:187:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  187 |     VulnerableUserBuilder& setEmail(const std::string& email) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                      -> VulnerableUserBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:192:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     VulnerableUserBuilder& setAge(int age) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                   -> VulnerableUserBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:198:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  198 |     VulnerableUserBuilder& setAdmin(bool admin) {
      |     ~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                        -> VulnerableUserBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:204:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  204 |     UserAccount build() {
      |     ~~~~~~~~~~~ ^
      |     auto                -> UserAccount
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:206:48: warning: 150 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  206 |         if (account_.age < 0 || account_.age > 150) {
      |                                                ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:240:9: warning: use default member initializer for 'port' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  240 |     int port;
      |         ^   
      |             {0}
  241 |     std::string username;
  242 |     std::string password;
  243 |     bool is_connected;
  244 |     
  245 |     Database() : port(0), is_connected(false) {}
      |                  ~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:243:10: warning: use default member initializer for 'is_connected' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  243 |     bool is_connected;
      |          ^           
      |                      {false}
  244 |     
  245 |     Database() : port(0), is_connected(false) {}
      |                           ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:257:7: warning: class 'VulnerableDatabaseBuilder' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  257 | class VulnerableDatabaseBuilder {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:263:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'Database *' [cppcoreguidelines-owning-memory]
  263 |         db_ = new Database();
      |         ^~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:263:9: warning: 'db_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
  262 |     VulnerableDatabaseBuilder() {
      |                                 : db_(new Database())
  263 |         db_ = new Database();
      |         ^~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:266:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  266 |     VulnerableDatabaseBuilder& setHost(const std::string& host) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                        -> VulnerableDatabaseBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:271:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  271 |     VulnerableDatabaseBuilder& setPort(int port) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                         -> VulnerableDatabaseBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:276:32: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  276 |     VulnerableDatabaseBuilder& setCredentials(const std::string& user, const std::string& pass) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                                                        -> VulnerableDatabaseBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:283:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  283 |     Database* getPartial() {
      |     ~~~~~~~~~ ^
      |     auto                   -> Database*
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:287:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  287 |     Database build() {
      |     ~~~~~~~~ ^
      |     auto             -> Database
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:290:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'Database *' [cppcoreguidelines-owning-memory]
  290 |         db_ = new Database();
      |         ^~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:329:26: warning: variable name 'h' is too short, expected at least 3 characters [readability-identifier-length]
  329 |         for (const auto& h : headers) {
      |                          ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:341:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  341 |     VulnerableRequestBuilder& setMethod(const std::string& method) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                           -> VulnerableRequestBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:346:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  346 |     VulnerableRequestBuilder& setUrl(const std::string& url) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                     -> VulnerableRequestBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:351:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  351 |     VulnerableRequestBuilder& addHeader(const std::string& header) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                           -> VulnerableRequestBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:356:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  356 |     VulnerableRequestBuilder& setBody(const std::string& body) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                       -> VulnerableRequestBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:361:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  361 |     Request build() {
      |     ~~~~~~~ ^
      |     auto            -> Request
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:386:18: warning: escaped string literal can be written as a raw string literal [modernize-raw-string-literal]
  386 |         .setBody("{\"action\":\"delete\"}")
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~
      |                  R"({"action":"delete"})"
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:406:5: warning: function 'toSQL' should be marked [[nodiscard]] [modernize-use-nodiscard]
  406 |     std::string toSQL() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:406:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  406 |     std::string toSQL() const {
      |     ~~~~~~~~~~~ ^
      |     auto                      -> std::string
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:414:44: warning: statement should be inside braces [readability-braces-around-statements]
  414 |                 if (i < columns.size() - 1) sql += ", ";
      |                                            ^            
      |                                             {
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:433:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  433 |     VulnerableQueryBuilder& from(const std::string& table) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                   -> VulnerableQueryBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:438:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  438 |     VulnerableQueryBuilder& select(const std::string& column) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                      -> VulnerableQueryBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:443:29: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  443 |     VulnerableQueryBuilder& where(const std::string& condition) {
      |     ~~~~~~~~~~~~~~~~~~~~~~~ ^
      |     auto                                                        -> VulnerableQueryBuilder&
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:448:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  448 |     Query build() {
      |     ~~~~~ ^
      |     auto          -> Query
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:484:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  484 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2509:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' here
 2509 |         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
      |         ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:157:7: note: frame #8: function 'UserAccount' calls function 'basic_string' here
  157 | class UserAccount {
      |       ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:210:16: note: frame #9: function 'build' calls function 'UserAccount' here
  210 |         return account_;
      |                ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:220:20: note: frame #10: function 'demonstrateValidationBypass' calls function 'build' here
  220 |     auto account = builder
      |                    ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:501:9: note: frame #11: function 'main' calls function 'demonstrateValidationBypass' here
  501 |         demonstrateValidationBypass();
      |         ^
D:\Work\Patterns\03-creational\lesson_3_4_builder\builder_vulnerabilities.cpp:484:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  484 | int main() {
      | ~~~ ^
      | auto       -> int
Suppressed 90958 warnings (90958 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp
WARNINGS: 101
ERRORS: 0
================================================================================
106879 warnings generated.
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:20:7: warning: class 'VulnerableAdapter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class VulnerableAdapter {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:22:11: warning: use default member initializer for 'adaptedObject' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |     void* adaptedObject;
      |           ^            
      |                        {nullptr}
   23 |     size_t objectSize;
   24 |     bool isValid;
   25 |     
   26 | public:
   27 |     VulnerableAdapter() : adaptedObject(nullptr), objectSize(0), isValid(false) {
      |                           ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:23:12: warning: use default member initializer for 'objectSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |     size_t objectSize;
      |            ^         
      |                      {0}
   24 |     bool isValid;
   25 |     
   26 | public:
   27 |     VulnerableAdapter() : adaptedObject(nullptr), objectSize(0), isValid(false) {
      |                                                   ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:24:10: warning: use default member initializer for 'isValid' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |     bool isValid;
      |          ^      
      |                 {false}
   25 |     
   26 | public:
   27 |     VulnerableAdapter() : adaptedObject(nullptr), objectSize(0), isValid(false) {
      |                                                                  ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:28:58: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   28 |         std::cout << "VulnerableAdapter создан" << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:42:8: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   42 |     T* getAdapted() {
      |     ~~ ^
      |     auto            -> T*
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:52:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   52 |     void* getRawObject() {
      |     ~~~~~ ^
      |     auto                 -> void*
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:56:5: warning: function 'isValidObject' should be marked [[nodiscard]] [modernize-use-nodiscard]
   56 |     bool isValidObject() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:56:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   56 |     bool isValidObject() const {
      |     ~~~~ ^
      |     auto                       -> bool
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:61:64: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   61 |         std::cout << "VulnerableAdapter уничтожен" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:68:7: warning: class 'BufferOverflowAdapter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   68 | class BufferOverflowAdapter {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:70:11: warning: use default member initializer for 'buffer' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   70 |     char* buffer;
      |           ^     
      |                 {nullptr}
   71 |     size_t bufferSize;
   72 |     size_t currentSize;
   73 |     
   74 | public:
   75 |     BufferOverflowAdapter() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                               ~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:71:12: warning: use default member initializer for 'bufferSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   71 |     size_t bufferSize;
      |            ^         
      |                      {0}
   72 |     size_t currentSize;
   73 |     
   74 | public:
   75 |     BufferOverflowAdapter() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:72:12: warning: use default member initializer for 'currentSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   72 |     size_t currentSize;
      |            ^          
      |                       {0}
   73 |     
   74 | public:
   75 |     BufferOverflowAdapter() : buffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                               ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:76:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |         std::cout << "BufferOverflowAdapter создан" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:84:13: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   84 |             char* newBuffer = new char[bufferSize];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:85:17: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
   85 |             if (buffer) {
      |                 ^     
      |                        != nullptr
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:93:23: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
   93 |         memcpy(buffer + currentSize, data, length);
      |                       ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:98:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   98 |     char* getBuffer() {
      |     ~~~~~ ^
      |     auto              -> char*
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:102:5: warning: function 'getSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  102 |     size_t getSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:102:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  102 |     size_t getSize() const {
      |     ~~~~~~ ^
      |     auto                   -> size_t
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:108:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  108 |         std::cout << "BufferOverflowAdapter уничтожен" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:115:7: warning: class 'UseAfterFreeAdapter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  115 | class UseAfterFreeAdapter {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:117:11: warning: use default member initializer for 'adaptedObject' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  117 |     void* adaptedObject;
      |           ^            
      |                        {nullptr}
  118 |     bool isOwned;
  119 |     bool isValid;
  120 |     
  121 | public:
  122 |     UseAfterFreeAdapter() : adaptedObject(nullptr), isOwned(false), isValid(false) {
      |                             ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:118:10: warning: use default member initializer for 'isOwned' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  118 |     bool isOwned;
      |          ^      
      |                 {false}
  119 |     bool isValid;
  120 |     
  121 | public:
  122 |     UseAfterFreeAdapter() : adaptedObject(nullptr), isOwned(false), isValid(false) {
      |                                                     ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:119:10: warning: use default member initializer for 'isValid' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  119 |     bool isValid;
      |          ^      
      |                 {false}
  120 |     
  121 | public:
  122 |     UseAfterFreeAdapter() : adaptedObject(nullptr), isOwned(false), isValid(false) {
      |                                                                     ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:123:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  123 |         std::cout << "UseAfterFreeAdapter создан" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:142:24: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  142 |         if (isOwned && adaptedObject) {
      |                        ^            
      |                        (             != nullptr)
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:151:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  151 |     void* getObject() {
      |     ~~~~~ ^
      |     auto              -> void*
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:155:5: warning: function 'isObjectValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  155 |     bool isObjectValid() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:155:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  155 |     bool isObjectValid() const {
      |     ~~~~ ^
      |     auto                       -> bool
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:160:24: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  160 |         if (isOwned && adaptedObject) {
      |                        ^            
      |                        (             != nullptr)
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:163:66: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  163 |         std::cout << "UseAfterFreeAdapter уничтожен" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:170:7: warning: class 'IntegerOverflowAdapter' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  170 | class IntegerOverflowAdapter {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:173:12: warning: use default member initializer for 'totalSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  173 |     size_t totalSize;
      |            ^        
      |                     {0}
  174 |     
  175 | public:
  176 |     IntegerOverflowAdapter() : totalSize(0) {
      |                                ~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:177:63: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  177 |         std::cout << "IntegerOverflowAdapter создан" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:189:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  189 |             std::cout << "Добавлен размер: " << size << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:194:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  194 |     void* createAdaptedObject() {
      |     ~~~~~ ^
      |     auto                        -> void*
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:194:11: warning: method 'createAdaptedObject' can be made const [readability-make-member-function-const]
  194 |     void* createAdaptedObject() {
      |           ^
      |                                 const
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:196:9: warning: returning a newly created resource of type 'void *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  196 |         return new char[totalSize];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:199:5: warning: function 'getTotalSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  199 |     size_t getTotalSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:199:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  199 |     size_t getTotalSize() const {
      |     ~~~~~~ ^
      |     auto                        -> size_t
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:203:5: warning: function 'getSizeCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  203 |     size_t getSizeCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:203:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     size_t getSizeCount() const {
      |     ~~~~~~ ^
      |     auto                        -> size_t
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:208:69: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  208 |         std::cout << "IntegerOverflowAdapter уничтожен" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:217:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  217 |     std::cout << "\n=== Демонстрация Type Confusion ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:222:5: warning: initializing non-owner 'int *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  222 |     int* intObj = new int(42);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:222:27: warning: 42 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  222 |     int* intObj = new int(42);
      |                           ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:225:63: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  225 |     std::cout << "Адаптирован int объект" << std::endl;
      |                                              ^~~~~~~~~
      |                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:229:9: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  229 |     if (charObj) {
      |         ^      
      |                 != nullptr
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:230:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  230 |         std::cout << "Получен как char: " << *charObj << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:234:21: warning: redundant explicit casting to the same type 'void **' as the sub-expression, remove this casting [readability-redundant-casting]
  234 |     void** ptrObj = static_cast<void**>(adapter.getAdapted<void*>());
      |                     ^~~~~~~~~~~~~~~~~~~~                           ~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:42:8: note: source type originates from the invocation of this method
   42 |     T* getAdapted() {
      |     ~~ ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:235:9: warning: implicit conversion 'void **' -> 'bool' [readability-implicit-bool-conversion]
  235 |     if (ptrObj) {
      |         ^     
      |                != nullptr
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:236:70: warning: multilevel pointer conversion from 'void **' to 'const void *', please use explicit cast [bugprone-multi-level-implicit-pointer-conversion]
  236 |         std::cout << "Получен как указатель: " << ptrObj << std::endl;
      |                                                   ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:236:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  236 |         std::cout << "Получен как указатель: " << ptrObj << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:239:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  239 |     delete intObj;
      |     ^      ~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:222:5: note: variable declared here
  222 |     int* intObj = new int(42);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:243:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  243 |     std::cout << "\n=== Демонстрация Buffer Overflow ===" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:248:32: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  248 |     adapter.adaptData("Hello", 5);
      |                                ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:249:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  249 |     std::cout << "Адаптированы данные размером 5 байт" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:252:27: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  252 |     std::string largeData(1000000, 'A');
      |                           ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:254:116: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  254 |     std::cout << "Адаптированы большие данные размером: " << adapter.getSize() << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:258:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  258 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:263:5: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  263 |     char* obj = new char[1024];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:263:26: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  263 |     char* obj = new char[1024];
      |                          ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:264:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  264 |     strcpy(obj, "Adapted object data");
      |     ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:264:5: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  264 |     strcpy(obj, "Adapted object data");
      |     ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:264:5: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  264 |     strcpy(obj, "Adapted object data");
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:268:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  268 |     std::cout << "Объект адаптирован с передачей владения" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:272:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  272 |     std::cout << "Объект освобожден" << std::endl;
      |                                         ^~~~~~~~~
      |                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:276:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  276 |     if (danglingObj) {
      |         ^          
      |                     != nullptr
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:277:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  277 |         std::cout << "Объект все еще доступен (dangling pointer)" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:278:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  278 |         std::cout << "Валидность: " << (adapter.isObjectValid() ? "Да" : "Нет") << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:283:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  283 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:288:21: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  288 |     adapter.addSize(100);
      |                     ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:289:21: warning: 200 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  289 |     adapter.addSize(200);
      |                     ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:290:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  290 |     std::cout << "Общий размер: " << adapter.getTotalSize() << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:293:35: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  293 |     size_t largeSize = SIZE_MAX - 100;
      |                                   ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:295:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  295 |     std::cout << "Общий размер после overflow: " << adapter.getTotalSize() << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:299:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  299 |     if (obj) {
      |         ^  
      |             != nullptr
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:300:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  300 |         std::cout << "Объект создан (возможно из-за overflow)" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:301:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  301 |         delete[] static_cast<char*>(obj);
      |         ^                           ~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:298:5: note: variable declared here
  298 |     void* obj = adapter.createAdaptedObject();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:310:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  310 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:311:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  311 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:312:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  312 |     std::cout << "   clang --analyze adapter_vulnerabilities.cpp" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:313:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  313 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:314:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  314 |     std::cout << "   cppcheck --enable=all adapter_vulnerabilities.cpp" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:315:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  315 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:316:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  316 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:320:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  320 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:321:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  321 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:322:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  322 |     std::cout << "   g++ -fsanitize=address -g adapter_vulnerabilities.cpp -o adapter_asan" << std::endl;
      |                                                                                                ^~~~~~~~~
      |                                                                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:323:41: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  323 |     std::cout << "   ./adapter_asan" << std::endl;
      |                                         ^~~~~~~~~
      |                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:324:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  324 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:325:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  325 |     std::cout << "   g++ -fsanitize=memory -g adapter_vulnerabilities.cpp -o adapter_msan" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:326:41: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  326 |     std::cout << "   ./adapter_msan" << std::endl;
      |                                         ^~~~~~~~~
      |                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:327:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  327 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:328:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  328 |     std::cout << "   valgrind --tool=memcheck ./adapter_vulnerabilities" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:335:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  335 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2574:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' here
 2574 |         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
      |         ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:252:17: note: frame #8: function 'demonstrateBufferOverflow' calls function 'basic_string' here
  252 |     std::string largeData(1000000, 'A');
      |                 ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:340:5: note: frame #9: function 'main' calls function 'demonstrateBufferOverflow' here
  340 |     demonstrateBufferOverflow();
      |     ^
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:335:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  335 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:336:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  336 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ ADAPTER ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:348:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  348 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_1_adapter\adapter_vulnerabilities.cpp:349:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  349 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106759 warnings (106759 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp
WARNINGS: 110
ERRORS: 0
================================================================================
106915 warnings generated.
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:20:7: warning: class 'VulnerableDecorator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class VulnerableDecorator {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:22:26: warning: use default member initializer for 'next' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |     VulnerableDecorator* next;
      |                          ^   
      |                              {nullptr}
   23 |     char* data;
   24 |     size_t dataSize;
   25 |     
   26 | public:
   27 |     VulnerableDecorator() : next(nullptr), data(nullptr), dataSize(0) {
      |                             ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:23:11: warning: use default member initializer for 'data' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |     char* data;
      |           ^   
      |               {nullptr}
   24 |     size_t dataSize;
   25 |     
   26 | public:
   27 |     VulnerableDecorator() : next(nullptr), data(nullptr), dataSize(0) {
      |                                            ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:24:12: warning: use default member initializer for 'dataSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |     size_t dataSize;
      |            ^       
      |                    {0}
   25 |     
   26 | public:
   27 |     VulnerableDecorator() : next(nullptr), data(nullptr), dataSize(0) {
      |                                                           ~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:28:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   28 |         std::cout << "VulnerableDecorator создан" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:33:13: warning: implicit conversion 'VulnerableDecorator *' -> 'bool' [readability-implicit-bool-conversion]
   33 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:44:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
   44 |         data = new char[dataSize];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:51:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   51 |         std::cout << "Обработка декоратора" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:52:13: warning: implicit conversion 'VulnerableDecorator *' -> 'bool' [readability-implicit-bool-conversion]
   52 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:58:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   58 |     char* getData() {
      |     ~~~~~ ^
      |     auto            -> char*
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:65:66: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   65 |         std::cout << "VulnerableDecorator уничтожен" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:72:7: warning: class 'LeakyDecorator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   72 | class LeakyDecorator {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:74:21: warning: use default member initializer for 'next' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   74 |     LeakyDecorator* next;
      |                     ^   
      |                         {nullptr}
   75 |     std::vector<void*> allocatedMemory;
   76 |     
   77 | public:
   78 |     LeakyDecorator() : next(nullptr) {
      |                        ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:79:55: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   79 |         std::cout << "LeakyDecorator создан" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:89:33: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   89 |         void* memory = new char[1024];
      |                                 ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:92:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   92 |         if (allocatedMemory.size() > 1000) {
      |                                      ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:99:13: warning: implicit conversion 'LeakyDecorator *' -> 'bool' [readability-implicit-bool-conversion]
   99 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:106:30: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  106 |             memset(mem, 'A', 1024);
      |                              ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:113:13: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  113 |             delete[] static_cast<char*>(mem);
      |             ^                           ~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:112:14: note: variable declared here
  112 |         for (void* mem : allocatedMemory) {
      |              ^~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:116:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  116 |         std::cout << "LeakyDecorator уничтожен" << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:123:7: warning: class 'UseAfterFreeDecorator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  123 | class UseAfterFreeDecorator {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:125:28: warning: use default member initializer for 'next' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  125 |     UseAfterFreeDecorator* next;
      |                            ^   
      |                                {nullptr}
  126 |     char* data;
  127 |     bool isValid;
  128 |     
  129 | public:
  130 |     UseAfterFreeDecorator() : next(nullptr), data(nullptr), isValid(false) {
      |                               ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:126:11: warning: use default member initializer for 'data' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  126 |     char* data;
      |           ^   
      |               {nullptr}
  127 |     bool isValid;
  128 |     
  129 | public:
  130 |     UseAfterFreeDecorator() : next(nullptr), data(nullptr), isValid(false) {
      |                                              ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:127:10: warning: use default member initializer for 'isValid' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  127 |     bool isValid;
      |          ^      
      |                 {false}
  128 |     
  129 | public:
  130 |     UseAfterFreeDecorator() : next(nullptr), data(nullptr), isValid(false) {
      |                                                             ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:131:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  131 |         std::cout << "UseAfterFreeDecorator создан" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:135:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
  135 |         data = new char[strlen(str) + 1];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:136:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  136 |         strcpy(data, str);
      |         ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:136:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  136 |         strcpy(data, str);
      |         ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:136:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  136 |         strcpy(data, str);
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:153:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  153 |     char* getData() {
      |     ~~~~~ ^
      |     auto            -> char*
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:157:5: warning: function 'isDataValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  157 |     bool isDataValid() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:157:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  157 |     bool isDataValid() const {
      |     ~~~~ ^
      |     auto                     -> bool
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:162:13: warning: implicit conversion 'UseAfterFreeDecorator *' -> 'bool' [readability-implicit-bool-conversion]
  162 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:166:24: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  166 |         if (isValid && data) {
      |                        ^   
      |                        (    != nullptr)
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:167:54: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  167 |             std::cout << "Данные: " << data << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:174:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  174 |         std::cout << "UseAfterFreeDecorator уничтожен" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:181:7: warning: class 'IntegerOverflowDecorator' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  181 | class IntegerOverflowDecorator {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:183:31: warning: use default member initializer for 'next' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  183 |     IntegerOverflowDecorator* next;
      |                               ^   
      |                                   {nullptr}
  184 |     size_t decoratorCount;
  185 |     
  186 | public:
  187 |     IntegerOverflowDecorator() : next(nullptr), decoratorCount(1) {
      |                                  ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:184:12: warning: use default member initializer for 'decoratorCount' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  184 |     size_t decoratorCount;
      |            ^             
      |                          {1}
  185 |     
  186 | public:
  187 |     IntegerOverflowDecorator() : next(nullptr), decoratorCount(1) {
      |                                                 ~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:188:65: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  188 |         std::cout << "IntegerOverflowDecorator создан" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:193:13: warning: implicit conversion 'IntegerOverflowDecorator *' -> 'bool' [readability-implicit-bool-conversion]
  193 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:204:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  204 |             std::cout << "Количество декораторов: " << decoratorCount << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:212:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  212 |             std::cout << "Обработка декоратора " << i << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:215:13: warning: implicit conversion 'IntegerOverflowDecorator *' -> 'bool' [readability-implicit-bool-conversion]
  215 |         if (next) {
      |             ^   
      |                  != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:220:5: warning: function 'getDecoratorCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  220 |     size_t getDecoratorCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:220:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  220 |     size_t getDecoratorCount() const {
      |     ~~~~~~ ^
      |     auto                             -> size_t
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:226:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  226 |         std::cout << "IntegerOverflowDecorator уничтожен" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:235:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  235 |     std::cout << "\n=== Демонстрация Stack Overflow ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:237:5: warning: initializing non-owner 'VulnerableDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  237 |     VulnerableDecorator* root = new VulnerableDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:237:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  237 |     VulnerableDecorator* root = new VulnerableDecorator();
      |     ^~~~~~~~~~~~~~~~~~~
      |     auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:240:25: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  240 |     for (int i = 0; i < 1000; ++i) {
      |                         ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:241:9: warning: initializing non-owner 'VulnerableDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  241 |         VulnerableDecorator* decorator = new VulnerableDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:241:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  241 |         VulnerableDecorator* decorator = new VulnerableDecorator();
      |         ^~~~~~~~~~~~~~~~~~~
      |         auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:242:41: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  242 |         decorator->setData("Test data", 9);
      |                                         ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:246:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  246 |     std::cout << "Создана цепочка из 1000 декораторов" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:252:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  252 |         std::cout << "Произошло исключение (возможно stack overflow)" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:255:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  255 |     delete root;
      |     ^      ~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:237:5: note: variable declared here
  237 |     VulnerableDecorator* root = new VulnerableDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:259:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  259 |     std::cout << "\n=== Демонстрация Memory Leak ===" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:261:5: warning: initializing non-owner 'LeakyDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  261 |     LeakyDecorator* root = new LeakyDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:261:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  261 |     LeakyDecorator* root = new LeakyDecorator();
      |     ^~~~~~~~~~~~~~
      |     auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:265:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  265 |         for (int i = 0; i < 100; ++i) {
      |                             ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:266:13: warning: initializing non-owner 'LeakyDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  266 |             LeakyDecorator* decorator = new LeakyDecorator();
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:266:13: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  266 |             LeakyDecorator* decorator = new LeakyDecorator();
      |             ^~~~~~~~~~~~~~
      |             auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:270:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  270 |         std::cout << "Создана цепочка декораторов" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:273:9: warning: initializing non-owner 'LeakyDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  273 |         LeakyDecorator* leakyDecorator = new LeakyDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:273:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  273 |         LeakyDecorator* leakyDecorator = new LeakyDecorator();
      |         ^~~~~~~~~~~~~~
      |         auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:277:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  277 |         std::cout << "Исключение: " << e.what() << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:278:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  278 |         std::cout << "Память может быть утеряна!" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:281:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  281 |     delete root;
      |     ^      ~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:261:5: note: variable declared here
  261 |     LeakyDecorator* root = new LeakyDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:285:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  285 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:287:5: warning: initializing non-owner 'UseAfterFreeDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  287 |     UseAfterFreeDecorator* root = new UseAfterFreeDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:287:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  287 |     UseAfterFreeDecorator* root = new UseAfterFreeDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~
      |     auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:290:5: warning: initializing non-owner 'UseAfterFreeDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  290 |     UseAfterFreeDecorator* decorator = new UseAfterFreeDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:290:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  290 |     UseAfterFreeDecorator* decorator = new UseAfterFreeDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~
      |     auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:297:59: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  297 |     std::cout << "Данные освобождены" << std::endl;
      |                                          ^~~~~~~~~
      |                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:301:9: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  301 |     if (data) {
      |         ^   
      |              != nullptr
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:302:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  302 |         std::cout << "Данные все еще доступны (dangling pointer)" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:303:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  303 |         std::cout << "Валидность: " << (root->isDataValid() ? "Да" : "Нет") << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:306:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  306 |     delete root;
      |     ^      ~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:287:5: note: variable declared here
  287 |     UseAfterFreeDecorator* root = new UseAfterFreeDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:310:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  310 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:312:5: warning: initializing non-owner 'IntegerOverflowDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  312 |     IntegerOverflowDecorator* root = new IntegerOverflowDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:312:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  312 |     IntegerOverflowDecorator* root = new IntegerOverflowDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~
      |     auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:315:25: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  315 |     for (int i = 0; i < 100; ++i) {
      |                         ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:316:9: warning: initializing non-owner 'IntegerOverflowDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  316 |         IntegerOverflowDecorator* decorator = new IntegerOverflowDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:316:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  316 |         IntegerOverflowDecorator* decorator = new IntegerOverflowDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:320:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  320 |     std::cout << "Количество декораторов: " << root->getDecoratorCount() << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:323:36: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  323 |     size_t largeCount = SIZE_MAX - 100;
      |                                    ^
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:325:9: warning: initializing non-owner 'IntegerOverflowDecorator *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  325 |         IntegerOverflowDecorator* decorator = new IntegerOverflowDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:325:9: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
  325 |         IntegerOverflowDecorator* decorator = new IntegerOverflowDecorator();
      |         ^~~~~~~~~~~~~~~~~~~~~~~~
      |         auto
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:329:118: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  329 |     std::cout << "Количество декораторов после overflow: " << root->getDecoratorCount() << std::endl;
      |                                                                                            ^~~~~~~~~
      |                                                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:331:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  331 |     delete root;
      |     ^      ~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:312:5: note: variable declared here
  312 |     IntegerOverflowDecorator* root = new IntegerOverflowDecorator();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:339:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  339 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:340:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  340 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:341:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  341 |     std::cout << "   clang --analyze decorator_vulnerabilities.cpp" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:342:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  342 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:343:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  343 |     std::cout << "   cppcheck --enable=all decorator_vulnerabilities.cpp" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:344:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  344 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:345:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  345 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:349:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  349 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:350:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  350 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:351:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  351 |     std::cout << "   g++ -fsanitize=address -g decorator_vulnerabilities.cpp -o decorator_asan" << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:352:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  352 |     std::cout << "   ./decorator_asan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:353:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  353 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:354:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  354 |     std::cout << "   g++ -fsanitize=memory -g decorator_vulnerabilities.cpp -o decorator_msan" << std::endl;
      |                                                                                                   ^~~~~~~~~
      |                                                                                                   '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:355:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  355 |     std::cout << "   ./decorator_msan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:356:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  356 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:357:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  357 |     std::cout << "   valgrind --tool=memcheck ./decorator_vulnerabilities" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:364:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  364 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:365:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  365 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ DECORATOR ===" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:377:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  377 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_2_decorator\decorator_vulnerabilities.cpp:378:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  378 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106788 warnings (106788 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp
WARNINGS: 123
ERRORS: 0
================================================================================
106779 warnings generated.
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:20:7: warning: class 'VulnerableFacade' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class VulnerableFacade {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:22:11: warning: use default member initializer for 'subsystem1' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |     void* subsystem1;
      |           ^         
      |                     {nullptr}
   23 |     void* subsystem2;
   24 |     void* subsystem3;
   25 |     char* sensitiveData;
   26 |     size_t dataSize;
   27 |     
   28 | public:
   29 |     VulnerableFacade() : subsystem1(nullptr), subsystem2(nullptr), subsystem3(nullptr), 
      |                          ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:23:11: warning: use default member initializer for 'subsystem2' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |     void* subsystem2;
      |           ^         
      |                     {nullptr}
   24 |     void* subsystem3;
   25 |     char* sensitiveData;
   26 |     size_t dataSize;
   27 |     
   28 | public:
   29 |     VulnerableFacade() : subsystem1(nullptr), subsystem2(nullptr), subsystem3(nullptr), 
      |                                               ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:24:11: warning: use default member initializer for 'subsystem3' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |     void* subsystem3;
      |           ^         
      |                     {nullptr}
   25 |     char* sensitiveData;
   26 |     size_t dataSize;
   27 |     
   28 | public:
   29 |     VulnerableFacade() : subsystem1(nullptr), subsystem2(nullptr), subsystem3(nullptr), 
      |                                                                    ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:25:11: warning: use default member initializer for 'sensitiveData' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   25 |     char* sensitiveData;
      |           ^            
      |                        {nullptr}
   26 |     size_t dataSize;
   27 |     
   28 | public:
   29 |     VulnerableFacade() : subsystem1(nullptr), subsystem2(nullptr), subsystem3(nullptr), 
   30 |                         sensitiveData(nullptr), dataSize(0) {
      |                         ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:26:12: warning: use default member initializer for 'dataSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   26 |     size_t dataSize;
      |            ^       
      |                    {0}
   27 |     
   28 | public:
   29 |     VulnerableFacade() : subsystem1(nullptr), subsystem2(nullptr), subsystem3(nullptr), 
   30 |                         sensitiveData(nullptr), dataSize(0) {
      |                                                 ~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:31:57: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   31 |         std::cout << "VulnerableFacade создан" << std::endl;
      |                                                   ^~~~~~~~~
      |                                                   '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:37:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
   37 |         subsystem1 = new char[1024];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:37:31: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   37 |         subsystem1 = new char[1024];
      |                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:38:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
   38 |         subsystem2 = new char[2048];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:38:31: warning: 2048 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   38 |         subsystem2 = new char[2048];
      |                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:39:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
   39 |         subsystem3 = new char[4096];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:39:31: warning: 4096 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   39 |         subsystem3 = new char[4096];
      |                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:42:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
   42 |         sensitiveData = new char[512];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:42:34: warning: 512 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   42 |         sensitiveData = new char[512];
      |                                  ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:43:9: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   43 |         strcpy(sensitiveData, "Sensitive password: admin123");
      |         ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:43:9: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   43 |         strcpy(sensitiveData, "Sensitive password: admin123");
      |         ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:43:9: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   43 |         strcpy(sensitiveData, "Sensitive password: admin123");
      |         ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:48:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   48 |     char* getSensitiveData() {
      |     ~~~~~ ^
      |     auto                     -> char*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:54:13: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
   54 |         if (subsystem1) {
      |             ^         
      |                        != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:59:13: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
   59 |         if (subsystem2) {
      |             ^         
      |                        != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:61:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   61 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:61:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   61 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:61:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   61 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:64:13: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
   64 |         if (subsystem3) {
      |             ^         
      |                        != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:71:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   71 |     void* getSubsystem1() { return subsystem1; }
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:72:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   72 |     void* getSubsystem2() { return subsystem2; }
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:73:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   73 |     void* getSubsystem3() { return subsystem3; }
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:80:63: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   80 |         std::cout << "VulnerableFacade уничтожен" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:87:7: warning: class 'BufferOverflowFacade' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   87 | class BufferOverflowFacade {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:89:11: warning: use default member initializer for 'requestBuffer' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   89 |     char* requestBuffer;
      |           ^            
      |                        {nullptr}
   90 |     size_t bufferSize;
   91 |     size_t currentSize;
   92 |     
   93 | public:
   94 |     BufferOverflowFacade() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                              ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:90:12: warning: use default member initializer for 'bufferSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   90 |     size_t bufferSize;
      |            ^         
      |                      {0}
   91 |     size_t currentSize;
   92 |     
   93 | public:
   94 |     BufferOverflowFacade() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                      ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:91:12: warning: use default member initializer for 'currentSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   91 |     size_t currentSize;
      |            ^          
      |                       {0}
   92 |     
   93 | public:
   94 |     BufferOverflowFacade() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                                     ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:95:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |         std::cout << "BufferOverflowFacade создан" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:103:13: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  103 |             char* newBuffer = new char[bufferSize];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:104:17: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  104 |             if (requestBuffer) {
      |                 ^            
      |                               != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:112:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  112 |         memcpy(requestBuffer + currentSize, request, length);
      |                              ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:117:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  117 |     char* getRequestBuffer() {
      |     ~~~~~ ^
      |     auto                     -> char*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:121:5: warning: function 'getBufferSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  121 |     size_t getBufferSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:121:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  121 |     size_t getBufferSize() const {
      |     ~~~~~~ ^
      |     auto                         -> size_t
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:125:5: warning: function 'getCurrentSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  125 |     size_t getCurrentSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:125:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  125 |     size_t getCurrentSize() const {
      |     ~~~~~~ ^
      |     auto                          -> size_t
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:131:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  131 |         std::cout << "BufferOverflowFacade уничтожен" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:138:7: warning: class 'UseAfterFreeFacade' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  138 | class UseAfterFreeFacade {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:140:11: warning: use default member initializer for 'subsystem1' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  140 |     void* subsystem1;
      |           ^         
      |                     {nullptr}
  141 |     void* subsystem2;
  142 |     bool isValid;
  143 |     
  144 | public:
  145 |     UseAfterFreeFacade() : subsystem1(nullptr), subsystem2(nullptr), isValid(false) {
      |                            ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:141:11: warning: use default member initializer for 'subsystem2' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  141 |     void* subsystem2;
      |           ^         
      |                     {nullptr}
  142 |     bool isValid;
  143 |     
  144 | public:
  145 |     UseAfterFreeFacade() : subsystem1(nullptr), subsystem2(nullptr), isValid(false) {
      |                                                 ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:142:10: warning: use default member initializer for 'isValid' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  142 |     bool isValid;
      |          ^      
      |                 {false}
  143 |     
  144 | public:
  145 |     UseAfterFreeFacade() : subsystem1(nullptr), subsystem2(nullptr), isValid(false) {
      |                                                                      ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:146:59: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  146 |         std::cout << "UseAfterFreeFacade создан" << std::endl;
      |                                                     ^~~~~~~~~
      |                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:150:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
  150 |         subsystem1 = new char[1024];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:150:31: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  150 |         subsystem1 = new char[1024];
      |                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:151:9: warning: assigning newly created 'gsl::owner<>' to non-owner 'void *' [cppcoreguidelines-owning-memory]
  151 |         subsystem2 = new char[2048];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:151:31: warning: 2048 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  151 |         subsystem2 = new char[2048];
      |                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:163:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  163 |     void* getSubsystem1() {
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:167:5: warning: function 'isSubsystem1Valid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  167 |     bool isSubsystem1Valid() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:167:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  167 |     bool isSubsystem1Valid() const {
      |     ~~~~ ^
      |     auto                           -> bool
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:172:24: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  172 |         if (isValid && subsystem1) {
      |                        ^         
      |                        (          != nullptr)
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:174:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  174 |             strcpy(static_cast<char*>(subsystem1), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:174:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  174 |             strcpy(static_cast<char*>(subsystem1), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:174:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  174 |             strcpy(static_cast<char*>(subsystem1), request);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:177:13: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  177 |         if (subsystem2) {
      |             ^         
      |                        != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:178:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  178 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:178:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  178 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:178:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  178 |             strcpy(static_cast<char*>(subsystem2), request);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:185:65: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  185 |         std::cout << "UseAfterFreeFacade уничтожен" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:192:7: warning: class 'IntegerOverflowFacade' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  192 | class IntegerOverflowFacade {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:194:12: warning: use default member initializer for 'requestCount' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  194 |     size_t requestCount;
      |            ^           
      |                        {0}
  195 |     size_t maxRequests;
  196 |     
  197 | public:
  198 |     IntegerOverflowFacade() : requestCount(0), maxRequests(1000) {
      |                               ~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:195:12: warning: use default member initializer for 'maxRequests' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  195 |     size_t maxRequests;
      |            ^          
      |                       {1000}
  196 |     
  197 | public:
  198 |     IntegerOverflowFacade() : requestCount(0), maxRequests(1000) {
      |                                                ~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:198:60: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  198 |     IntegerOverflowFacade() : requestCount(0), maxRequests(1000) {
      |                                                            ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:199:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  199 |         std::cout << "IntegerOverflowFacade создан" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:203:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  203 |     bool processRequest(const char* request) {
      |     ~~~~ ^
      |     auto                                     -> bool
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:209:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  209 |             std::cout << "Обработка запроса " << requestCount << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:213:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  213 |         std::cout << "Превышено максимальное количество запросов" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:218:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  218 |     void* createBuffer() {
      |     ~~~~~ ^
      |     auto                 -> void*
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:218:11: warning: method 'createBuffer' can be made const [readability-make-member-function-const]
  218 |     void* createBuffer() {
      |           ^
      |                          const
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:220:9: warning: returning a newly created resource of type 'void *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  220 |         return new char[requestCount];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:223:5: warning: function 'getRequestCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  223 |     size_t getRequestCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:223:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  223 |     size_t getRequestCount() const {
      |     ~~~~~~ ^
      |     auto                           -> size_t
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:227:5: warning: function 'getMaxRequests' should be marked [[nodiscard]] [modernize-use-nodiscard]
  227 |     size_t getMaxRequests() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:227:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  227 |     size_t getMaxRequests() const {
      |     ~~~~~~ ^
      |     auto                          -> size_t
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:232:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  232 |         std::cout << "IntegerOverflowFacade уничтожен" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:241:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  241 |     std::cout << "\n=== Демонстрация Information Disclosure ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:248:9: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  248 |     if (sensitiveData) {
      |         ^            
      |                       != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:249:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  249 |         std::cout << "Получены чувствительные данные: " << sensitiveData << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:257:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  257 |     std::cout << "Получен доступ к подсистемам:" << std::endl;
      |                                                     ^~~~~~~~~
      |                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:258:50: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  258 |     std::cout << "Subsystem1: " << subsystem1 << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:259:50: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  259 |     std::cout << "Subsystem2: " << subsystem2 << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:260:50: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  260 |     std::cout << "Subsystem3: " << subsystem3 << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:264:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  264 |     std::cout << "\n=== Демонстрация Buffer Overflow ===" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:269:36: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  269 |     facade.processRequest("Hello", 5);
      |                                    ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:270:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  270 |     std::cout << "Обработан запрос размером 5 байт" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:273:30: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  273 |     std::string largeRequest(1000000, 'A');
      |                              ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:276:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  276 |     std::cout << "Обработан запрос размером: " << facade.getCurrentSize() << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:277:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  277 |     std::cout << "Размер буфера: " << facade.getBufferSize() << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:281:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  281 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:288:69: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  288 |     std::cout << "Подсистема 1 освобождена" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:292:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  292 |     if (subsystem1) {
      |         ^         
      |                    != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:293:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  293 |         std::cout << "Подсистема 1 все еще доступна (dangling pointer)" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:294:102: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  294 |         std::cout << "Валидность: " << (facade.isSubsystem1Valid() ? "Да" : "Нет") << std::endl;
      |                                                                                       ^~~~~~~~~
      |                                                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:302:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  302 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:307:25: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |     for (int i = 0; i < 100; ++i) {
      |                         ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:311:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  311 |     std::cout << "Количество запросов: " << facade.getRequestCount() << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:314:36: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  314 |     size_t largeCount = SIZE_MAX - 100;
      |                                    ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:319:111: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  319 |     std::cout << "Количество запросов после overflow: " << facade.getRequestCount() << std::endl;
      |                                                                                        ^~~~~~~~~
      |                                                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:323:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  323 |     if (buffer) {
      |         ^     
      |                != nullptr
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:324:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  324 |         std::cout << "Буфер создан (возможно из-за overflow)" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:325:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  325 |         delete[] static_cast<char*>(buffer);
      |         ^                           ~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:322:5: note: variable declared here
  322 |     void* buffer = facade.createBuffer();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:334:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  334 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:335:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  335 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:336:69: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  336 |     std::cout << "   clang --analyze facade_vulnerabilities.cpp" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:337:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  337 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:338:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  338 |     std::cout << "   cppcheck --enable=all facade_vulnerabilities.cpp" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:339:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  339 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:340:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  340 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:344:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  344 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:345:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  345 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:346:94: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  346 |     std::cout << "   g++ -fsanitize=address -g facade_vulnerabilities.cpp -o facade_asan" << std::endl;
      |                                                                                              ^~~~~~~~~
      |                                                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:347:40: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  347 |     std::cout << "   ./facade_asan" << std::endl;
      |                                        ^~~~~~~~~
      |                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:348:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  348 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:349:93: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  349 |     std::cout << "   g++ -fsanitize=memory -g facade_vulnerabilities.cpp -o facade_msan" << std::endl;
      |                                                                                             ^~~~~~~~~
      |                                                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:350:40: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  350 |     std::cout << "   ./facade_msan" << std::endl;
      |                                        ^~~~~~~~~
      |                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:351:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  351 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:352:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  352 |     std::cout << "   valgrind --tool=memcheck ./facade_vulnerabilities" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:359:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  359 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2574:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' here
 2574 |         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
      |         ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:273:17: note: frame #8: function 'demonstrateBufferOverflow' calls function 'basic_string' here
  273 |     std::string largeRequest(1000000, 'A');
      |                 ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:364:5: note: frame #9: function 'main' calls function 'demonstrateBufferOverflow' here
  364 |     demonstrateBufferOverflow();
      |     ^
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:359:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  359 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:360:94: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  360 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ FACADE ===" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:372:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  372 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_3_facade\facade_vulnerabilities.cpp:373:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  373 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106632 warnings (106632 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp
WARNINGS: 116
ERRORS: 0
================================================================================
106764 warnings generated.
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:20:7: warning: class 'VulnerableProxy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class VulnerableProxy {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:22:11: warning: use default member initializer for 'realObject' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   22 |     void* realObject;
      |           ^         
      |                     {nullptr}
   23 |     char* username;
   24 |     char* password;
   25 |     bool isAuthenticated;
   26 |     
   27 | public:
   28 |     VulnerableProxy() : realObject(nullptr), username(nullptr), password(nullptr), isAuthenticated(false) {
      |                         ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:23:11: warning: use default member initializer for 'username' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   23 |     char* username;
      |           ^       
      |                   {nullptr}
   24 |     char* password;
   25 |     bool isAuthenticated;
   26 |     
   27 | public:
   28 |     VulnerableProxy() : realObject(nullptr), username(nullptr), password(nullptr), isAuthenticated(false) {
      |                                              ~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:24:11: warning: use default member initializer for 'password' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   24 |     char* password;
      |           ^       
      |                   {nullptr}
   25 |     bool isAuthenticated;
   26 |     
   27 | public:
   28 |     VulnerableProxy() : realObject(nullptr), username(nullptr), password(nullptr), isAuthenticated(false) {
      |                                                                 ~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:25:10: warning: use default member initializer for 'isAuthenticated' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   25 |     bool isAuthenticated;
      |          ^              
      |                         {false}
   26 |     
   27 | public:
   28 |     VulnerableProxy() : realObject(nullptr), username(nullptr), password(nullptr), isAuthenticated(false) {
      |                                                                                    ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:29:56: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   29 |         std::cout << "VulnerableProxy создан" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:33:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   33 |     bool authenticate(const char* user, const char* pass) {
      |     ~~~~ ^
      |     auto                                                  -> bool
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:37:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
   37 |             username = new char[strlen(user) + 1];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:38:13: warning: assigning newly created 'gsl::owner<>' to non-owner 'char *' [cppcoreguidelines-owning-memory]
   38 |             password = new char[strlen(pass) + 1];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:39:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   39 |             strcpy(username, user);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:39:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   39 |             strcpy(username, user);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:39:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   39 |             strcpy(username, user);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:40:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
   40 |             strcpy(password, pass);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:40:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
   40 |             strcpy(password, pass);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:40:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
   40 |             strcpy(password, pass);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:47:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   47 |     void* getRealObject() {
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:60:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   60 |     char* getUsername() {
      |     ~~~~~ ^
      |     auto                -> char*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:64:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   64 |     char* getPassword() {
      |     ~~~~~ ^
      |     auto                -> char*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:68:5: warning: function 'isAuth' should be marked [[nodiscard]] [modernize-use-nodiscard]
   68 |     bool isAuth() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:68:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   68 |     bool isAuth() const {
      |     ~~~~ ^
      |     auto                -> bool
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:75:62: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   75 |         std::cout << "VulnerableProxy уничтожен" << std::endl;
      |                                                     ^~~~~~~~~
      |                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:82:7: warning: class 'BufferOverflowProxy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   82 | class BufferOverflowProxy {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:84:11: warning: use default member initializer for 'requestBuffer' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   84 |     char* requestBuffer;
      |           ^            
      |                        {nullptr}
   85 |     size_t bufferSize;
   86 |     size_t currentSize;
   87 |     
   88 | public:
   89 |     BufferOverflowProxy() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                             ~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:85:12: warning: use default member initializer for 'bufferSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   85 |     size_t bufferSize;
      |            ^         
      |                      {0}
   86 |     size_t currentSize;
   87 |     
   88 | public:
   89 |     BufferOverflowProxy() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                     ~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:86:12: warning: use default member initializer for 'currentSize' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
   86 |     size_t currentSize;
      |            ^          
      |                       {0}
   87 |     
   88 | public:
   89 |     BufferOverflowProxy() : requestBuffer(nullptr), bufferSize(0), currentSize(0) {
      |                                                                    ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |         std::cout << "BufferOverflowProxy создан" << std::endl;
      |                                                      ^~~~~~~~~
      |                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:98:13: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   98 |             char* newBuffer = new char[bufferSize];
      |             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:99:17: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
   99 |             if (requestBuffer) {
      |                 ^            
      |                               != nullptr
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:107:30: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
  107 |         memcpy(requestBuffer + currentSize, request, length);
      |                              ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:112:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  112 |     char* getRequestBuffer() {
      |     ~~~~~ ^
      |     auto                     -> char*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:116:5: warning: function 'getBufferSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  116 |     size_t getBufferSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:116:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  116 |     size_t getBufferSize() const {
      |     ~~~~~~ ^
      |     auto                         -> size_t
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:120:5: warning: function 'getCurrentSize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  120 |     size_t getCurrentSize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:120:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     size_t getCurrentSize() const {
      |     ~~~~~~ ^
      |     auto                          -> size_t
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:126:66: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  126 |         std::cout << "BufferOverflowProxy уничтожен" << std::endl;
      |                                                         ^~~~~~~~~
      |                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:133:7: warning: class 'UseAfterFreeProxy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  133 | class UseAfterFreeProxy {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:135:11: warning: use default member initializer for 'realObject' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  135 |     void* realObject;
      |           ^         
      |                     {nullptr}
  136 |     bool isValid;
  137 |     
  138 | public:
  139 |     UseAfterFreeProxy() : realObject(nullptr), isValid(false) {
      |                           ~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:136:10: warning: use default member initializer for 'isValid' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  136 |     bool isValid;
      |          ^      
      |                 {false}
  137 |     
  138 | public:
  139 |     UseAfterFreeProxy() : realObject(nullptr), isValid(false) {
      |                                                ~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:140:58: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  140 |         std::cout << "UseAfterFreeProxy создан" << std::endl;
      |                                                    ^~~~~~~~~
      |                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:157:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  157 |     void* getRealObject() {
      |     ~~~~~ ^
      |     auto                  -> void*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:161:5: warning: function 'isObjectValid' should be marked [[nodiscard]] [modernize-use-nodiscard]
  161 |     bool isObjectValid() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:161:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  161 |     bool isObjectValid() const {
      |     ~~~~ ^
      |     auto                       -> bool
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:166:24: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  166 |         if (isValid && realObject) {
      |                        ^         
      |                        (          != nullptr)
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:168:13: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  168 |             strcpy(static_cast<char*>(realObject), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:168:13: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  168 |             strcpy(static_cast<char*>(realObject), request);
      |             ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:168:13: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  168 |             strcpy(static_cast<char*>(realObject), request);
      |             ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:174:64: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  174 |         std::cout << "UseAfterFreeProxy уничтожен" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:181:7: warning: class 'IntegerOverflowProxy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  181 | class IntegerOverflowProxy {
      |       ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:183:12: warning: use default member initializer for 'requestCount' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  183 |     size_t requestCount;
      |            ^           
      |                        {0}
  184 |     size_t maxRequests;
  185 |     
  186 | public:
  187 |     IntegerOverflowProxy() : requestCount(0), maxRequests(1000) {
      |                              ~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:184:12: warning: use default member initializer for 'maxRequests' [cppcoreguidelines-use-default-member-init,modernize-use-default-member-init]
  184 |     size_t maxRequests;
      |            ^          
      |                       {1000}
  185 |     
  186 | public:
  187 |     IntegerOverflowProxy() : requestCount(0), maxRequests(1000) {
      |                                               ~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:187:59: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  187 |     IntegerOverflowProxy() : requestCount(0), maxRequests(1000) {
      |                                                           ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:188:61: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  188 |         std::cout << "IntegerOverflowProxy создан" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:192:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  192 |     bool processRequest(const char* request) {
      |     ~~~~ ^
      |     auto                                     -> bool
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:198:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  198 |             std::cout << "Обработка запроса " << requestCount << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:202:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  202 |         std::cout << "Превышено максимальное количество запросов" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:207:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  207 |     void* createBuffer() {
      |     ~~~~~ ^
      |     auto                 -> void*
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:207:11: warning: method 'createBuffer' can be made const [readability-make-member-function-const]
  207 |     void* createBuffer() {
      |           ^
      |                          const
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:209:9: warning: returning a newly created resource of type 'void *' or 'gsl::owner<>' from a function whose return type is not 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  209 |         return new char[requestCount];
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:212:5: warning: function 'getRequestCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  212 |     size_t getRequestCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:212:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  212 |     size_t getRequestCount() const {
      |     ~~~~~~ ^
      |     auto                           -> size_t
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:216:5: warning: function 'getMaxRequests' should be marked [[nodiscard]] [modernize-use-nodiscard]
  216 |     size_t getMaxRequests() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:216:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  216 |     size_t getMaxRequests() const {
      |     ~~~~~~ ^
      |     auto                          -> size_t
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:221:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  221 |         std::cout << "IntegerOverflowProxy уничтожен" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:230:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  230 |     std::cout << "\n=== Демонстрация Authentication Bypass ===" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:236:107: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  236 |     std::cout << "Аутентификация 'admin': " << (auth1 ? "Успех" : "Неудача") << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:240:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  240 |     std::cout << "Аутентификация 'user': " << (auth2 ? "Успех" : "Неудача") << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:246:9: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  246 |     if (username && password) {
      |         ^
      |         (        != nullptr)
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:246:21: warning: implicit conversion 'char *' -> 'bool' [readability-implicit-bool-conversion]
  246 |     if (username && password) {
      |                     ^       
      |                     (        != nullptr)
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:247:107: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  247 |         std::cout << "Получены учетные данные: " << username << " / " << password << std::endl;
      |                                                                                      ^~~~~~~~~
      |                                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:251:5: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  251 |     char* obj = new char[1024];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:251:26: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  251 |     char* obj = new char[1024];
      |                          ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:255:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  255 |     if (realObj) {
      |         ^      
      |                 != nullptr
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:256:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  256 |         std::cout << "Получен доступ к реальному объекту" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:259:5: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  259 |     delete[] obj;
      |     ^        ~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:251:5: note: variable declared here
  251 |     char* obj = new char[1024];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:263:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  263 |     std::cout << "\n=== Демонстрация Buffer Overflow ===" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:268:35: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  268 |     proxy.processRequest("Hello", 5);
      |                                   ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:269:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  269 |     std::cout << "Обработан запрос размером 5 байт" << std::endl;
      |                                                        ^~~~~~~~~
      |                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:272:30: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  272 |     std::string largeRequest(1000000, 'A');
      |                              ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:275:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  275 |     std::cout << "Обработан запрос размером: " << proxy.getCurrentSize() << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:276:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  276 |     std::cout << "Размер буфера: " << proxy.getBufferSize() << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:280:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  280 |     std::cout << "\n=== Демонстрация Use-After-Free ===" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:285:5: warning: initializing non-owner 'char *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  285 |     char* obj = new char[1024];
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:285:26: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  285 |     char* obj = new char[1024];
      |                          ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:286:5: warning: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [clang-analyzer-security.insecureAPI.strcpy]
  286 |     strcpy(obj, "Real object data");
      |     ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:286:5: note: Call to function 'strcpy' is insecure as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119
  286 |     strcpy(obj, "Real object data");
      |     ^~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:286:5: warning: 'strcpy' is deprecated: This function or variable may be unsafe. Consider using strcpy_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details. [clang-diagnostic-deprecated-declarations]
  286 |     strcpy(obj, "Real object data");
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\string.h:130:1: note: 'strcpy' has been explicitly marked deprecated here
  130 | __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1(
      | ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:835:5: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1'
  835 |     __DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX(_ReturnType, _ReturnPolicy, _DeclSpec, _FuncName, _FuncName##_s, _DstType, _SalAttributeDst, _DstType, _Dst, _TType1, _TArg1)
      |     ^
D:\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt.h:1894:17: note: expanded from macro '__DEFINE_CPP_OVERLOAD_STANDARD_FUNC_0_1_EX'
 1894 |                 _CRT_INSECURE_DEPRECATE(_SecureFuncName) _DeclSpec _ReturnType __cdecl _FuncName(_SalAttributeDst _DstType *_Dst, _TType1 _TArg1);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:355:55: note: expanded from macro '_CRT_INSECURE_DEPRECATE'
  355 |         #define _CRT_INSECURE_DEPRECATE(_Replacement) _CRT_DEPRECATE_TEXT(    \
      |                                                       ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vcruntime.h:345:47: note: expanded from macro '_CRT_DEPRECATE_TEXT'
  345 | #define _CRT_DEPRECATE_TEXT(_Text) __declspec(deprecated(_Text))
      |                                               ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:289:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  289 |     std::cout << "Реальный объект установлен" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:293:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  293 |     std::cout << "Реальный объект освобожден" << std::endl;
      |                                                  ^~~~~~~~~
      |                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:297:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  297 |     if (realObj) {
      |         ^      
      |                 != nullptr
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:298:107: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  298 |         std::cout << "Реальный объект все еще доступен (dangling pointer)" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:299:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  299 |         std::cout << "Валидность: " << (proxy.isObjectValid() ? "Да" : "Нет") << std::endl;
      |                                                                                  ^~~~~~~~~
      |                                                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:307:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  307 |     std::cout << "\n=== Демонстрация Integer Overflow ===" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:312:25: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  312 |     for (int i = 0; i < 100; ++i) {
      |                         ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:316:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  316 |     std::cout << "Количество запросов: " << proxy.getRequestCount() << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:319:36: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  319 |     size_t largeCount = SIZE_MAX - 100;
      |                                    ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:324:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  324 |     std::cout << "Количество запросов после overflow: " << proxy.getRequestCount() << std::endl;
      |                                                                                       ^~~~~~~~~
      |                                                                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:328:9: warning: implicit conversion 'void *' -> 'bool' [readability-implicit-bool-conversion]
  328 |     if (buffer) {
      |         ^     
      |                != nullptr
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:329:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  329 |         std::cout << "Буфер создан (возможно из-за overflow)" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:330:9: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
  330 |         delete[] static_cast<char*>(buffer);
      |         ^                           ~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:327:5: note: variable declared here
  327 |     void* buffer = proxy.createBuffer();
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:339:101: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  339 |     std::cout << "\n=== Инструкции для статического анализа ===" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:340:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  340 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:341:68: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  341 |     std::cout << "   clang --analyze proxy_vulnerabilities.cpp" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:342:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  342 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:343:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  343 |     std::cout << "   cppcheck --enable=all proxy_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:344:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  344 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:345:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  345 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:349:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  349 |     std::cout << "\n=== Инструкции для динамического анализа ===" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:350:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  350 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:351:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  351 |     std::cout << "   g++ -fsanitize=address -g proxy_vulnerabilities.cpp -o proxy_asan" << std::endl;
      |                                                                                            ^~~~~~~~~
      |                                                                                            '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:352:39: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  352 |     std::cout << "   ./proxy_asan" << std::endl;
      |                                       ^~~~~~~~~
      |                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:353:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  353 |     std::cout << "2. MemorySanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:354:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  354 |     std::cout << "   g++ -fsanitize=memory -g proxy_vulnerabilities.cpp -o proxy_msan" << std::endl;
      |                                                                                           ^~~~~~~~~
      |                                                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:355:39: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  355 |     std::cout << "   ./proxy_msan" << std::endl;
      |                                       ^~~~~~~~~
      |                                       '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:356:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  356 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:357:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  357 |     std::cout << "   valgrind --tool=memcheck ./proxy_vulnerabilities" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:364:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  364 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2574:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_char, char>' here
 2574 |         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
      |         ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:272:17: note: frame #8: function 'demonstrateBufferOverflow' calls function 'basic_string' here
  272 |     std::string largeRequest(1000000, 'A');
      |                 ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:369:5: note: frame #9: function 'main' calls function 'demonstrateBufferOverflow' here
  369 |     demonstrateBufferOverflow();
      |     ^
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:364:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  364 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:365:93: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  365 |     std::cout << "=== АНАЛИЗ УЯЗВИМОСТЕЙ В ПАТТЕРНЕ PROXY ===" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:377:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  377 |     std::cout << "\n=== ВНИМАНИЕ: Этот код содержит уязвимости! ===" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\04-structural\lesson_4_4_proxy\proxy_vulnerabilities.cpp:378:127: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  378 |     std::cout << "Используйте только для обучения и анализа безопасности." << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
Suppressed 106630 warnings (106630 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp
WARNINGS: 27
ERRORS: 0
================================================================================
132632 warnings generated.
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:121:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<std::function<void (int)>>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:829:43: note: frame #5: function '_Emplace_reallocate<const std::function<void (int)> &>' calls function '_Allocate_at_least_helper<std::allocator<std::function<void (int)>>>' here
  829 |         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);
      |                                           ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:783:17: note: frame #6: function '_Emplace_one_at_back<const std::function<void (int)> &>' calls function '_Emplace_reallocate<const std::function<void (int)> &>' here
  783 |         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:871:9: note: frame #7: function 'push_back' calls function '_Emplace_one_at_back<const std::function<void (int)> &>' here
  871 |         _Emplace_one_at_back(_Val);
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:99:9: note: frame #8: function 'attach' calls function 'push_back' here
   99 |         observers_.push_back(observer);  // RACE CONDITION
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:123:13: note: frame #9: function 'operator()' calls function 'attach' here
  123 |             subject.attach([i](int val) {
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #10: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:121:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #11: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:121:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:121:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:23:7: warning: class 'IObserver' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   23 | class IObserver {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:42:13: warning: use a ranges version of this algorithm [modernize-use-ranges]
    1 |             std::remove(observers_.begin(), observers_.end(), observer),
      |             ^~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~
      |             std::ranges::remove observers_
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:61:29: warning: pass by value and use std::move [modernize-pass-by-value]
    2 |     explicit SimpleObserver(const std::string& name) : name_(name) {}
      |                             ^~~~~~~~~~~~~~~~~~                   
      |                             std::string                      std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:98:42: warning: the parameter 'observer' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
   98 |     void attach(std::function<void(int)> observer) {
      |                                          ^
      |                 const                   &
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:102:42: warning: the parameter 'observer' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  102 |     void detach(std::function<void(int)> observer) {
      |                                          ^
      |                 const                   &
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:121:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  121 |     std::thread producer([&subject]() {
      |                          ^
      |                                       -> void
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:122:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  122 |         for (int i = 0; i < 100; ++i) {
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:123:28: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  123 |             subject.attach([i](int val) {
      |                            ^
      |                                         -> void
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:126:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  126 |             std::this_thread::sleep_for(std::chrono::microseconds(10));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:131:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  131 |     std::thread notifier([&subject]() {
      |                          ^
      |                                       -> void
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:132:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |         for (int i = 0; i < 100; ++i) {
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:134:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  134 |             std::this_thread::sleep_for(std::chrono::microseconds(10));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:154:44: warning: the parameter 'observer' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  154 |     void attach(std::shared_ptr<IObserver> observer) {
      |                                            ^
      |                 const                     &
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:173:29: warning: pass by value and use std::move [modernize-pass-by-value]
  173 |     SelfReferencingObserver(std::shared_ptr<LeakySubject> subject, const std::string& name)
      |                             ^
  174 |         : subject_(subject), name_(name) {}
      |                           
      |                    std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:173:68: warning: pass by value and use std::move [modernize-pass-by-value]
  173 |     SelfReferencingObserver(std::shared_ptr<LeakySubject> subject, const std::string& name)
      |                                                                    ^~~~~~~~~~~~~~~~~~
      |                                                                    std::string 
  174 |         : subject_(subject), name_(name) {}
      |                                        
      |                                    std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:174:20: warning: parameter 'subject' is passed by value and only copied once; consider moving it to avoid unnecessary copies [performance-unnecessary-value-param]
    2 |         : subject_(subject), name_(name) {}
      |                    ^      
      |                    std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:187:25: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  187 |     for (int i = 0; i < 5; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:217:13: warning: use a ranges version of this algorithm [modernize-use-ranges]
  217 |             std::remove(observers_.begin(), observers_.end(), observer),
      |             ^~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~  ~~~~~~~~~~~~~~~~
      |             std::ranges::remove observers_
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:231:26: warning: member 'subject_' of type 'InvalidatingSubject &' is a reference [cppcoreguidelines-avoid-const-or-ref-data-members]
  231 |     InvalidatingSubject& subject_;
      |                          ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:236:57: warning: pass by value and use std::move [modernize-pass-by-value]
  236 |     UnsubscribingObserver(InvalidatingSubject& subject, const std::string& name)
      |                                                         ^~~~~~~~~~~~~~~~~~
      |                                                         std::string 
  237 |         : subject_(subject), name_(name) {}
      |                                        
      |                                    std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:281:42: warning: the parameter 'observer' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  281 |     void attach(std::weak_ptr<IObserver> observer) {
      |                                          ^
      |                 const                   &
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:296:5: warning: function 'getObserverCount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  296 |     size_t getObserverCount() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:296:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  296 |     size_t getObserverCount() const {
      |     ~~~~~~ ^
      |     auto                            -> size_t
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:307:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  307 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:324:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  324 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2509:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' here
 2509 |         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:61:56: note: frame #8: function 'SimpleObserver' calls function 'basic_string' here
   61 |     explicit SimpleObserver(const std::string& name) : name_(name) {}
      |                                                        ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:75:24: note: frame #9: function 'demonstrateUseAfterFree' calls function 'SimpleObserver' here
   75 |         SimpleObserver observer("Temporary");
      |                        ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:329:9: note: frame #10: function 'main' calls function 'demonstrateUseAfterFree' here
  329 |         demonstrateUseAfterFree();          // Может вызвать segfault
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_1_observer\observer_vulnerabilities.cpp:324:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  324 | int main() {
      | ~~~ ^
      | auto       -> int
Suppressed 132599 warnings (132599 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:20:7: warning: class 'Vulnerablestrategy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablestrategy {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:27:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablestrategy СЃРѕР·РґР°РЅ" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:34:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablestrategy СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablestrategy' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablestrategy {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:48:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablestrategy СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:55:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablestrategy СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:86:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze strategy_vulnerabilities.cpp" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:88:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all strategy_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:96:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g strategy_vulnerabilities.cpp -o strategy_asan" << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:97:42: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./strategy_asan" << std::endl;
      |                                          ^~~~~~~~~
      |                                          '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:99:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g strategy_vulnerabilities.cpp -o strategy_tsan" << std::endl;
      |                                                                                                 ^~~~~~~~~
      |                                                                                                 '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:100:42: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./strategy_tsan" << std::endl;
      |                                          ^~~~~~~~~
      |                                          '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:102:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./strategy_vulnerabilities" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:110:157: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• strategy ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\05-behavioral\lesson_5_2_strategy\strategy_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp
WARNINGS: 61
ERRORS: 0
================================================================================
110014 warnings generated.
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:165:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:166:19: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  166 |         std::cout << "\n[Атакующий поток] Попытка выполнить admin команду как USER\n";
      |                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:165:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:165:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:165:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:171:35)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:173:19: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  173 |         std::cout << "[Другой поток] Меняем пользователя на ADMIN!\n";
      |                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:171:35)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:171:35)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:171:35)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:25:7: warning: class 'ICommand' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   25 | class ICommand {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:29:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
   29 |     virtual std::string getDescription() const = 0;
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:29:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   29 |     virtual std::string getDescription() const = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:38:27: warning: pass by value and use std::move [modernize-pass-by-value]
    3 |     explicit ShellCommand(const std::string& cmd) : command_(cmd) {}
      |                           ^~~~~~~~~~~~~~~~~~                    
      |                           std::string                        std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:43:22: warning: calling 'system' uses a command processor [cert-env33-c]
   43 |         int result = system(command_.c_str());  // COMMAND INJECTION!
      |                      ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:43:22: warning: function is not thread safe [concurrency-mt-unsafe]
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:47:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
   47 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:47:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   47 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:79:12: warning: enum 'Permission' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
   79 | enum class Permission {
      |            ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:90:10: warning: pass by value and use std::move [modernize-pass-by-value]
   90 |     User(const std::string& n, Permission p) : name(n), permission(p) {}
      |          ^~~~~~~~~~~~~~~~~~                          
      |          std::string                                std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:90:43: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
   90 |     User(const std::string& n, Permission p) : name(n), permission(p) {}
      |                                           ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:100:23: warning: pass by value and use std::move [modernize-pass-by-value]
  100 |     PrivilegedCommand(const std::string& action, Permission perm)
      |                       ^~~~~~~~~~~~~~~~~~
      |                       std::string 
  101 |         : action_(action), required_permission_(perm) {}
      |                         
      |                   std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:103:5: warning: function 'getRequiredPermission' should be marked [[nodiscard]] [modernize-use-nodiscard]
  103 |     Permission getRequiredPermission() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:103:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  103 |     Permission getRequiredPermission() const {
      |     ~~~~~~~~~~ ^
      |     auto                                     -> Permission
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:120:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
  120 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:120:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:143:67: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  143 |             std::this_thread::sleep_for(std::chrono::milliseconds(100));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:165:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  165 |     std::thread attacker([&executor, &admin_cmd, &regular_user]() {
      |                          ^
      |                                                                   -> void
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:171:35: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  171 |     std::thread privilege_changer([&executor, &admin]() {
      |                                   ^
      |                                                         -> void
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:172:63: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  172 |         std::this_thread::sleep_for(std::chrono::milliseconds(50));
      |                                                               ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:194:27: warning: 2 adjacent parameters of 'PasswordChangeCommand' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  194 |     PasswordChangeCommand(const std::string& user, const std::string& pass)
      |                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:194:46: note: the first parameter in the range is 'user'
  194 |     PasswordChangeCommand(const std::string& user, const std::string& pass)
      |                                              ^~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:194:71: note: the last parameter in the range is 'pass'
  194 |     PasswordChangeCommand(const std::string& user, const std::string& pass)
      |                                                                       ^~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:194:27: warning: pass by value and use std::move [modernize-pass-by-value]
  194 |     PasswordChangeCommand(const std::string& user, const std::string& pass)
      |                           ^~~~~~~~~~~~~~~~~~
      |                           std::string 
  195 |         : username_(user), new_password_(pass) {}
      |                         
      |                     std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:194:52: warning: pass by value and use std::move [modernize-pass-by-value]
  194 |     PasswordChangeCommand(const std::string& user, const std::string& pass)
      |                                                    ^~~~~~~~~~~~~~~~~~
      |                                                    std::string 
  195 |         : username_(user), new_password_(pass) {}
      |                                              
      |                                          std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:202:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
  202 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:202:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  202 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:213:40: warning: the parameter 'cmd' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  213 |     void add(std::shared_ptr<ICommand> cmd) {
      |                                        ^
      |              const                    &
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:268:25: warning: 2 adjacent parameters of 'SerializableCommand' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  268 |     SerializableCommand(const std::string& type, const std::string& data)
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:268:44: note: the first parameter in the range is 'type'
  268 |     SerializableCommand(const std::string& type, const std::string& data)
      |                                            ^~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:268:69: note: the last parameter in the range is 'data'
  268 |     SerializableCommand(const std::string& type, const std::string& data)
      |                                                                     ^~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:268:25: warning: pass by value and use std::move [modernize-pass-by-value]
  268 |     SerializableCommand(const std::string& type, const std::string& data)
      |                         ^~~~~~~~~~~~~~~~~~
      |                         std::string 
  269 |         : type_(type), data_(data) {}
      |                     
      |                 std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:268:50: warning: pass by value and use std::move [modernize-pass-by-value]
  268 |     SerializableCommand(const std::string& type, const std::string& data)
      |                                                  ^~~~~~~~~~~~~~~~~~
      |                                                  std::string 
  269 |         : type_(type), data_(data) {}
      |                                  
      |                              std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:272:49: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  272 |     static std::shared_ptr<SerializableCommand> deserialize(const std::string& serialized) {
      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^
      |            auto                                                                            -> std::shared_ptr<SerializableCommand>
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:274:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  274 |         std::string type, data;
      |         ^~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:288:13: warning: calling 'system' uses a command processor [cert-env33-c]
  288 |             system(data_.c_str());
      |             ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:288:13: warning: function is not thread safe [concurrency-mt-unsafe]
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:295:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
  295 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:295:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  295 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:299:5: warning: function 'serialize' should be marked [[nodiscard]] [modernize-use-nodiscard]
  299 |     std::string serialize() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:299:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  299 |     std::string serialize() const {
      |     ~~~~~~~~~~~ ^
      |     auto                          -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:17: warning: 2 adjacent parameters of 'Transaction' of similar type ('const std::string &') are easily swapped by mistake [bugprone-easily-swappable-parameters]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:36: note: the first parameter in the range is 'f'
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                    ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:58: note: the last parameter in the range is 't'
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                                          ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:17: warning: pass by value and use std::move [modernize-pass-by-value]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                 ^~~~~~~~~~~~~~~~~~
      |                 std::string 
  335 |         : from(f), to(t), amount(a) {}
      |                 
      |                std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:36: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                    ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:39: warning: pass by value and use std::move [modernize-pass-by-value]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                       ^~~~~~~~~~~~~~~~~~
      |                                       std::string 
  335 |         : from(f), to(t), amount(a) {}
      |                        
      |                       std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:58: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                                          ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:334:68: warning: parameter name 'a' is too short, expected at least 3 characters [readability-identifier-length]
  334 |     Transaction(const std::string& f, const std::string& t, double a)
      |                                                                    ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:343:30: warning: pass by value and use std::move [modernize-pass-by-value]
  343 |     explicit TransferCommand(const Transaction& tx) : transaction_(tx) {}
      |                              ^~~~~~~~~~~~~~~~~~                      
      |                              Transaction                           std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:343:49: warning: parameter name 'tx' is too short, expected at least 3 characters [readability-identifier-length]
  343 |     explicit TransferCommand(const Transaction& tx) : transaction_(tx) {}
      |                                                 ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:352:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
  352 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:352:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  352 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:357:5: warning: function 'copy' should be marked [[nodiscard]] [modernize-use-nodiscard]
  357 |     TransferCommand copy() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:357:21: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  357 |     TransferCommand copy() const {
      |     ~~~~~~~~~~~~~~~ ^
      |     auto                         -> TransferCommand
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:366:17: warning: variable name 'tx' is too short, expected at least 3 characters [readability-identifier-length]
  366 |     Transaction tx("Alice", "Bob", 100.0);
      |                 ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:394:27: warning: pass by value and use std::move [modernize-pass-by-value]
  394 |     explicit MacroCommand(const std::string& name) : name_(name) {}
      |                           ^~~~~~~~~~~~~~~~~~                   
      |                           std::string                      std::move( )
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:396:40: warning: the parameter 'cmd' is copied for each invocation but only used as a const reference; consider making it a const reference [performance-unnecessary-value-param]
  396 |     void add(std::shared_ptr<ICommand> cmd) {
      |                                        ^
      |              const                    &
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:409:5: warning: function 'getDescription' should be marked [[nodiscard]] [modernize-use-nodiscard]
  409 |     std::string getDescription() const override {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:409:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  409 |     std::string getDescription() const override {
      |     ~~~~~~~~~~~ ^
      |     auto                               -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:419:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  419 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:424:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  424 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:429:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  429 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:446:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  446 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2617:26: note: frame #5: function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 2617 |             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);
      |                          ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2700:35: note: frame #6: function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' calls function '_Allocate_for_capacity<std::basic_string<char>::_Allocation_policy::_At_least>' here
 2700 |         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xstring:2509:9: note: frame #7: function 'basic_string' calls function '_Construct<std::basic_string<char>::_Construct_strategy::_From_string, const char *>' here
 2509 |         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:38:53: note: frame #8: function 'ShellCommand' calls function 'basic_string' here
   38 |     explicit ShellCommand(const std::string& cmd) : command_(cmd) {}
      |                                                     ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:56:18: note: frame #9: function 'demonstrateCommandInjection' calls function 'ShellCommand' here
   56 |     ShellCommand cmd1("echo Hello");
      |                  ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:451:9: note: frame #10: function 'main' calls function 'demonstrateCommandInjection' here
  451 |         demonstrateCommandInjection();
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_3_command\command_vulnerabilities.cpp:446:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  446 | int main() {
      | ~~~ ^
      | auto       -> int
Suppressed 109948 warnings (109948 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp
WARNINGS: 75
ERRORS: 0
================================================================================
107414 warnings generated.
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:160:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:161:19: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  161 |         std::cout << "[Атакующий] Попытка входа...\n";
      |                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:160:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:160:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:160:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:166:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:168:19: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  168 |         std::cout << "[Охрана] Блокировка двери!\n";
      |                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:166:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:166:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:166:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:348:73: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  348 |                 std::cout << "Thread " << i << ": " << light.getColor() << " → ";
      |                                                                         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:21:7: warning: class 'IState' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   21 | class IState {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:25:5: warning: function 'getName' should be marked [[nodiscard]] [modernize-use-nodiscard]
   25 |     virtual std::string getName() const = 0;
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:25:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   25 |     virtual std::string getName() const = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                        -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:36:5: warning: function 'getName' should be marked [[nodiscard]] [modernize-use-nodiscard]
   36 |     std::string getName() const override { return "Locked"; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:36:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   36 |     std::string getName() const override { return "Locked"; }
      |     ~~~~~~~~~~~ ^
      |     auto                        -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:45:5: warning: function 'getName' should be marked [[nodiscard]] [modernize-use-nodiscard]
   45 |     std::string getName() const override { return "Unlocked"; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:45:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   45 |     std::string getName() const override { return "Unlocked"; }
      |     ~~~~~~~~~~~ ^
      |     auto                        -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:49:7: warning: class 'VulnerableContext' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   49 | class VulnerableContext {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:69:5: warning: function 'getStateName' should be marked [[nodiscard]] [modernize-use-nodiscard]
   69 |     std::string getStateName() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:69:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   69 |     std::string getStateName() const {
      |     ~~~~~~~~~~~ ^
      |     auto                             -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:80:25: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
   80 |     std::thread changer([&context]() {
      |                         ^
      |                                      -> void
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:81:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   81 |         for (int i = 0; i < 100; ++i) {
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:82:30: warning: initializing non-owner argument of type 'IState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   82 |             context.setState(new UnlockedState());
      |                              ^~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:83:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   83 |             std::this_thread::sleep_for(std::chrono::microseconds(10));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:84:30: warning: initializing non-owner argument of type 'IState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
   84 |             context.setState(new LockedState());
      |                              ^~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:85:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   85 |             std::this_thread::sleep_for(std::chrono::microseconds(10));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:90:22: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
   90 |     std::thread user([&context]() {
      |                      ^
      |                                   -> void
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:91:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   91 |         for (int i = 0; i < 100; ++i) {
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:93:67: warning: 15 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   93 |             std::this_thread::sleep_for(std::chrono::microseconds(15));
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:108:12: warning: enum 'DoorState' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  108 | enum class DoorState {
      |            ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:120:5: warning: function 'getState' should be marked [[nodiscard]] [modernize-use-nodiscard]
  120 |     DoorState getState() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:120:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  120 |     DoorState getState() const {
      |     ~~~~~~~~~ ^
      |     auto                       -> DoorState
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:138:10: warning: method 'enter' can be made const [readability-make-member-function-const]
  138 |     void enter() {
      |          ^
      |                  const
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:143:67: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  143 |             std::this_thread::sleep_for(std::chrono::milliseconds(50));  // Задержка
      |                                                                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:160:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  160 |     std::thread attacker([&door]() {
      |                          ^
      |                                    -> void
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:166:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  166 |     std::thread security([&door]() {
      |                          ^
      |                                    -> void
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:167:63: warning: 25 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  167 |         std::this_thread::sleep_for(std::chrono::milliseconds(25));
      |                                                               ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:183:12: warning: enum 'OrderState' uses a larger base type ('int', size: 4 bytes) than necessary for its value set, consider using 'std::uint8_t' (1 byte) as the base type to reduce its size [performance-enum-size]
  183 | enum class OrderState {
      |            ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:232:5: warning: function 'getState' should be marked [[nodiscard]] [modernize-use-nodiscard]
  232 |     OrderState getState() const { return state_; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:232:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  232 |     OrderState getState() const { return state_; }
      |     ~~~~~~~~~~ ^
      |     auto                        -> OrderState
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:233:5: warning: function 'getAmount' should be marked [[nodiscard]] [modernize-use-nodiscard]
  233 |     double getAmount() const { return amount_; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:233:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  233 |     double getAmount() const { return amount_; }
      |     ~~~~~~ ^
      |     auto                     -> double
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:269:7: warning: class 'TrafficLightState' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  269 | class TrafficLightState {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:273:5: warning: function 'getColor' should be marked [[nodiscard]] [modernize-use-nodiscard]
  273 |     virtual std::string getColor() const = 0;
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:273:25: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  273 |     virtual std::string getColor() const = 0;
      |             ~~~~~~~~~~~ ^
      |             auto                         -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:276:7: warning: class 'TrafficLight' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  276 | class TrafficLight {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:292:5: warning: function 'getColor' should be marked [[nodiscard]] [modernize-use-nodiscard]
  292 |     std::string getColor() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:292:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  292 |     std::string getColor() const {
      |     ~~~~~~~~~~~ ^
      |     auto                         -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:308:5: warning: function 'getColor' should be marked [[nodiscard]] [modernize-use-nodiscard]
  308 |     std::string getColor() const override { return "RED"; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:308:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  308 |     std::string getColor() const override { return "RED"; }
      |     ~~~~~~~~~~~ ^
      |     auto                         -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:314:5: warning: function 'getColor' should be marked [[nodiscard]] [modernize-use-nodiscard]
  314 |     std::string getColor() const override { return "GREEN"; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:314:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  314 |     std::string getColor() const override { return "GREEN"; }
      |     ~~~~~~~~~~~ ^
      |     auto                         -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:320:25: warning: initializing non-owner argument of type 'TrafficLightState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  320 |         light->setState(new RedState());
      |                         ^~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:323:5: warning: function 'getColor' should be marked [[nodiscard]] [modernize-use-nodiscard]
  323 |     std::string getColor() const override { return "YELLOW"; }
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:323:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  323 |     std::string getColor() const override { return "YELLOW"; }
      |     ~~~~~~~~~~~ ^
      |     auto                         -> std::string
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:328:21: warning: initializing non-owner argument of type 'TrafficLightState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  328 |     light->setState(new GreenState());
      |                     ^~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:332:21: warning: initializing non-owner argument of type 'TrafficLightState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  332 |     light->setState(new YellowState());
      |                     ^~~~~~~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:345:25: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  345 |     for (int i = 0; i < 5; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:9: warning: 'emplace_back' is called inside a loop; consider pre-allocating the container capacity before the loop [performance-inefficient-vector-operation]
  345 |     for (int i = 0; i < 5; ++i) {
  346 |         threads.emplace_back([&light, i]() {
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  346 |         threads.emplace_back([&light, i]() {
      |                              ^
      |                                            -> void
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:347:33: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  347 |             for (int j = 0; j < 10; ++j) {
      |                                 ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:351:71: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  351 |                 std::this_thread::sleep_for(std::chrono::milliseconds(10));
      |                                                                       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:356:16: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
  356 |     for (auto& t : threads) t.join();
      |                ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:356:28: warning: statement should be inside braces [readability-braces-around-statements]
  356 |     for (auto& t : threads) t.join();
      |                            ^         
      |                             {
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:366:7: warning: class 'LeakyState' defines a default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  366 | class LeakyState {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:372:7: warning: class 'StateA' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  372 | class StateA : public LeakyState {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:377:22: warning: performing an implicit widening conversion to type 'size_type' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  377 |     StateA() : data_(1024 * 1024, 'A') {  // 1 MB
      |                      ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:377:22: note: make conversion explicit to silence this warning
    1 |     StateA() : data_(1024 * 1024, 'A') {  // 1 MB
      |                      ^~~~~~~~~~~
      |                      static_cast<size_type>( )
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:377:22: note: perform multiplication in a wider type
  377 |     StateA() : data_(1024 * 1024, 'A') {  // 1 MB
      |                      ^~~~
      |                      static_cast<long long>( )
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:377:22: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  377 |     StateA() : data_(1024 * 1024, 'A') {  // 1 MB
      |                      ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:377:29: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  377 |     StateA() : data_(1024 * 1024, 'A') {  // 1 MB
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:381:5: warning: an exception may be thrown in function '~StateA' which should not throw exceptions [bugprone-exception-escape]
  381 |     ~StateA() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:382:19: note: frame #6: function '~StateA' calls function 'operator<<<std::char_traits<char>>' here
  382 |         std::cout << "StateA удален\n";
      |                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:381:5: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,modernize-use-override]
  381 |     ~StateA() {
      |     ^
      |               override
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:390:7: warning: class 'StateB' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
  390 | class StateB : public LeakyState {
      |       ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:395:22: warning: performing an implicit widening conversion to type 'size_type' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  395 |     StateB() : data_(1024 * 1024, 'B') {  // 1 MB
      |                      ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:395:22: note: make conversion explicit to silence this warning
  395 |     StateB() : data_(1024 * 1024, 'B') {  // 1 MB
      |                      ^~~~~~~~~~~
      |                      static_cast<size_type>( )
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:395:22: note: perform multiplication in a wider type
  395 |     StateB() : data_(1024 * 1024, 'B') {  // 1 MB
      |                      ^~~~
      |                      static_cast<long long>( )
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:395:22: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  395 |     StateB() : data_(1024 * 1024, 'B') {  // 1 MB
      |                      ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:395:29: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  395 |     StateB() : data_(1024 * 1024, 'B') {  // 1 MB
      |                             ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:399:5: warning: an exception may be thrown in function '~StateB' which should not throw exceptions [bugprone-exception-escape]
  399 |     ~StateB() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:400:19: note: frame #6: function '~StateB' calls function 'operator<<<std::char_traits<char>>' here
  400 |         std::cout << "StateB удален\n";
      |                   ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:399:5: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,modernize-use-override]
  399 |     ~StateB() {
      |     ^
      |               override
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:431:25: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  431 |     for (int i = 0; i < 10; ++i) {
      |                         ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:432:30: warning: initializing non-owner argument of type 'LeakyState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  432 |         context.transitionTo(new StateB());  // StateA не удален!
      |                              ^~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:433:30: warning: initializing non-owner argument of type 'LeakyState *' with a newly created 'gsl::owner<>' [cppcoreguidelines-owning-memory]
  433 |         context.transitionTo(new StateA());  // StateB не удален!
      |                              ^~~~~~~~~~~~
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:443:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  443 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<std::thread>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:829:43: note: frame #5: function '_Emplace_reallocate<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' calls function '_Allocate_at_least_helper<std::allocator<std::thread>>' here
  829 |         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);
      |                                           ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:783:17: note: frame #6: function '_Emplace_one_at_back<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' calls function '_Emplace_reallocate<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' here
  783 |         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:862:24: note: frame #7: function 'emplace_back<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' calls function '_Emplace_one_at_back<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' here
  862 |         _Ty& _Result = _Emplace_one_at_back(_STD forward<_Valty>(_Val)...);
      |                        ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:9: note: frame #8: function 'demonstrateStatePollution' calls function 'emplace_back<(lambda at D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:346:30)>' here
  346 |         threads.emplace_back([&light, i]() {
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:466:9: note: frame #9: function 'main' calls function 'demonstrateStatePollution' here
  466 |         demonstrateStatePollution();
      |         ^
D:\Work\Patterns\05-behavioral\lesson_5_4_state\state_vulnerabilities.cpp:443:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  443 | int main() {
      | ~~~ ^
      | auto       -> int
Suppressed 107322 warnings (107322 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:20:7: warning: class 'Vulnerablesmart_pointers' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablesmart_pointers {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:27:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablesmart_pointers СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:34:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablesmart_pointers СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablesmart_pointers' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablesmart_pointers {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:48:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablesmart_pointers СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:55:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablesmart_pointers СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:86:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze smart_pointers_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:88:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all smart_pointers_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:96:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g smart_pointers_vulnerabilities.cpp -o smart_pointers_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:97:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./smart_pointers_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:99:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g smart_pointers_vulnerabilities.cpp -o smart_pointers_tsan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:100:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./smart_pointers_tsan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:102:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./smart_pointers_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:110:163: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• smart_pointers ===" << std::endl;
      |                                                                                                                    ^~~~~~~~~
      |                                                                                                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_1_smart_pointers\smart_pointers_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:20:7: warning: class 'Vulnerablemove_semantics' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablemove_semantics {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:27:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablemove_semantics СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:34:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablemove_semantics СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablemove_semantics' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablemove_semantics {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:48:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablemove_semantics СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:55:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablemove_semantics СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:86:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze move_semantics_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:88:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all move_semantics_vulnerabilities.cpp" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:96:110: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g move_semantics_vulnerabilities.cpp -o move_semantics_asan" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:97:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./move_semantics_asan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:99:109: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g move_semantics_vulnerabilities.cpp -o move_semantics_tsan" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:100:48: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./move_semantics_tsan" << std::endl;
      |                                                ^~~~~~~~~
      |                                                '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:102:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./move_semantics_vulnerabilities" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:110:163: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• move_semantics ===" << std::endl;
      |                                                                                                                    ^~~~~~~~~
      |                                                                                                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
Suppressed 106438 warnings (106438 in non-user code).
D:\Work\Patterns\06-modern-cpp\lesson_6_2_move_semantics\move_semantics_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'

================================================================================
FILE: D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:20:7: warning: class 'Vulnerablecrtp' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablecrtp {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:27:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablecrtp СЃРѕР·РґР°РЅ" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:34:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablecrtp СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablecrtp' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablecrtp {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:48:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablecrtp СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:55:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablecrtp СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:86:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze crtp_vulnerabilities.cpp" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:88:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all crtp_vulnerabilities.cpp" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:96:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g crtp_vulnerabilities.cpp -o crtp_asan" << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:97:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./crtp_asan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:99:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g crtp_vulnerabilities.cpp -o crtp_tsan" << std::endl;
      |                                                                                         ^~~~~~~~~
      |                                                                                         '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:100:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./crtp_tsan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:102:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./crtp_vulnerabilities" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:110:153: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• crtp ===" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_3_crtp\crtp_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:20:7: warning: class 'Vulnerabletype_erasure' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerabletype_erasure {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:27:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerabletype_erasure СЃРѕР·РґР°РЅ" << std::endl;
      |                                                               ^~~~~~~~~
      |                                                               '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:34:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerabletype_erasure СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerabletype_erasure' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerabletype_erasure {
      |       ^
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:48:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerabletype_erasure СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:55:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerabletype_erasure СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:86:75: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze type_erasure_vulnerabilities.cpp" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:88:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all type_erasure_vulnerabilities.cpp" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:96:106: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g type_erasure_vulnerabilities.cpp -o type_erasure_asan" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:97:46: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./type_erasure_asan" << std::endl;
      |                                              ^~~~~~~~~
      |                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:99:105: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g type_erasure_vulnerabilities.cpp -o type_erasure_tsan" << std::endl;
      |                                                                                                         ^~~~~~~~~
      |                                                                                                         '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:100:46: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./type_erasure_tsan" << std::endl;
      |                                              ^~~~~~~~~
      |                                              '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:102:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./type_erasure_vulnerabilities" << std::endl;
      |                                                                                  ^~~~~~~~~
      |                                                                                  '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:110:161: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• type_erasure ===" << std::endl;
      |                                                                                                                  ^~~~~~~~~
      |                                                                                                                  '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\06-modern-cpp\lesson_6_4_type_erasure\type_erasure_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp
WARNINGS: 89
ERRORS: 0
================================================================================
138360 warnings generated.
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:124:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:130:55: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  130 |             std::cout << "Получено: " << item << "\n";
      |                                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:124:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:124:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:124:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:203:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<int *>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1563:31: note: frame #5: function '_Growmap' calls function '_Allocate_at_least_helper<std::allocator<int *>>' here
 1563 |         _Mapptr _Newmap     = _Allocate_at_least_helper(_Almap, _Allocsize);
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1072:13: note: frame #6: function '_Emplace_back_internal<const int &>' calls function '_Growmap' here
 1072 |             _Growmap(1);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1176:9: note: frame #7: function 'push_back' calls function '_Emplace_back_internal<const int &>' here
 1176 |         _Emplace_back_internal(_Val);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\queue:116:9: note: frame #8: function 'push' calls function 'push_back' here
  116 |         c.push_back(_Val);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:168:9: note: frame #9: function 'push' calls function 'push' here
  168 |         queue_.push(item);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:205:13: note: frame #10: function 'operator()' calls function 'push' here
  205 |             queue.push(i);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #11: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:203:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #12: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:203:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:203:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:211:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:214:59: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  214 |             std::cout << "Потреблено: " << item << "\n";
      |                                                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:211:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:211:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:211:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:269:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<Message **>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1563:31: note: frame #5: function '_Growmap' calls function '_Allocate_at_least_helper<std::allocator<Message **>>' here
 1563 |         _Mapptr _Newmap     = _Allocate_at_least_helper(_Almap, _Allocsize);
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1072:13: note: frame #6: function '_Emplace_back_internal<Message *const &>' calls function '_Growmap' here
 1072 |             _Growmap(1);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1176:9: note: frame #7: function 'push_back' calls function '_Emplace_back_internal<Message *const &>' here
 1176 |         _Emplace_back_internal(_Val);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\queue:116:9: note: frame #8: function 'push' calls function 'push_back' here
  116 |         c.push_back(_Val);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:249:9: note: frame #9: function 'push' calls function 'push' here
  249 |         queue_.push(msg);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:272:13: note: frame #10: function 'operator()' calls function 'push' here
  272 |             queue.push(&msg);  // ОПАСНО: Передаем указатель на стек!
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #11: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:269:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #12: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:269:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:269:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:279:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:283:60: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  283 |             std::cout << "Получено: " << msg->data << "\n";  // USE-AFTER-FREE
      |                                                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:279:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:279:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:279:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:334:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<char>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:1997:33: note: frame #5: function '_Buy_raw' calls function '_Allocate_at_least_helper<std::allocator<char>>' here
 1997 |         const pointer _Newvec = _Allocate_at_least_helper(_Getal(), _Newcapacity);
      |                                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:2018:9: note: frame #6: function '_Buy_nonzero' calls function '_Buy_raw' here
 2018 |         _Buy_raw(_Newcapacity);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:2074:13: note: frame #7: function '_Construct_n<const char &>' calls function '_Buy_nonzero' here
 2074 |             _Buy_nonzero(_Count);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\vector:623:9: note: frame #8: function 'vector' calls function '_Construct_n<const char &>' here
  623 |         _Construct_n(_Count, _Val);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:31: note: frame #9: function 'operator()' calls function 'vector' here
  336 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #10: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:334:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #11: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:334:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:334:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:347:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:361:59: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  361 |         std::cout << "Потреблено: " << consumed << "\n";
      |                                                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:347:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:347:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:347:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:409:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<int *>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1563:31: note: frame #5: function '_Growmap' calls function '_Allocate_at_least_helper<std::allocator<int *>>' here
 1563 |         _Mapptr _Newmap     = _Allocate_at_least_helper(_Almap, _Allocsize);
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1072:13: note: frame #6: function '_Emplace_back_internal<const int &>' calls function '_Growmap' here
 1072 |             _Growmap(1);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1176:9: note: frame #7: function 'push_back' calls function '_Emplace_back_internal<const int &>' here
 1176 |         _Emplace_back_internal(_Val);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\queue:116:9: note: frame #8: function 'push' calls function 'push_back' here
  116 |         c.push_back(_Val);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:399:9: note: frame #9: function 'push' calls function 'push' here
  399 |         queue_.push(item);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:411:13: note: frame #10: function 'operator()' calls function 'push' here
  411 |             queue.push(i);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #11: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:409:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #12: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:409:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:409:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:417:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:428:31: note: frame #6: function 'operator()' calls function 'operator<<<std::char_traits<char>>' here
  428 |                     std::cout << "⚠️  TOCTOU exception!\n";
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #7: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:417:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #8: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:417:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:417:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:56:35: warning: an exception may be thrown in function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:54:26)>, 0ULL>' which should not throw exceptions [bugprone-exception-escape]
   56 |     static unsigned int __stdcall _Invoke(void* _RawVals) noexcept /* terminates */ {
      |                                   ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:64:5: note: frame #0: unhandled exception of type 'std::bad_array_new_length' may be thrown in function '_Throw_bad_array_new_length' here
   64 |     _THROW(bad_array_new_length{});
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:144:9: note: frame #1: function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' calls function '_Throw_bad_array_new_length' here
  144 |         _Throw_bad_array_new_length(); // add overflow
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:242:20: note: frame #2: function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' calls function '_Allocate_manually_vector_aligned<std::_Default_allocate_traits>' here
  242 |             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
      |                    ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:982:34: note: frame #3: function 'allocate' calls function '_Allocate<16ULL, std::_Default_allocate_traits, 0>' here
  982 |         return static_cast<_Ty*>(_Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));
      |                                  ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xmemory:2211:16: note: frame #4: function '_Allocate_at_least_helper<std::allocator<int *>>' calls function 'allocate' here
 2211 |         return _Al.allocate(_Count);
      |                ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1563:31: note: frame #5: function '_Growmap' calls function '_Allocate_at_least_helper<std::allocator<int *>>' here
 1563 |         _Mapptr _Newmap     = _Allocate_at_least_helper(_Almap, _Allocsize);
      |                               ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1072:13: note: frame #6: function '_Emplace_back_internal<const int &>' calls function '_Growmap' here
 1072 |             _Growmap(1);
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\deque:1176:9: note: frame #7: function 'push_back' calls function '_Emplace_back_internal<const int &>' here
 1176 |         _Emplace_back_internal(_Val);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\queue:116:9: note: frame #8: function 'push' calls function 'push_back' here
  116 |         c.push_back(_Val);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:31:9: note: frame #9: function 'push' calls function 'push' here
   31 |         queue_.push(item);  // RACE CONDITION!
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:56:13: note: frame #10: function 'operator()' calls function 'push' here
   56 |             queue.push(i);  // RACE CONDITION
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\type_traits:1729:12: note: frame #11: function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:54:26)>' calls function 'operator()' here
 1729 |     return static_cast<_Callable&&>(_Obj)();
      |            ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\thread:60:9: note: frame #12: function '_Invoke<std::tuple<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:54:26)>, 0ULL>' calls function 'invoke<(lambda at D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:54:26)>' here
   60 |         _STD invoke(_STD move(_STD get<_Indices>(_Tup))...);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals_core.h:1946:20: note: expanded from macro '_STD'
 1946 | #define _STD       ::std::
      |                    ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:34:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   34 |     bool pop(T& item) {
      |     ~~~~ ^
      |     auto              -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:35:28: warning: statement should be inside braces [readability-braces-around-statements]
   35 |         if (queue_.empty()) return false;
      |                            ^             
      |                             {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:41:5: warning: function 'size' should be marked [[nodiscard]] [modernize-use-nodiscard]
   41 |     size_t size() const {
      |     ^
      |     [[nodiscard]] 
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:41:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
   41 |     size_t size() const {
      |     ~~~~~~ ^
      |     auto                -> size_t
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:54:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
   54 |     std::thread producer([&queue, &produced]() {
      |                          ^
      |                                                -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:55:29: warning: 10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   55 |         for (int i = 0; i < 10000; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:62:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
   62 |     std::thread consumer([&queue, &consumed]() {
      |                          ^
      |                                                -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:63:13: warning: variable 'item' is not initialized [cppcoreguidelines-init-variables]
   63 |         int item;
      |             ^   
      |                  = 0
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:64:29: warning: 10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   64 |         for (int i = 0; i < 10000; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:87:7: warning: constructor does not initialize these fields: buffer_ [cppcoreguidelines-pro-type-member-init]
   87 | class VulnerableRingBuffer {
      |       ^
   88 | private:
   89 |     T buffer_[N];
      |                 
      |                 {}
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:89:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
   89 |     T buffer_[N];
      |     ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:96:9: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
   96 |         buffer_[head_] = item;
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:101:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  101 |     bool pop(T& item) {
      |     ~~~~ ^
      |     auto              -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:102:28: warning: statement should be inside braces [readability-braces-around-statements]
  102 |         if (head_ == tail_) return false;  // Пустая очередь
      |                            ^                                
      |                             {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:104:16: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
  104 |         item = buffer_[tail_];
      |                ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:116:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  116 |     std::thread producer([&buffer]() {
      |                          ^
      |                                      -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:117:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  117 |         for (int i = 0; i < 100; ++i) {  // Пишем 100 элементов в буфер на 10
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:124:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  124 |     std::thread consumer([&buffer]() {
      |                          ^
      |                                      -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:125:63: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  125 |         std::this_thread::sleep_for(std::chrono::milliseconds(50));  // Задержка
      |                                                               ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:127:13: warning: variable 'item' is not initialized [cppcoreguidelines-init-variables]
  127 |         int item;
      |             ^   
      |                  = 0
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:132:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  132 |             std::this_thread::sleep_for(std::chrono::milliseconds(10));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:166:23: warning: statement should be inside braces [readability-braces-around-statements]
  166 |         if (finished_) return;
      |                       ^       
      |                        {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:173:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  173 |     bool pop(int& item) {
      |     ~~~~ ^
      |     auto                -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:180:28: warning: statement should be inside braces [readability-braces-around-statements]
  180 |         if (queue_.empty()) return false;
      |                            ^             
      |                             {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:191:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  191 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:203:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  203 |     std::thread producer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:204:29: warning: 20 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  204 |         for (int i = 0; i < 20; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:211:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  211 |     std::thread consumer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:212:13: warning: variable 'item' is not initialized [cppcoreguidelines-init-variables]
  212 |         int item;
      |             ^   
      |                  = 0
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:215:67: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  215 |             std::this_thread::sleep_for(std::chrono::milliseconds(100));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:220:29: warning: statement should be inside braces [readability-braces-around-statements]
  220 |     if (producer.joinable()) producer.join();
      |                             ^                
      |                              {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:221:29: warning: statement should be inside braces [readability-braces-around-statements]
  221 |     if (consumer.joinable()) consumer.join();
      |                             ^                
      |                              {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:233:5: warning: do not declare C-style arrays, use 'std::array' instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
  233 |     char data[256];
      |     ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:233:15: warning: 256 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  233 |     char data[256];
      |               ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:235:5: warning: constructor does not initialize these fields: data [cppcoreguidelines-pro-type-member-init]
  233 |     char data[256];
      |                   
      |                   {}
  234 |     
  235 |     Message(int i) : id(i) {
      |     ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:235:17: warning: parameter name 'i' is too short, expected at least 3 characters [readability-identifier-length]
  235 |     Message(int i) : id(i) {
      |                 ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:236:9: warning: the value returned by this function should not be disregarded; neglecting it may lead to errors [cert-err33-c]
  236 |         snprintf(data, sizeof(data), "Message #%d", id);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:236:9: note: cast the expression to void to silence this warning
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:236:9: warning: do not call c-style vararg functions [cppcoreguidelines-pro-type-vararg]
  236 |         snprintf(data, sizeof(data), "Message #%d", id);
      |         ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:236:18: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  236 |         snprintf(data, sizeof(data), "Message #%d", id);
      |                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:248:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  248 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:253:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  253 |     Message* pop() {
      |     ~~~~~~~~ ^
      |     auto           -> Message*
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:255:24: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  255 |         cv_.wait(lock, [this] { return !queue_.empty(); });
      |                        ^
      |                               -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:269:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  269 |     std::thread producer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:270:29: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  270 |         for (int i = 0; i < 5; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:273:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  273 |             std::this_thread::sleep_for(std::chrono::milliseconds(10));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:279:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  279 |     std::thread consumer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:280:29: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  280 |         for (int i = 0; i < 5; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:283:50: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay]
  283 |             std::cout << "Получено: " << msg->data << "\n";  // USE-AFTER-FREE
      |                                          ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:284:67: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  284 |             std::this_thread::sleep_for(std::chrono::milliseconds(50));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:307:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  307 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:312:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  312 |     bool pop(std::vector<char>& data) {
      |     ~~~~ ^
      |     auto                              -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:314:28: warning: statement should be inside braces [readability-braces-around-statements]
  314 |         if (queue_.empty()) return false;
      |                            ^             
      |                             {
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:321:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  321 |     size_t size() const {
      |     ~~~~~~ ^
      |     auto                -> size_t
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:322:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  322 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:334:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  334 |     std::thread producer([&queue, &stop]() {
      |                          ^
      |                                            -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:335:29: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  335 |         for (int i = 0; i < 1000 && !stop; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:42: warning: performing an implicit widening conversion to type 'size_type' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
  336 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                                          ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:42: note: make conversion explicit to silence this warning
    1 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                                          ^~~~~~~~~~~
      |                                          static_cast<size_type>( )
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:42: note: perform multiplication in a wider type
  336 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                                          ^~~~
      |                                          static_cast<long long>( )
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:42: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  336 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                                          ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:336:49: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  336 |             std::vector<char> large_data(1024 * 1024, 'X');  // 1 MB
      |                                                 ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:339:21: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  339 |             if (i % 100 == 0) {
      |                     ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:347:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  347 |     std::thread consumer([&queue, &stop]() {
      |                          ^
      |                                            -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:348:63: warning: 500 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  348 |         std::this_thread::sleep_for(std::chrono::milliseconds(500));
      |                                                               ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:354:67: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  354 |             std::this_thread::sleep_for(std::chrono::milliseconds(10));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:356:29: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  356 |             if (consumed >= 50) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:382:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  382 |     bool isEmpty() {
      |     ~~~~ ^
      |     auto           -> bool
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:383:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  383 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:387:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  387 |     int front() {
      |     ~~~ ^
      |     auto        -> int
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:388:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  388 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:393:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  393 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:398:9: warning: use 'std::scoped_lock' instead of 'std::lock_guard' [modernize-use-scoped-lock]
  398 |         std::lock_guard<std::mutex> lock(mutex_);
      |         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
      |         std::scoped_lock
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:409:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  409 |     std::thread producer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:410:29: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  410 |         for (int i = 0; i < 10; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:412:67: warning: 50 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  412 |             std::this_thread::sleep_for(std::chrono::milliseconds(50));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:417:26: warning: use a trailing return type for this lambda [modernize-use-trailing-return-type]
  417 |     std::thread consumer([&queue]() {
      |                          ^
      |                                     -> void
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:418:29: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  418 |         for (int i = 0; i < 10; ++i) {
      |                             ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:421:71: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  421 |                 std::this_thread::sleep_for(std::chrono::milliseconds(10));
      |                                                                       ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:431:67: warning: 30 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  431 |             std::this_thread::sleep_for(std::chrono::milliseconds(30));
      |                                                                   ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:445:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
  445 | int main() {
      |     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\xiosbase:174:13: note: frame #0: unhandled exception of type 'std::ios_base::failure' may be thrown in function 'clear' here
  174 |             _THROW(failure(_Msg));
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\yvals.h:455:21: note: expanded from macro '_THROW'
  455 | #define _THROW(...) throw __VA_ARGS__
      |                     ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:40:9: note: frame #1: function 'clear' calls function 'clear' here
   40 |         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ios:51:9: note: frame #2: function 'setstate' calls function 'clear' here
   51 |         clear(rdstate() | _State, _Reraise);
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:571:17: note: frame #3: function 'flush' calls function 'setstate' here
  571 |                 _CATCH_IO_END
      |                 ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\iosfwd:30:9: note: expanded from macro '_CATCH_IO_END'
   30 |         _Myios::setstate(ios_base::badbit, true); /* set badbit and rethrow */ \
      |         ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:108:13: note: frame #4: function 'sentry' calls function 'flush' here
  108 |             _Tied->flush();
      |             ^
D:\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.39.33519\include\ostream:774:34: note: frame #5: function 'operator<<<std::char_traits<char>>' calls function 'sentry' here
  774 |     const typename _Myos::sentry _Ok(_Ostr);
      |                                  ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:446:15: note: frame #6: function 'main' calls function 'operator<<<std::char_traits<char>>' here
  446 |     std::cout << "=== УЯЗВИМОСТИ PRODUCER-CONSUMER PATTERN ===\n";
      |               ^
D:\Work\Patterns\07-concurrency\lesson_7_1_producer_consumer\producer_consumer_vulnerabilities.cpp:445:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  445 | int main() {
      | ~~~ ^
      | auto       -> int
Suppressed 138239 warnings (138239 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:20:7: warning: class 'Vulnerablethread_pool' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablethread_pool {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:27:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablethread_pool СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:34:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablethread_pool СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablethread_pool' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablethread_pool {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:48:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablethread_pool СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:55:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablethread_pool СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:86:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze thread_pool_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:88:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all thread_pool_vulnerabilities.cpp" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:96:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g thread_pool_vulnerabilities.cpp -o thread_pool_asan" << std::endl;
      |                                                                                                        ^~~~~~~~~
      |                                                                                                        '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:97:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./thread_pool_asan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:99:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g thread_pool_vulnerabilities.cpp -o thread_pool_tsan" << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:100:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./thread_pool_tsan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:102:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./thread_pool_vulnerabilities" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:110:160: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• thread_pool ===" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\07-concurrency\lesson_7_2_thread_pool\thread_pool_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:20:7: warning: class 'Vulnerableactor_model' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerableactor_model {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:27:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerableactor_model СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:34:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerableactor_model СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerableactor_model' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerableactor_model {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:48:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerableactor_model СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:55:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerableactor_model СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:86:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze actor_model_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:88:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all actor_model_vulnerabilities.cpp" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:96:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g actor_model_vulnerabilities.cpp -o actor_model_asan" << std::endl;
      |                                                                                                        ^~~~~~~~~
      |                                                                                                        '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:97:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./actor_model_asan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:99:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g actor_model_vulnerabilities.cpp -o actor_model_tsan" << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:100:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./actor_model_tsan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:102:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./actor_model_vulnerabilities" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:110:160: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• actor_model ===" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\07-concurrency\lesson_7_3_actor_model\actor_model_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:20:7: warning: class 'Vulnerablereactor' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablereactor {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:27:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablereactor СЃРѕР·РґР°РЅ" << std::endl;
      |                                                          ^~~~~~~~~
      |                                                          '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:34:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablereactor СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablereactor' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablereactor {
      |       ^
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:48:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablereactor СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:55:91: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablereactor СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:86:70: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze reactor_vulnerabilities.cpp" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:88:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all reactor_vulnerabilities.cpp" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:96:96: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g reactor_vulnerabilities.cpp -o reactor_asan" << std::endl;
      |                                                                                                ^~~~~~~~~
      |                                                                                                '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:97:41: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./reactor_asan" << std::endl;
      |                                         ^~~~~~~~~
      |                                         '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:99:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g reactor_vulnerabilities.cpp -o reactor_tsan" << std::endl;
      |                                                                                               ^~~~~~~~~
      |                                                                                               '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:100:41: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./reactor_tsan" << std::endl;
      |                                         ^~~~~~~~~
      |                                         '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:102:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./reactor_vulnerabilities" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:110:156: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• reactor ===" << std::endl;
      |                                                                                                             ^~~~~~~~~
      |                                                                                                             '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\07-concurrency\lesson_7_4_reactor\reactor_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:20:7: warning: class 'Vulnerablecache_aside' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablecache_aside {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:27:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablecache_aside СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:34:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablecache_aside СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablecache_aside' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablecache_aside {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:48:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablecache_aside СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:55:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablecache_aside СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:86:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze cache_aside_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:88:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all cache_aside_vulnerabilities.cpp" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:96:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g cache_aside_vulnerabilities.cpp -o cache_aside_asan" << std::endl;
      |                                                                                                        ^~~~~~~~~
      |                                                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:97:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./cache_aside_asan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:99:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g cache_aside_vulnerabilities.cpp -o cache_aside_tsan" << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:100:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./cache_aside_tsan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:102:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./cache_aside_vulnerabilities" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:110:160: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• cache_aside ===" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_1_cache_aside\cache_aside_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:20:7: warning: class 'Vulnerablecircuit_breaker' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablecircuit_breaker {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:27:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablecircuit_breaker СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:34:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablecircuit_breaker СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablecircuit_breaker' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablecircuit_breaker {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:48:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablecircuit_breaker СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:55:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablecircuit_breaker СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:86:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze circuit_breaker_vulnerabilities.cpp" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:88:84: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all circuit_breaker_vulnerabilities.cpp" << std::endl;
      |                                                                                    ^~~~~~~~~
      |                                                                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:96:112: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g circuit_breaker_vulnerabilities.cpp -o circuit_breaker_asan" << std::endl;
      |                                                                                                                ^~~~~~~~~
      |                                                                                                                '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:97:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./circuit_breaker_asan" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:99:111: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g circuit_breaker_vulnerabilities.cpp -o circuit_breaker_tsan" << std::endl;
      |                                                                                                               ^~~~~~~~~
      |                                                                                                               '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:100:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./circuit_breaker_tsan" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:102:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./circuit_breaker_vulnerabilities" << std::endl;
      |                                                                                     ^~~~~~~~~
      |                                                                                     '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:110:164: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• circuit_breaker ===" << std::endl;
      |                                                                                                                     ^~~~~~~~~
      |                                                                                                                     '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_2_circuit_breaker\circuit_breaker_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:20:7: warning: class 'Vulnerablebulkhead' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablebulkhead {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:27:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablebulkhead СЃРѕР·РґР°РЅ" << std::endl;
      |                                                           ^~~~~~~~~
      |                                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:34:85: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablebulkhead СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                 ^~~~~~~~~
      |                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablebulkhead' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablebulkhead {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:48:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablebulkhead СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:55:92: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablebulkhead СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:86:71: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze bulkhead_vulnerabilities.cpp" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:88:77: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all bulkhead_vulnerabilities.cpp" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:96:98: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g bulkhead_vulnerabilities.cpp -o bulkhead_asan" << std::endl;
      |                                                                                                  ^~~~~~~~~
      |                                                                                                  '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:97:42: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./bulkhead_asan" << std::endl;
      |                                          ^~~~~~~~~
      |                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:99:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g bulkhead_vulnerabilities.cpp -o bulkhead_tsan" << std::endl;
      |                                                                                                 ^~~~~~~~~
      |                                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:100:42: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./bulkhead_tsan" << std::endl;
      |                                          ^~~~~~~~~
      |                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:102:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./bulkhead_vulnerabilities" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:110:157: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• bulkhead ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_3_bulkhead\bulkhead_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:20:7: warning: class 'Vulnerablesaga' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablesaga {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:27:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablesaga СЃРѕР·РґР°РЅ" << std::endl;
      |                                                       ^~~~~~~~~
      |                                                       '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:34:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablesaga СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                             ^~~~~~~~~
      |                                                             '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablesaga' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablesaga {
      |       ^
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:48:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablesaga СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:55:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablesaga СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:86:67: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze saga_vulnerabilities.cpp" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:88:73: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all saga_vulnerabilities.cpp" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:96:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g saga_vulnerabilities.cpp -o saga_asan" << std::endl;
      |                                                                                          ^~~~~~~~~
      |                                                                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:97:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./saga_asan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:99:89: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g saga_vulnerabilities.cpp -o saga_tsan" << std::endl;
      |                                                                                         ^~~~~~~~~
      |                                                                                         '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:100:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./saga_tsan" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:102:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./saga_vulnerabilities" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:110:153: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• saga ===" << std::endl;
      |                                                                                                          ^~~~~~~~~
      |                                                                                                          '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\08-high-load\lesson_8_4_saga\saga_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:20:7: warning: class 'Vulnerableobject_pool' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerableobject_pool {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:27:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerableobject_pool СЃРѕР·РґР°РЅ" << std::endl;
      |                                                              ^~~~~~~~~
      |                                                              '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:34:88: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerableobject_pool СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                    ^~~~~~~~~
      |                                                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerableobject_pool' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerableobject_pool {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:48:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerableobject_pool СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                     ^~~~~~~~~
      |                                                                     '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:55:95: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerableobject_pool СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                           ^~~~~~~~~
      |                                                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:86:74: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze object_pool_vulnerabilities.cpp" << std::endl;
      |                                                                          ^~~~~~~~~
      |                                                                          '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:88:80: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all object_pool_vulnerabilities.cpp" << std::endl;
      |                                                                                ^~~~~~~~~
      |                                                                                '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:96:104: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g object_pool_vulnerabilities.cpp -o object_pool_asan" << std::endl;
      |                                                                                                        ^~~~~~~~~
      |                                                                                                        '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:97:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./object_pool_asan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:99:103: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g object_pool_vulnerabilities.cpp -o object_pool_tsan" << std::endl;
      |                                                                                                       ^~~~~~~~~
      |                                                                                                       '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:100:45: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./object_pool_tsan" << std::endl;
      |                                             ^~~~~~~~~
      |                                             '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:102:81: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./object_pool_vulnerabilities" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:110:160: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• object_pool ===" << std::endl;
      |                                                                                                                 ^~~~~~~~~
      |                                                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\09-performance\lesson_9_1_object_pool\object_pool_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
Suppressed 106438 warnings (106438 in non-user code).
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'

================================================================================
FILE: D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:20:7: warning: class 'Vulnerableflyweight' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerableflyweight {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:27:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerableflyweight СЃРѕР·РґР°РЅ" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:34:86: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerableflyweight СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                  ^~~~~~~~~
      |                                                                  '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerableflyweight' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerableflyweight {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:48:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerableflyweight СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                   ^~~~~~~~~
      |                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:55:93: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerableflyweight СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                         ^~~~~~~~~
      |                                                                         '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:86:72: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze flyweight_vulnerabilities.cpp" << std::endl;
      |                                                                        ^~~~~~~~~
      |                                                                        '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:88:78: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all flyweight_vulnerabilities.cpp" << std::endl;
      |                                                                              ^~~~~~~~~
      |                                                                              '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:96:100: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g flyweight_vulnerabilities.cpp -o flyweight_asan" << std::endl;
      |                                                                                                    ^~~~~~~~~
      |                                                                                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:97:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./flyweight_asan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:99:99: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g flyweight_vulnerabilities.cpp -o flyweight_tsan" << std::endl;
      |                                                                                                   ^~~~~~~~~
      |                                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:100:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./flyweight_tsan" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:102:79: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./flyweight_vulnerabilities" << std::endl;
      |                                                                               ^~~~~~~~~
      |                                                                               '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:110:158: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• flyweight ===" << std::endl;
      |                                                                                                               ^~~~~~~~~
      |                                                                                                               '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\09-performance\lesson_9_2_flyweight\flyweight_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

================================================================================
FILE: D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp
WARNINGS: 30
ERRORS: 0
================================================================================
106468 warnings generated.
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:20:7: warning: class 'Vulnerablecommand_queue' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   20 | class Vulnerablecommand_queue {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:27:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   27 |         std::cout << "Vulnerablecommand_queue СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                ^~~~~~~~~
      |                                                                '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:34:90: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   34 |         std::cout << "Vulnerablecommand_queue СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                      ^~~~~~~~~
      |                                                                      '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:41:7: warning: class 'AnotherVulnerablecommand_queue' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
   41 | class AnotherVulnerablecommand_queue {
      |       ^
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:48:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   48 |         std::cout << "AnotherVulnerablecommand_queue СЃРѕР·РґР°РЅ" << std::endl;
      |                                                                       ^~~~~~~~~
      |                                                                       '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:55:97: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   55 |         std::cout << "AnotherVulnerablecommand_queue СѓРЅРёС‡С‚РѕР¶РµРЅ" << std::endl;
      |                                                                             ^~~~~~~~~
      |                                                                             '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:64:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   64 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 1 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:68:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   68 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 1 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:72:129: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   72 |     std::cout << "\n=== Р”РµРјРѕРЅСЃС‚СЂР°С†РёСЏ СѓСЏР·РІРёРјРѕСЃС‚Рё 2 ===" << std::endl;
      |                                                                                 ^~~~~~~~~
      |                                                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:76:141: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   76 |     std::cout << "РЈСЏР·РІРёРјРѕСЃС‚СЊ 2 РїСЂРѕРґРµРјРѕРЅСЃС‚СЂРёСЂРѕРІР°РЅР°" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:84:170: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   84 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ СЃС‚Р°С‚РёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:85:49: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   85 |     std::cout << "1. Clang Static Analyzer:" << std::endl;
      |                                                 ^~~~~~~~~
      |                                                 '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:86:76: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   86 |     std::cout << "   clang --analyze command_queue_vulnerabilities.cpp" << std::endl;
      |                                                                            ^~~~~~~~~
      |                                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:87:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   87 |     std::cout << "2. Cppcheck:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:88:82: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   88 |     std::cout << "   cppcheck --enable=all command_queue_vulnerabilities.cpp" << std::endl;
      |                                                                                  ^~~~~~~~~
      |                                                                                  '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:89:38: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   89 |     std::cout << "3. PVS-Studio:" << std::endl;
      |                                      ^~~~~~~~~
      |                                      '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:90:60: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   90 |     std::cout << "   pvs-studio-analyzer trace -- make" << std::endl;
      |                                                            ^~~~~~~~~
      |                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:94:172: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   94 |     std::cout << "\n=== Р<U+0098>РЅСЃС‚СЂСѓРєС†РёРё РґР»СЏ РґРёРЅР°РјРёС‡РµСЃРєРѕРіРѕ Р°РЅР°Р»РёР·Р° ===" << std::endl;
      |                                                                                                              ^~~~~~~~~
      |                                                                                                              '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:95:44: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   95 |     std::cout << "1. AddressSanitizer:" << std::endl;
      |                                            ^~~~~~~~~
      |                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:96:108: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   96 |     std::cout << "   g++ -fsanitize=address -g command_queue_vulnerabilities.cpp -o command_queue_asan" << std::endl;
      |                                                                                                            ^~~~~~~~~
      |                                                                                                            '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:97:47: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   97 |     std::cout << "   ./command_queue_asan" << std::endl;
      |                                               ^~~~~~~~~
      |                                               '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:98:43: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   98 |     std::cout << "2. ThreadSanitizer:" << std::endl;
      |                                           ^~~~~~~~~
      |                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:99:107: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
   99 |     std::cout << "   g++ -fsanitize=thread -g command_queue_vulnerabilities.cpp -o command_queue_tsan" << std::endl;
      |                                                                                                           ^~~~~~~~~
      |                                                                                                           '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:100:47: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  100 |     std::cout << "   ./command_queue_tsan" << std::endl;
      |                                               ^~~~~~~~~
      |                                               '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:101:36: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  101 |     std::cout << "3. Valgrind:" << std::endl;
      |                                    ^~~~~~~~~
      |                                    '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:102:83: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  102 |     std::cout << "   valgrind --tool=memcheck ./command_queue_vulnerabilities" << std::endl;
      |                                                                                   ^~~~~~~~~
      |                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:109:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
  109 | int main() {
      | ~~~ ^
      | auto       -> int
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:110:162: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  110 |     std::cout << "=== РђРќРђР›Р<U+0098>Р— РЈРЇР—Р’Р<U+0098>РњРћРЎРўР•Р™ Р’ РџРђРўРўР•Р РќР• command_queue ===" << std::endl;
      |                                                                                                                   ^~~~~~~~~
      |                                                                                                                   '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:120:178: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  120 |     std::cout << "\n=== Р’РќР<U+0098>РњРђРќР<U+0098>Р•: Р­С‚РѕС‚ РєРѕРґ СЃРѕРґРµСЂР¶РёС‚ СѓСЏР·РІРёРјРѕСЃС‚Рё! ===" << std::endl;
      |                                                                                                                        ^~~~~~~~~
      |                                                                                                                        '\n'
D:\Work\Patterns\09-performance\lesson_9_3_command_queue\command_queue_vulnerabilities.cpp:121:228: warning: do not use 'std::endl' with streams; use '\n' instead [performance-avoid-endl]
  121 |     std::cout << "Р<U+0098>СЃРїРѕР»СЊР·СѓР№С‚Рµ С‚РѕР»СЊРєРѕ РґР»СЏ РѕР±СѓС‡РµРЅРёСЏ Рё Р°РЅР°Р»РёР·Р° Р±РµР·РѕРїР°СЃРЅРѕСЃС‚Рё." << std::endl;
      |                                                                                                                                      ^~~~~~~~~
      |                                                                                                                                      '\n'
Suppressed 106438 warnings (106438 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.

