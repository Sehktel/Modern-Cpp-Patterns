#include <iostream>
#include <atomic>
#include <chrono>
#include <functional>
#include <mutex>
#include <optional>
#include <string>
#include <thread>
#include <random>
#include <vector>
#include <unordered_map>
#include <memory>

/**
 * @file circuit_breaker_pattern.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Circuit Breaker Pattern
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é Circuit Breaker —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
 * –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤.
 */

// ============================================================================
// CIRCUIT BREAKER IMPLEMENTATION
// ============================================================================

/**
 * @brief –°–æ—Å—Ç–æ—è–Ω–∏—è Circuit Breaker
 */
enum class CircuitState {
    CLOSED,    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN,      // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    HALF_OPEN  // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
};

/**
 * @brief –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Circuit Breaker
 */
template<typename T>
class CircuitBreaker {
private:
    std::string name_;
    std::atomic<CircuitState> state_{CircuitState::CLOSED};
    std::atomic<int> failureCount_{0};
    std::atomic<int> successCount_{0};
    
    int failureThreshold_;
    int successThreshold_;
    std::chrono::milliseconds timeout_;
    
    std::chrono::system_clock::time_point lastFailureTime_;
    std::mutex mutex_;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    std::atomic<size_t> totalRequests_{0};
    std::atomic<size_t> totalFailures_{0};
    std::atomic<size_t> totalSuccesses_{0};
    std::atomic<size_t> rejectedRequests_{0};
    
public:
    CircuitBreaker(const std::string& name, 
                   int failureThreshold = 5,
                   int successThreshold = 3,
                   std::chrono::milliseconds timeout = std::chrono::seconds(30))
        : name_(name), failureThreshold_(failureThreshold), 
          successThreshold_(successThreshold), timeout_(timeout) {
        
        std::cout << "[" << name_ << "] üîß Circuit Breaker —Å–æ–∑–¥–∞–Ω: "
                  << "failureThreshold=" << failureThreshold_
                  << ", successThreshold=" << successThreshold_
                  << ", timeout=" << timeout_.count() << "ms" << std::endl;
    }
    
    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Circuit Breaker
    std::optional<T> execute(std::function<T()> operation) {
        totalRequests_.fetch_add(1);
        
        if (!canExecute()) {
            rejectedRequests_.fetch_add(1);
            std::cout << "[" << name_ << "] üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: " 
                      << stateToString(state_.load()) << ")" << std::endl;
            return std::nullopt;
        }
        
        std::cout << "[" << name_ << "] ‚úÖ –í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: " 
                  << stateToString(state_.load()) << ")" << std::endl;
        
        try {
            T result = operation();
            onSuccess();
            return result;
        } catch (const std::exception& e) {
            onFailure();
            std::cout << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " << e.what() << std::endl;
            throw;
        }
    }
    
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
    template<typename Callback>
    void executeAsync(std::function<T()> operation, Callback callback) {
        std::thread([this, operation, callback]() {
            try {
                auto result = execute(operation);
                callback(result);
            } catch (const std::exception& e) {
                callback(std::nullopt);
            }
        }).detach();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    CircuitState getState() const {
        return state_.load();
    }
    
    bool isClosed() const {
        return state_.load() == CircuitState::CLOSED;
    }
    
    bool isOpen() const {
        return state_.load() == CircuitState::OPEN;
    }
    
    bool isHalfOpen() const {
        return state_.load() == CircuitState::HALF_OPEN;
    }
    
    std::string getStateString() const {
        return stateToString(state_.load());
    }
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    void forceState(CircuitState newState) {
        state_.store(newState);
        std::cout << "[" << name_ << "] üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞: " 
                  << stateToString(newState) << std::endl;
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    void reset() {
        std::lock_guard<std::mutex> lock(mutex_);
        state_.store(CircuitState::CLOSED);
        failureCount_.store(0);
        successCount_.store(0);
        std::cout << "[" << name_ << "] üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ" << std::endl;
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    struct Statistics {
        CircuitState state;
        size_t totalRequests;
        size_t totalFailures;
        size_t totalSuccesses;
        size_t rejectedRequests;
        double failureRate;
        double successRate;
        int currentFailureCount;
        int currentSuccessCount;
    };
    
    Statistics getStatistics() const {
        Statistics stats;
        stats.state = state_.load();
        stats.totalRequests = totalRequests_.load();
        stats.totalFailures = totalFailures_.load();
        stats.totalSuccesses = totalSuccesses_.load();
        stats.rejectedRequests = rejectedRequests_.load();
        stats.currentFailureCount = failureCount_.load();
        stats.currentSuccessCount = successCount_.load();
        
        if (stats.totalRequests > 0) {
            stats.failureRate = static_cast<double>(stats.totalFailures) / stats.totalRequests;
            stats.successRate = static_cast<double>(stats.totalSuccesses) / stats.totalRequests;
        } else {
            stats.failureRate = 0.0;
            stats.successRate = 0.0;
        }
        
        return stats;
    }
    
    void printStatistics() const {
        auto stats = getStatistics();
        std::cout << "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê CIRCUIT BREAKER [" << name_ << "] ===" << std::endl;
        std::cout << "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " << stateToString(stats.state) << std::endl;
        std::cout << "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " << stats.totalRequests << std::endl;
        std::cout << "–£—Å–ø–µ—à–Ω—ã—Ö: " << stats.totalSuccesses << std::endl;
        std::cout << "–ù–µ—É–¥–∞—á–Ω—ã—Ö: " << stats.totalFailures << std::endl;
        std::cout << "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: " << stats.rejectedRequests << std::endl;
        std::cout << "–¢–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏: failures=" << stats.currentFailureCount 
                  << ", successes=" << stats.currentSuccessCount << std::endl;
        std::cout << "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " << (stats.successRate * 100) << "%" << std::endl;
        std::cout << "–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á: " << (stats.failureRate * 100) << "%" << std::endl;
        std::cout << "===============================================" << std::endl;
    }
    
private:
    bool canExecute() {
        CircuitState currentState = state_.load();
        
        switch (currentState) {
            case CircuitState::CLOSED:
                return true;
                
            case CircuitState::OPEN:
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ timeout
                {
                    std::lock_guard<std::mutex> lock(mutex_);
                    if (std::chrono::system_clock::now() - lastFailureTime_ >= timeout_) {
                        state_.store(CircuitState::HALF_OPEN);
                        successCount_.store(0);
                        std::cout << "[" << name_ << "] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN (timeout –∏—Å—Ç–µ–∫)" << std::endl;
                        return true;
                    }
                }
                return false;
                
            case CircuitState::HALF_OPEN:
                return true;
                
            default:
                return false;
        }
    }
    
    void onSuccess() {
        totalSuccesses_.fetch_add(1);
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::HALF_OPEN) {
            int currentSuccessCount = successCount_.fetch_add(1) + 1;
            
            std::cout << "[" << name_ << "] ‚úÖ –£—Å–ø–µ—Ö –≤ HALF_OPEN —Ä–µ–∂–∏–º–µ (" 
                      << currentSuccessCount << "/" << successThreshold_ << ")" << std::endl;
            
            if (currentSuccessCount >= successThreshold_) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ CLOSED —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state_.store(CircuitState::CLOSED);
                failureCount_.store(0);
                successCount_.store(0);
                
                std::cout << "[" << name_ << "] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (—Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)" << std::endl;
            }
        } else if (currentState == CircuitState::CLOSED) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã–∑–æ–≤–µ
            failureCount_.store(0);
        }
    }
    
    void onFailure() {
        totalFailures_.fetch_add(1);
        
        std::lock_guard<std::mutex> lock(mutex_);
        lastFailureTime_ = std::chrono::system_clock::now();
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::CLOSED || currentState == CircuitState::HALF_OPEN) {
            int currentFailureCount = failureCount_.fetch_add(1) + 1;
            
            std::cout << "[" << name_ << "] ‚ùå –ù–µ—É–¥–∞—á–∞ (" 
                      << currentFailureCount << "/" << failureThreshold_ << ")" << std::endl;
            
            if (currentFailureCount >= failureThreshold_) {
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ OPEN —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state_.store(CircuitState::OPEN);
                std::cout << "[" << name_ << "] ‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" << std::endl;
            }
        }
    }
    
    std::string stateToString(CircuitState state) const {
        switch (state) {
            case CircuitState::CLOSED: return "CLOSED";
            case CircuitState::OPEN: return "OPEN";
            case CircuitState::HALF_OPEN: return "HALF_OPEN";
            default: return "UNKNOWN";
        }
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
// ============================================================================

/**
 * @brief –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
class UnstableService {
private:
    std::mt19937 generator_;
    std::uniform_real_distribution<double> distribution_;
    double failureRate_;
    
public:
    UnstableService(double failureRate = 0.3) 
        : generator_(std::random_device{}()),
          distribution_(0.0, 1.0),
          failureRate_(failureRate) {}
    
    std::string callService(const std::string& request) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        std::this_thread::sleep_for(std::chrono::milliseconds(100 + (generator_() % 200)));
        
        // –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
        if (distribution_(generator_) < failureRate_) {
            throw std::runtime_error("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + request);
        }
        
        return "–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: " + request;
    }
    
    void setFailureRate(double rate) {
        failureRate_ = rate;
        std::cout << "[UnstableService] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: " << (rate * 100) << "%" << std::endl;
    }
};

/**
 * @brief –°–µ—Ä–≤–∏—Å —Å Circuit Breaker
 */
class ResilientService {
private:
    CircuitBreaker<std::string> circuitBreaker_;
    UnstableService service_;
    
public:
    ResilientService(const std::string& name, double failureRate = 0.3)
        : circuitBreaker_(name, 3, 2, std::chrono::seconds(5)),
          service_(failureRate) {}
    
    std::optional<std::string> callService(const std::string& request) {
        return circuitBreaker_.execute([this, &request]() {
            return service_.callService(request);
        });
    }
    
    void setFailureRate(double rate) {
        service_.setFailureRate(rate);
    }
    
    void printStatistics() const {
        circuitBreaker_.printStatistics();
    }
    
    auto getStatistics() const {
        return circuitBreaker_.getStatistics();
    }
    
    void reset() {
        circuitBreaker_.reset();
    }
};

/**
 * @brief –°–∏—Å—Ç–µ–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
 */
class ServiceOrchestrator {
private:
    std::unordered_map<std::string, std::unique_ptr<ResilientService>> services_;
    
public:
    void addService(const std::string& name, double failureRate = 0.3) {
        services_[name] = std::make_unique<ResilientService>(name, failureRate);
        std::cout << "[Orchestrator] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å: " << name << std::endl;
    }
    
    std::optional<std::string> callService(const std::string& serviceName, const std::string& request) {
        auto it = services_.find(serviceName);
        if (it != services_.end()) {
            return it->second->callService(request);
        } else {
            std::cout << "[Orchestrator] ‚ùì –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: " << serviceName << std::endl;
            return std::nullopt;
        }
    }
    
    void setServiceFailureRate(const std::string& serviceName, double rate) {
        auto it = services_.find(serviceName);
        if (it != services_.end()) {
            it->second->setFailureRate(rate);
        }
    }
    
    void printAllStatistics() {
        std::cout << "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–°–ï–• –°–ï–†–í–ò–°–û–í ===" << std::endl;
        for (const auto& pair : services_) {
            pair.second->printStatistics();
        }
    }
    
    void resetAllServices() {
        for (const auto& pair : services_) {
            pair.second->reset();
        }
        std::cout << "[Orchestrator] üîÑ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã" << std::endl;
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ Circuit Breaker
 */
void demonstrateBasicCircuitBreaker() {
    std::cout << "\n=== –ë–ê–ó–û–í–´–ô CIRCUIT BREAKER ===" << std::endl;
    
    ResilientService service("TestService", 0.4); // 40% –æ—à–∏–±–æ–∫
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    for (int i = 1; i <= 20; ++i) {
        std::string request = "Request_" + std::to_string(i);
        auto result = service.callService(request);
        
        if (result) {
            std::cout << "‚úÖ –£—Å–ø–µ—Ö: " << *result << std::endl;
        } else {
            std::cout << "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω Circuit Breaker" << std::endl;
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        std::this_thread::sleep_for(std::chrono::milliseconds(200));
    }
    
    service.printStatistics();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
 */
void demonstrateServiceRecovery() {
    std::cout << "\n=== –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –°–ï–†–í–ò–°–ê ===" << std::endl;
    
    ResilientService service("RecoveryService", 0.8); // 80% –æ—à–∏–±–æ–∫
    
    // –§–∞–∑–∞ 1: –°–µ—Ä–≤–∏—Å –ø–∞–¥–∞–µ—Ç
    std::cout << "–§–∞–∑–∞ 1: –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ (80% –æ—à–∏–±–æ–∫)" << std::endl;
    for (int i = 1; i <= 10; ++i) {
        auto result = service.callService("Request_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    service.printStatistics();
    
    // –§–∞–∑–∞ 2: –ñ–¥–µ–º timeout
    std::cout << "\n–§–∞–∑–∞ 2: –ñ–¥–µ–º timeout –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ HALF_OPEN..." << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(6));
    
    // –§–∞–∑–∞ 3: –°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    std::cout << "\n–§–∞–∑–∞ 3: –°–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è (0% –æ—à–∏–±–æ–∫)" << std::endl;
    service.setFailureRate(0.0);
    
    for (int i = 11; i <= 20; ++i) {
        auto result = service.callService("Request_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    service.printStatistics();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
void demonstrateMultipleServices() {
    std::cout << "\n=== –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´ ===" << std::endl;
    
    ServiceOrchestrator orchestrator;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–∏—Å—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    orchestrator.addService("UserService", 0.1);    // 10% –æ—à–∏–±–æ–∫
    orchestrator.addService("OrderService", 0.3);   // 30% –æ—à–∏–±–æ–∫
    orchestrator.addService("PaymentService", 0.6); // 60% –æ—à–∏–±–æ–∫
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ —Ä–∞–∑–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
    std::vector<std::string> services = {"UserService", "OrderService", "PaymentService"};
    
    for (int round = 1; round <= 3; ++round) {
        std::cout << "\n--- –†–∞—É–Ω–¥ " << round << " ---" << std::endl;
        
        for (const auto& serviceName : services) {
            for (int i = 1; i <= 3; ++i) {
                std::string request = "Request_" + std::to_string(i);
                auto result = orchestrator.callService(serviceName, request);
                
                if (result) {
                    std::cout << "‚úÖ " << serviceName << ": " << *result << std::endl;
                } else {
                    std::cout << "‚ùå " << serviceName << ": –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω" << std::endl;
                }
                
                std::this_thread::sleep_for(std::chrono::milliseconds(200));
            }
        }
    }
    
    orchestrator.printAllStatistics();
}

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
 */
void demonstrateAdaptiveBehavior() {
    std::cout << "\n=== –ê–î–ê–ü–¢–ò–í–ù–û–ï –ü–û–í–ï–î–ï–ù–ò–ï ===" << std::endl;
    
    ResilientService service("AdaptiveService", 0.2);
    
    // –§–∞–∑–∞ 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    std::cout << "–§–∞–∑–∞ 1: –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (20% –æ—à–∏–±–æ–∫)" << std::endl;
    for (int i = 1; i <= 5; ++i) {
        auto result = service.callService("Normal_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    // –§–∞–∑–∞ 2: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É
    std::cout << "\n–§–∞–∑–∞ 2: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ (60% –æ—à–∏–±–æ–∫)" << std::endl;
    service.setFailureRate(0.6);
    
    for (int i = 6; i <= 10; ++i) {
        auto result = service.callService("HighLoad_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    // –§–∞–∑–∞ 3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    std::cout << "\n–§–∞–∑–∞ 3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è (90% –æ—à–∏–±–æ–∫)" << std::endl;
    service.setFailureRate(0.9);
    
    for (int i = 11; i <= 15; ++i) {
        auto result = service.callService("Critical_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    // –§–∞–∑–∞ 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    std::cout << "\n–§–∞–∑–∞ 4: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏" << std::endl;
    std::this_thread::sleep_for(std::chrono::seconds(6)); // –ñ–¥–µ–º timeout
    service.setFailureRate(0.1); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
    
    for (int i = 16; i <= 20; ++i) {
        auto result = service.callService("Recovery_" + std::to_string(i));
        std::this_thread::sleep_for(std::chrono::milliseconds(300));
    }
    
    service.printStatistics();
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üîå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Circuit Breaker Pattern" << std::endl;
    std::cout << std::string(60, '=') << std::endl;
    
    try {
        demonstrateBasicCircuitBreaker();
        demonstrateServiceRecovery();
        demonstrateMultipleServices();
        demonstrateAdaptiveBehavior();
        
        std::cout << "\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    std::cout << "\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" << std::endl;
    std::cout << "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∫–∞—Å–∫–∞–¥–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤" << std::endl;
    std::cout << "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥–∏ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" << std::endl;
    std::cout << "3. –†–µ–∞–ª–∏–∑—É–π—Ç–µ fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º Circuit Breaker" << std::endl;
    std::cout << "4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Circuit Breakers" << std::endl;
    std::cout << "5. –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –æ—Ç–∫–∞–∑–æ–≤" << std::endl;
    
    return 0;
}
