/**
 * @file circuit_breaker_cpp23_comparison.cpp
 * @brief –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Circuit Breaker Pattern: C++17/20 vs C++23
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π C++23.
 */

#include <iostream>
#include <atomic>
#include <chrono>
#include <functional>
#include <mutex>
#include <optional>
#include <string>
#include <thread>
#include <random>
#include <vector>
#include <unordered_map>
#include <memory>

// ============================================================================
// C++17/20 –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (–¢–ï–ö–£–©–ê–Ø)
// ============================================================================

/**
 * @brief –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Circuit Breaker (C++17/20)
 */
enum class CircuitState {
    CLOSED,    // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    OPEN,      // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–∑–æ–≤–æ–≤
    HALF_OPEN  // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
};

template<typename T>
class CircuitBreakerCpp20 {
private:
    std::string name_;
    std::atomic<CircuitState> state_{CircuitState::CLOSED};
    std::atomic<int> failureCount_{0};
    std::atomic<int> successCount_{0};
    
    int failureThreshold_;
    int successThreshold_;
    std::chrono::milliseconds timeout_;
    
    std::chrono::system_clock::time_point lastFailureTime_;
    std::mutex mutex_;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    std::atomic<size_t> totalRequests_{0};
    std::atomic<size_t> totalFailures_{0};
    std::atomic<size_t> totalSuccesses_{0};
    std::atomic<size_t> rejectedRequests_{0};
    
public:
    CircuitBreakerCpp20(const std::string& name, 
                        int failureThreshold = 5,
                        int successThreshold = 3,
                        std::chrono::milliseconds timeout = std::chrono::seconds(30))
        : name_(name), failureThreshold_(failureThreshold), 
          successThreshold_(successThreshold), timeout_(timeout) {
        
        // ‚ùå C++17/20: –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å std::cout
        std::cout << "[" << name_ << "] üîß Circuit Breaker —Å–æ–∑–¥–∞–Ω: "
                  << "failureThreshold=" << failureThreshold_
                  << ", successThreshold=" << successThreshold_
                  << ", timeout=" << timeout_.count() << "ms" << std::endl;
    }
    
    // ‚ùå C++17/20: std::optional –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
    std::optional<T> execute(std::function<T()> operation) {
        totalRequests_.fetch_add(1);
        
        if (!canExecute()) {
            rejectedRequests_.fetch_add(1);
            std::cout << "[" << name_ << "] üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: " 
                      << stateToString(state_.load()) << ")" << std::endl;
            return std::nullopt; // ‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        }
        
        std::cout << "[" << name_ << "] ‚úÖ –í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: " 
                  << stateToString(state_.load()) << ")" << std::endl;
        
        try {
            T result = operation();
            onSuccess();
            return result;
        } catch (const std::exception& e) {
            onFailure();
            std::cout << "[" << name_ << "] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " << e.what() << std::endl;
            throw; // ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—à–∏–±–∫–∏
        }
    }
    
    // ‚ùå C++17/20: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    void printStatistics() const {
        auto stats = getStatistics();
        std::cout << "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê CIRCUIT BREAKER [" << name_ << "] ===" << std::endl;
        std::cout << "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " << stateToString(stats.state) << std::endl;
        std::cout << "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " << stats.totalRequests << std::endl;
        std::cout << "–£—Å–ø–µ—à–Ω—ã—Ö: " << stats.totalSuccesses << std::endl;
        std::cout << "–ù–µ—É–¥–∞—á–Ω—ã—Ö: " << stats.totalFailures << std::endl;
        std::cout << "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: " << stats.rejectedRequests << std::endl;
        std::cout << "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " << (stats.successRate * 100) << "%" << std::endl;
        std::cout << "===============================================" << std::endl;
    }
    
private:
    bool canExecute() {
        CircuitState currentState = state_.load();
        
        switch (currentState) {
            case CircuitState::CLOSED:
                return true;
                
            case CircuitState::OPEN:
                {
                    std::lock_guard<std::mutex> lock(mutex_);
                    if (std::chrono::system_clock::now() - lastFailureTime_ >= timeout_) {
                        state_.store(CircuitState::HALF_OPEN);
                        successCount_.store(0);
                        std::cout << "[" << name_ << "] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN (timeout –∏—Å—Ç–µ–∫)" << std::endl;
                        return true;
                    }
                }
                return false;
                
            case CircuitState::HALF_OPEN:
                return true;
                
            default:
                return false;
        }
    }
    
    void onSuccess() {
        totalSuccesses_.fetch_add(1);
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::HALF_OPEN) {
            int currentSuccessCount = successCount_.fetch_add(1) + 1;
            
            std::cout << "[" << name_ << "] ‚úÖ –£—Å–ø–µ—Ö –≤ HALF_OPEN —Ä–µ–∂–∏–º–µ (" 
                      << currentSuccessCount << "/" << successThreshold_ << ")" << std::endl;
            
            if (currentSuccessCount >= successThreshold_) {
                state_.store(CircuitState::CLOSED);
                failureCount_.store(0);
                successCount_.store(0);
                
                std::cout << "[" << name_ << "] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (—Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)" << std::endl;
            }
        } else if (currentState == CircuitState::CLOSED) {
            failureCount_.store(0);
        }
    }
    
    void onFailure() {
        totalFailures_.fetch_add(1);
        
        std::lock_guard<std::mutex> lock(mutex_);
        lastFailureTime_ = std::chrono::system_clock::now();
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::CLOSED || currentState == CircuitState::HALF_OPEN) {
            int currentFailureCount = failureCount_.fetch_add(1) + 1;
            
            std::cout << "[" << name_ << "] ‚ùå –ù–µ—É–¥–∞—á–∞ (" 
                      << currentFailureCount << "/" << failureThreshold_ << ")" << std::endl;
            
            if (currentFailureCount >= failureThreshold_) {
                state_.store(CircuitState::OPEN);
                std::cout << "[" << name_ << "] ‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" << std::endl;
            }
        }
    }
    
    std::string stateToString(CircuitState state) const {
        switch (state) {
            case CircuitState::CLOSED: return "CLOSED";
            case CircuitState::OPEN: return "OPEN";
            case CircuitState::HALF_OPEN: return "HALF_OPEN";
            default: return "UNKNOWN";
        }
    }
    
    struct Statistics {
        CircuitState state;
        size_t totalRequests;
        size_t totalFailures;
        size_t totalSuccesses;
        size_t rejectedRequests;
        double failureRate;
        double successRate;
        int currentFailureCount;
        int currentSuccessCount;
    };
    
    Statistics getStatistics() const {
        Statistics stats;
        stats.state = state_.load();
        stats.totalRequests = totalRequests_.load();
        stats.totalFailures = totalFailures_.load();
        stats.totalSuccesses = totalSuccesses_.load();
        stats.rejectedRequests = rejectedRequests_.load();
        stats.currentFailureCount = failureCount_.load();
        stats.currentSuccessCount = successCount_.load();
        
        if (stats.totalRequests > 0) {
            stats.failureRate = static_cast<double>(stats.totalFailures) / stats.totalRequests;
            stats.successRate = static_cast<double>(stats.totalSuccesses) / stats.totalRequests;
        } else {
            stats.failureRate = 0.0;
            stats.successRate = 0.0;
        }
        
        return stats;
    }
};

// ============================================================================
// C++23 –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø (–£–õ–£–ß–®–ï–ù–ù–ê–Ø)
// ============================================================================

// ‚úÖ C++23: –ù–æ–≤—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
#ifdef __cpp_lib_expected
#include <expected>
#endif

#ifdef __cpp_lib_print
#include <print>
#endif

#ifdef __cpp_lib_stacktrace
#include <stacktrace>
#endif

/**
 * @brief –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Circuit Breaker (C++23)
 */
template<typename T, typename E = std::string>
class CircuitBreakerCpp23 {
private:
    std::string name_;
    std::atomic<CircuitState> state_{CircuitState::CLOSED};
    std::atomic<int> failureCount_{0};
    std::atomic<int> successCount_{0};
    
    int failureThreshold_;
    int successThreshold_;
    std::chrono::milliseconds timeout_;
    
    std::chrono::system_clock::time_point lastFailureTime_;
    std::mutex mutex_;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    std::atomic<size_t> totalRequests_{0};
    std::atomic<size_t> totalFailures_{0};
    std::atomic<size_t> totalSuccesses_{0};
    std::atomic<size_t> rejectedRequests_{0};
    
public:
    CircuitBreakerCpp23(const std::string& name, 
                        int failureThreshold = 5,
                        int successThreshold = 3,
                        std::chrono::milliseconds timeout = std::chrono::seconds(30))
        : name_(name), failureThreshold_(failureThreshold), 
          successThreshold_(successThreshold), timeout_(timeout) {
        
        // ‚úÖ C++23: –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å std::print
#ifdef __cpp_lib_print
        std::print("[{}] üîß Circuit Breaker —Å–æ–∑–¥–∞–Ω: failureThreshold={}, successThreshold={}, timeout={}ms\n",
                   name_, failureThreshold_, successThreshold_, timeout_.count());
#else
        std::cout << "[" << name_ << "] üîß Circuit Breaker —Å–æ–∑–¥–∞–Ω: "
                  << "failureThreshold=" << failureThreshold_
                  << ", successThreshold=" << successThreshold_
                  << ", timeout=" << timeout_.count() << "ms" << std::endl;
#endif
    }
    
    // ‚úÖ C++23: std::expected —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
    std::expected<T, E> execute(std::function<std::expected<T, E>()> operation) {
        totalRequests_.fetch_add(1);
        
        if (!canExecute()) {
            rejectedRequests_.fetch_add(1);
            E error = "Circuit breaker is " + stateToString(state_.load());
            
#ifdef __cpp_lib_print
            std::print("[{}] üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω: {}\n", name_, error);
#else
            std::cout << "[" << name_ << "] üö´ –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω: " << error << std::endl;
#endif
            
            return std::unexpected(std::move(error)); // ‚úÖ –ß–µ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        }
        
#ifdef __cpp_lib_print
        std::print("[{}] ‚úÖ –í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: {})\n", name_, stateToString(state_.load()));
#else
        std::cout << "[" << name_ << "] ‚úÖ –í—ã–ø–æ–ª–Ω—è—é –æ–ø–µ—Ä–∞—Ü–∏—é (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: " 
                  << stateToString(state_.load()) << ")" << std::endl;
#endif
        
        auto result = operation();
        if (result) {
            onSuccess();
        } else {
            onFailure(result.error());
        }
        
        return result; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
    }
    
    // ‚úÖ C++23: –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    void printStatistics() const {
        auto stats = getStatistics();
        
#ifdef __cpp_lib_print
        std::print("\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê CIRCUIT BREAKER [{}] ===\n", name_);
        std::print("–°–æ—Å—Ç–æ—è–Ω–∏–µ: {}\n", stateToString(stats.state));
        std::print("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}\n", stats.totalRequests);
        std::print("–£—Å–ø–µ—à–Ω—ã—Ö: {}\n", stats.totalSuccesses);
        std::print("–ù–µ—É–¥–∞—á–Ω—ã—Ö: {}\n", stats.totalFailures);
        std::print("–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: {}\n", stats.rejectedRequests);
        std::print("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {:.2f}%\n", stats.successRate * 100);
        std::print("–ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á: {:.2f}%\n", stats.failureRate * 100);
        std::print("===============================================\n");
#else
        std::cout << "\n=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê CIRCUIT BREAKER [" << name_ << "] ===" << std::endl;
        std::cout << "–°–æ—Å—Ç–æ—è–Ω–∏–µ: " << stateToString(stats.state) << std::endl;
        std::cout << "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: " << stats.totalRequests << std::endl;
        std::cout << "–£—Å–ø–µ—à–Ω—ã—Ö: " << stats.totalSuccesses << std::endl;
        std::cout << "–ù–µ—É–¥–∞—á–Ω—ã—Ö: " << stats.totalFailures << std::endl;
        std::cout << "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö: " << stats.rejectedRequests << std::endl;
        std::cout << "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: " << (stats.successRate * 100) << "%" << std::endl;
        std::cout << "===============================================" << std::endl;
#endif
    }
    
    // ‚úÖ C++23: –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
    std::vector<E> getRecentErrors() const {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã —Ö—Ä–∞–Ω–∏–ª–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
        return {};
    }
    
private:
    bool canExecute() {
        CircuitState currentState = state_.load();
        
        switch (currentState) {
            case CircuitState::CLOSED:
                return true;
                
            case CircuitState::OPEN:
                {
                    std::lock_guard<std::mutex> lock(mutex_);
                    if (std::chrono::system_clock::now() - lastFailureTime_ >= timeout_) {
                        state_.store(CircuitState::HALF_OPEN);
                        successCount_.store(0);
                        
#ifdef __cpp_lib_print
                        std::print("[{}] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN (timeout –∏—Å—Ç–µ–∫)\n", name_);
#else
                        std::cout << "[" << name_ << "] üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ HALF_OPEN (timeout –∏—Å—Ç–µ–∫)" << std::endl;
#endif
                        return true;
                    }
                }
                return false;
                
            case CircuitState::HALF_OPEN:
                return true;
                
            default:
                return false;
        }
    }
    
    void onSuccess() {
        totalSuccesses_.fetch_add(1);
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::HALF_OPEN) {
            int currentSuccessCount = successCount_.fetch_add(1) + 1;
            
#ifdef __cpp_lib_print
            std::print("[{}] ‚úÖ –£—Å–ø–µ—Ö –≤ HALF_OPEN —Ä–µ–∂–∏–º–µ ({}/{})\n", 
                       name_, currentSuccessCount, successThreshold_);
#else
            std::cout << "[" << name_ << "] ‚úÖ –£—Å–ø–µ—Ö –≤ HALF_OPEN —Ä–µ–∂–∏–º–µ (" 
                      << currentSuccessCount << "/" << successThreshold_ << ")" << std::endl;
#endif
            
            if (currentSuccessCount >= successThreshold_) {
                state_.store(CircuitState::CLOSED);
                failureCount_.store(0);
                successCount_.store(0);
                
#ifdef __cpp_lib_print
                std::print("[{}] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (—Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)\n", name_);
#else
                std::cout << "[" << name_ << "] ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CLOSED (—Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)" << std::endl;
#endif
            }
        } else if (currentState == CircuitState::CLOSED) {
            failureCount_.store(0);
        }
    }
    
    void onFailure(const E& error) {
        totalFailures_.fetch_add(1);
        
        std::lock_guard<std::mutex> lock(mutex_);
        lastFailureTime_ = std::chrono::system_clock::now();
        
        // ‚úÖ C++23: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
#ifdef __cpp_lib_stacktrace
        auto trace = std::stacktrace::current();
        std::print("‚ùå Circuit Breaker failure: {}\n", error);
        std::print("Stack trace:\n");
        for (const auto& frame : trace) {
            std::print("  {}\n", frame.description());
        }
#endif
        
        CircuitState currentState = state_.load();
        
        if (currentState == CircuitState::CLOSED || currentState == CircuitState::HALF_OPEN) {
            int currentFailureCount = failureCount_.fetch_add(1) + 1;
            
#ifdef __cpp_lib_print
            std::print("[{}] ‚ùå –ù–µ—É–¥–∞—á–∞ ({}/{}): {}\n", 
                       name_, currentFailureCount, failureThreshold_, error);
#else
            std::cout << "[" << name_ << "] ‚ùå –ù–µ—É–¥–∞—á–∞ (" 
                      << currentFailureCount << "/" << failureThreshold_ << "): " << error << std::endl;
#endif
            
            if (currentFailureCount >= failureThreshold_) {
                state_.store(CircuitState::OPEN);
                
#ifdef __cpp_lib_print
                std::print("[{}] ‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n", name_);
#else
                std::cout << "[" << name_ << "] ‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ OPEN (—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)" << std::endl;
#endif
            }
        }
    }
    
    std::string stateToString(CircuitState state) const {
        switch (state) {
            case CircuitState::CLOSED: return "CLOSED";
            case CircuitState::OPEN: return "OPEN";
            case CircuitState::HALF_OPEN: return "HALF_OPEN";
            default: return "UNKNOWN";
        }
    }
    
    struct Statistics {
        CircuitState state;
        size_t totalRequests;
        size_t totalFailures;
        size_t totalSuccesses;
        size_t rejectedRequests;
        double failureRate;
        double successRate;
        int currentFailureCount;
        int currentSuccessCount;
    };
    
    Statistics getStatistics() const {
        Statistics stats;
        stats.state = state_.load();
        stats.totalRequests = totalRequests_.load();
        stats.totalFailures = totalFailures_.load();
        stats.totalSuccesses = totalSuccesses_.load();
        stats.rejectedRequests = rejectedRequests_.load();
        stats.currentFailureCount = failureCount_.load();
        stats.currentSuccessCount = successCount_.load();
        
        if (stats.totalRequests > 0) {
            stats.failureRate = static_cast<double>(stats.totalFailures) / stats.totalRequests;
            stats.successRate = static_cast<double>(stats.totalSuccesses) / stats.totalRequests;
        } else {
            stats.failureRate = 0.0;
            stats.successRate = 0.0;
        }
        
        return stats;
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ó–õ–ò–ß–ò–ô
// ============================================================================

/**
 * @brief –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
 */
class UnstableService {
private:
    std::mt19937 generator_;
    std::uniform_real_distribution<double> distribution_;
    double failureRate_;
    
public:
    UnstableService(double failureRate = 0.3) 
        : generator_(std::random_device{}()),
          distribution_(0.0, 1.0),
          failureRate_(failureRate) {}
    
    // C++17/20 –≤–µ—Ä—Å–∏—è
    std::string callServiceCpp20(const std::string& request) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        
        if (distribution_(generator_) < failureRate_) {
            throw std::runtime_error("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + request);
        }
        
        return "–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: " + request;
    }
    
    // C++23 –≤–µ—Ä—Å–∏—è
    std::expected<std::string, std::string> callServiceCpp23(const std::string& request) {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
        
        if (distribution_(generator_) < failureRate_) {
            return std::unexpected("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: " + request);
        }
        
        return "–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: " + request;
    }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏
 */
void demonstrateDifferences() {
    std::cout << "\n=== –°–†–ê–í–ù–ï–ù–ò–ï C++17/20 vs C++23 ===" << std::endl;
    
    UnstableService service(0.4); // 40% –æ—à–∏–±–æ–∫
    
    // ============================================================================
    // C++17/20 –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
    // ============================================================================
    std::cout << "\n--- C++17/20 Circuit Breaker ---" << std::endl;
    
    CircuitBreakerCpp20<std::string> cb20("TestService20");
    
    for (int i = 1; i <= 5; ++i) {
        std::string request = "Request_" + std::to_string(i);
        
        // ‚ùå C++17/20: –ù–µ—É–¥–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        auto result = cb20.execute([&service, &request]() {
            return service.callServiceCpp20(request);
        });
        
        if (result) {
            std::cout << "‚úÖ –£—Å–ø–µ—Ö: " << *result << std::endl;
        } else {
            std::cout << "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω Circuit Breaker" << std::endl;
        }
        
        std::this_thread::sleep_for(std::chrono::milliseconds(200));
    }
    
    cb20.printStatistics();
    
    // ============================================================================
    // C++23 –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø
    // ============================================================================
    std::cout << "\n--- C++23 Circuit Breaker ---" << std::endl;
    
    CircuitBreakerCpp23<std::string, std::string> cb23("TestService23");
    
    for (int i = 1; i <= 5; ++i) {
        std::string request = "Request_" + std::to_string(i);
        
        // ‚úÖ C++23: –£–¥–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        auto result = cb23.execute([&service, &request]() {
            return service.callServiceCpp23(request);
        });
        
        if (result) {
            std::cout << "‚úÖ –£—Å–ø–µ—Ö: " << *result << std::endl;
        } else {
            std::cout << "‚ùå –û—à–∏–±–∫–∞: " << result.error() << std::endl; // ‚úÖ –ß–µ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        }
        
        std::this_thread::sleep_for(std::chrono::milliseconds(200));
    }
    
    cb23.printStatistics();
}

// ============================================================================
// –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

int main() {
    std::cout << "üîå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Circuit Breaker Pattern: C++17/20 vs C++23" << std::endl;
    std::cout << std::string(70, '=') << std::endl;
    
    try {
        demonstrateDifferences();
        
        std::cout << "\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" << std::endl;
        
        std::cout << "\nüéØ –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è C++23:" << std::endl;
        std::cout << "1. std::expected –≤–º–µ—Å—Ç–æ std::optional - —á–µ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö" << std::endl;
        std::cout << "2. std::print - –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥" << std::endl;
        std::cout << "3. std::stacktrace - –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–æ–∫" << std::endl;
        std::cout << "4. –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å std::format" << std::endl;
        std::cout << "5. –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}

