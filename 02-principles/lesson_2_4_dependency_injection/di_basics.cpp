/**
 * @file di_basics.cpp
 * @brief –û—Å–Ω–æ–≤—ã Dependency Injection
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤—ã dependency injection:
 * - –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑ DI
 * - Constructor Injection
 * - Setter Injection
 * - Interface Injection
 */

#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <functional>
#include <chrono>
#include <iomanip>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è DI
 * 
 * DI –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄO ‚àà Objects, ‚àÄD ‚àà Dependencies: 
 * DI(O, D) ‚üπ D ‚àà injected(O) ‚àß D ‚àâ created(O)
 * –≥–¥–µ injected(O) = {d | d –≤–Ω–µ–¥—Ä–µ–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç O}
 *     created(O) = {d | d —Å–æ–∑–¥–∞–Ω–∞ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ O}
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó DEPENDENCY INJECTION
// ============================================================================

/**
 * @brief –ü—Ä–æ–±–ª–µ–º–∞: –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è DI:
 * - Tight coupling
 * - –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */
class BadEmailService {
public:
    void sendEmail(const std::string& to, const std::string& subject, const std::string& body) {
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << to << ": " << subject << "\n";
        std::cout << "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: " << body << "\n";
        // –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    }
};

class BadSMSService {
public:
    void sendSMS(const std::string& phone, const std::string& message) {
        std::cout << "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ " << phone << ": " << message << "\n";
        // –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
    }
};

class BadDatabaseService {
public:
    void saveUser(const std::string& userData) {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: " << userData << "\n";
        // –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    }
    
    std::string getUserData(int userId) {
        std::cout << "üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " << userId << " –∏–∑ –ë–î\n";
        return "User data for " + std::to_string(userId);
    }
};

class BadLogger {
public:
    void log(const std::string& message) {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] " << message << "\n";
        // –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    }
};

class BadUserService {
private:
    // –ü—Ä–æ–±–ª–µ–º–∞: –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    BadEmailService emailService;
    BadSMSService smsService;
    BadDatabaseService databaseService;
    BadLogger logger;
    
public:
    BadUserService() {
        // –ü—Ä–æ–±–ª–µ–º–∞: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
        std::cout << "üèóÔ∏è UserService —Å–æ–∑–¥–∞–Ω —Å –∂–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏\n";
    }
    
    void registerUser(const std::string& username, const std::string& email, const std::string& phone) {
        logger.log("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
        
        // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        std::string userData = "User: " + username + ", Email: " + email + ", Phone: " + phone;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        databaseService.saveUser(userData);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        emailService.sendEmail(email, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
        smsService.sendSMS(phone, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        
        logger.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + username);
    }
    
    void updateUser(int userId, const std::string& newData) {
        logger.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + std::to_string(userId));
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        std::string currentData = databaseService.getUserData(userId);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        std::string updatedData = currentData + " -> " + newData;
        databaseService.saveUser(updatedData);
        
        logger.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: " + std::to_string(userId));
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: CONSTRUCTOR INJECTION
// ============================================================================

/**
 * @brief –†–µ—à–µ–Ω–∏–µ: Dependency Injection —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DI:
 * - Loose coupling
 * - –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
 * - –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
class IEmailService {
public:
    virtual ~IEmailService() = default;
    virtual void sendEmail(const std::string& to, const std::string& subject, const std::string& body) = 0;
    virtual std::string getServiceName() const = 0;
};

class ISMSService {
public:
    virtual ~ISMSService() = default;
    virtual void sendSMS(const std::string& phone, const std::string& message) = 0;
    virtual std::string getServiceName() const = 0;
};

class IDatabaseService {
public:
    virtual ~IDatabaseService() = default;
    virtual void saveUser(const std::string& userData) = 0;
    virtual std::string getUserData(int userId) = 0;
    virtual std::string getServiceName() const = 0;
};

class ILogger {
public:
    virtual ~ILogger() = default;
    virtual void log(const std::string& message) = 0;
    virtual void logError(const std::string& error) = 0;
    virtual std::string getLoggerName() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
class EmailService : public IEmailService {
private:
    std::string smtpServer;
    int port;
    
public:
    EmailService(const std::string& server = "smtp.gmail.com", int serverPort = 587) 
        : smtpServer(server), port(serverPort) {
        std::cout << "üìß EmailService —Å–æ–∑–¥–∞–Ω (—Å–µ—Ä–≤–µ—Ä: " << smtpServer << ":" << port << ")\n";
    }
    
    void sendEmail(const std::string& to, const std::string& subject, const std::string& body) override {
        std::cout << "üìß [EmailService] –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << to << " —á–µ—Ä–µ–∑ " << smtpServer << "\n";
        std::cout << "–¢–µ–º–∞: " << subject << "\n";
        std::cout << "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: " << body << "\n";
    }
    
    std::string getServiceName() const override {
        return "EmailService";
    }
};

class SMSService : public ISMSService {
private:
    std::string provider;
    std::string apiKey;
    
public:
    SMSService(const std::string& smsProvider = "Twilio", const std::string& key = "api_key_123") 
        : provider(smsProvider), apiKey(key) {
        std::cout << "üì± SMSService —Å–æ–∑–¥–∞–Ω (–ø—Ä–æ–≤–∞–π–¥–µ—Ä: " << provider << ")\n";
    }
    
    void sendSMS(const std::string& phone, const std::string& message) override {
        std::cout << "üì± [SMSService] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ " << phone << " —á–µ—Ä–µ–∑ " << provider << "\n";
        std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ: " << message << "\n";
    }
    
    std::string getServiceName() const override {
        return "SMSService";
    }
};

class DatabaseService : public IDatabaseService {
private:
    std::string connectionString;
    std::string dbType;
    
public:
    DatabaseService(const std::string& connStr = "localhost:5432/mydb", const std::string& type = "PostgreSQL") 
        : connectionString(connStr), dbType(type) {
        std::cout << "üíæ DatabaseService —Å–æ–∑–¥–∞–Ω (" << dbType << "): " << connectionString << "\n";
    }
    
    void saveUser(const std::string& userData) override {
        std::cout << "üíæ [DatabaseService] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ " << dbType << ": " << userData << "\n";
    }
    
    std::string getUserData(int userId) override {
        std::cout << "üìñ [DatabaseService] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " << userId << " –∏–∑ " << dbType << "\n";
        return "User data for " + std::to_string(userId) + " from " + dbType;
    }
    
    std::string getServiceName() const override {
        return "DatabaseService";
    }
};

class Logger : public ILogger {
private:
    std::string logLevel;
    std::string outputFormat;
    
public:
    Logger(const std::string& level = "INFO", const std::string& format = "TIMESTAMP") 
        : logLevel(level), outputFormat(format) {
        std::cout << "üìù Logger —Å–æ–∑–¥–∞–Ω (—É—Ä–æ–≤–µ–Ω—å: " << logLevel << ", —Ñ–æ—Ä–º–∞—Ç: " << outputFormat << ")\n";
    }
    
    void log(const std::string& message) override {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] [" << logLevel << "] " << message << "\n";
    }
    
    void logError(const std::string& error) override {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] [ERROR] " << error << "\n";
    }
    
    std::string getLoggerName() const override {
        return "Logger";
    }
};

// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —Å DI
class GoodUserService {
private:
    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    std::unique_ptr<IEmailService> emailService;
    std::unique_ptr<ISMSService> smsService;
    std::unique_ptr<IDatabaseService> databaseService;
    std::unique_ptr<ILogger> logger;
    
public:
    // Constructor Injection
    GoodUserService(std::unique_ptr<IEmailService> email,
                   std::unique_ptr<ISMSService> sms,
                   std::unique_ptr<IDatabaseService> db,
                   std::unique_ptr<ILogger> log)
        : emailService(std::move(email)),
          smsService(std::move(sms)),
          databaseService(std::move(db)),
          logger(std::move(log)) {
        std::cout << "üèóÔ∏è GoodUserService —Å–æ–∑–¥–∞–Ω —Å –≤–Ω–µ–¥—Ä–µ–Ω–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏\n";
        logger->log("UserService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    void registerUser(const std::string& username, const std::string& email, const std::string& phone) {
        logger->log("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
        
        try {
            // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
            std::string userData = "User: " + username + ", Email: " + email + ", Phone: " + phone;
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            databaseService->saveUser(userData);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            emailService->sendEmail(email, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
            smsService->sendSMS(phone, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
            
            logger->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + username);
            
        } catch (const std::exception& e) {
            logger->logError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + username + ": " + e.what());
        }
    }
    
    void updateUser(int userId, const std::string& newData) {
        logger->log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + std::to_string(userId));
        
        try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            std::string currentData = databaseService->getUserData(userId);
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            std::string updatedData = currentData + " -> " + newData;
            databaseService->saveUser(updatedData);
            
            logger->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: " + std::to_string(userId));
            
        } catch (const std::exception& e) {
            logger->logError("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + std::to_string(userId) + ": " + e.what());
        }
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
    void printDependencies() {
        std::cout << "\nüìã –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ UserService:\n";
        std::cout << "  Email Service: " << emailService->getServiceName() << "\n";
        std::cout << "  SMS Service: " << smsService->getServiceName() << "\n";
        std::cout << "  Database Service: " << databaseService->getServiceName() << "\n";
        std::cout << "  Logger: " << logger->getLoggerName() << "\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: SETTER INJECTION
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Setter Injection
 */
class FlexibleUserService {
private:
    std::unique_ptr<IEmailService> emailService;
    std::unique_ptr<ISMSService> smsService;
    std::unique_ptr<IDatabaseService> databaseService;
    std::unique_ptr<ILogger> logger;
    
public:
    FlexibleUserService() {
        std::cout << "üèóÔ∏è FlexibleUserService —Å–æ–∑–¥–∞–Ω (–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±—É–¥—É—Ç –≤–Ω–µ–¥—Ä–µ–Ω—ã —á–µ—Ä–µ–∑ —Å–µ—Ç—Ç–µ—Ä—ã)\n";
    }
    
    // Setter Injection
    void setEmailService(std::unique_ptr<IEmailService> email) {
        emailService = std::move(email);
        std::cout << "üìß Email service —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " << emailService->getServiceName() << "\n";
    }
    
    void setSMSService(std::unique_ptr<ISMSService> sms) {
        smsService = std::move(sms);
        std::cout << "üì± SMS service —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " << smsService->getServiceName() << "\n";
    }
    
    void setDatabaseService(std::unique_ptr<IDatabaseService> db) {
        databaseService = std::move(db);
        std::cout << "üíæ Database service —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " << databaseService->getServiceName() << "\n";
    }
    
    void setLogger(std::unique_ptr<ILogger> log) {
        logger = std::move(log);
        std::cout << "üìù Logger —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " << logger->getLoggerName() << "\n";
    }
    
    bool isConfigured() const {
        return emailService && smsService && databaseService && logger;
    }
    
    void registerUser(const std::string& username, const std::string& email, const std::string& phone) {
        if (!isConfigured()) {
            throw std::runtime_error("UserService –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        }
        
        logger->log("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
        
        std::string userData = "User: " + username + ", Email: " + email + ", Phone: " + phone;
        databaseService->saveUser(userData);
        emailService->sendEmail(email, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
        smsService->sendSMS(phone, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        
        logger->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + username);
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 4: INTERFACE INJECTION
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Interface Injection
 */
class IUserServiceContainer {
public:
    virtual ~IUserServiceContainer() = default;
    virtual void setEmailService(std::unique_ptr<IEmailService> email) = 0;
    virtual void setSMSService(std::unique_ptr<ISMSService> sms) = 0;
    virtual void setDatabaseService(std::unique_ptr<IDatabaseService> db) = 0;
    virtual void setLogger(std::unique_ptr<ILogger> logger) = 0;
};

class InjectableUserService : public IUserServiceContainer {
private:
    std::unique_ptr<IEmailService> emailService;
    std::unique_ptr<ISMSService> smsService;
    std::unique_ptr<IDatabaseService> databaseService;
    std::unique_ptr<ILogger> logger;
    
public:
    InjectableUserService() {
        std::cout << "üèóÔ∏è InjectableUserService —Å–æ–∑–¥–∞–Ω (Interface Injection)\n";
    }
    
    // Interface Injection —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    void setEmailService(std::unique_ptr<IEmailService> email) override {
        emailService = std::move(email);
        std::cout << "üìß Email service –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " << emailService->getServiceName() << "\n";
    }
    
    void setSMSService(std::unique_ptr<ISMSService> sms) override {
        smsService = std::move(sms);
        std::cout << "üì± SMS service –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " << smsService->getServiceName() << "\n";
    }
    
    void setDatabaseService(std::unique_ptr<IDatabaseService> db) override {
        databaseService = std::move(db);
        std::cout << "üíæ Database service –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " << databaseService->getServiceName() << "\n";
    }
    
    void setLogger(std::unique_ptr<ILogger> log) override {
        logger = std::move(log);
        std::cout << "üìù Logger –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: " << logger->getLoggerName() << "\n";
    }
    
    void registerUser(const std::string& username, const std::string& email, const std::string& phone) {
        if (!emailService || !smsService || !databaseService || !logger) {
            throw std::runtime_error("–ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤–Ω–µ–¥—Ä–µ–Ω—ã");
        }
        
        logger->log("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username);
        
        std::string userData = "User: " + username + ", Email: " + email + ", Phone: " + phone;
        databaseService->saveUser(userData);
        emailService->sendEmail(email, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!");
        smsService->sendSMS(phone, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        
        logger->log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + username);
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateProblemsWithoutDI() {
    std::cout << "‚ùå –ü–†–û–ë–õ–ï–ú–´ –ë–ï–ó DEPENDENCY INJECTION:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadUserService badService;
    badService.registerUser("–ò–≤–∞–Ω", "ivan@example.com", "+1234567890");
    badService.updateUser(1, "–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ");
    
    std::cout << "\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:\n";
    std::cout << "‚Ä¢ –ñ–µ—Å—Ç–∫–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n\n";
}

void demonstrateConstructorInjection() {
    std::cout << "‚úÖ CONSTRUCTOR INJECTION:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    auto emailService = std::make_unique<EmailService>("smtp.company.com", 587);
    auto smsService = std::make_unique<SMSService>("Twilio", "api_key_456");
    auto databaseService = std::make_unique<DatabaseService>("postgresql://localhost:5432/app", "PostgreSQL");
    auto logger = std::make_unique<Logger>("DEBUG", "TIMESTAMP");
    
    // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    GoodUserService userService(std::move(emailService), std::move(smsService), 
                               std::move(databaseService), std::move(logger));
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    userService.registerUser("–ü–µ—Ç—Ä", "petr@example.com", "+0987654321");
    userService.updateUser(2, "–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
    
    userService.printDependencies();
    
    std::cout << "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n";
    std::cout << "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID\n\n";
}

void demonstrateSetterInjection() {
    std::cout << "‚úÖ SETTER INJECTION:\n";
    std::cout << std::string(50, '-') << "\n";
    
    FlexibleUserService flexibleService;
    
    // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ç—Ç–µ—Ä—ã
    flexibleService.setEmailService(std::make_unique<EmailService>("smtp.gmail.com", 465));
    flexibleService.setSMSService(std::make_unique<SMSService>("SendGrid", "sg_api_key"));
    flexibleService.setDatabaseService(std::make_unique<DatabaseService>("mysql://localhost:3306/app", "MySQL"));
    flexibleService.setLogger(std::make_unique<Logger>("INFO", "SIMPLE"));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (flexibleService.isConfigured()) {
        flexibleService.registerUser("–ú–∞—Ä–∏—è", "maria@example.com", "+1122334455");
    }
    
    std::cout << "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê SETTER INJECTION:\n";
    std::cout << "‚Ä¢ –ì–∏–±–∫–æ—Å—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n";
    std::cout << "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n";
}

void demonstrateInterfaceInjection() {
    std::cout << "‚úÖ INTERFACE INJECTION:\n";
    std::cout << std::string(50, '-') << "\n";
    
    auto injectableService = std::make_unique<InjectableUserService>();
    
    // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    injectableService->setEmailService(std::make_unique<EmailService>("outlook.com", 587));
    injectableService->setSMSService(std::make_unique<SMSService>("AWS SNS", "aws_key"));
    injectableService->setDatabaseService(std::make_unique<DatabaseService>("mongodb://localhost:27017", "MongoDB"));
    injectableService->setLogger(std::make_unique<Logger>("WARN", "JSON"));
    
    injectableService->registerUser("–ê–Ω–Ω–∞", "anna@example.com", "+9988776655");
    
    std::cout << "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê INTERFACE INJECTION:\n";
    std::cout << "‚Ä¢ –ß–µ—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n";
    std::cout << "‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n";
}

void analyzeDIAdvantages() {
    std::cout << "üî¨ –ê–ù–ê–õ–ò–ó –ü–†–ï–ò–ú–£–©–ï–°–¢–í DEPENDENCY INJECTION:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –û–°–ù–û–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ Loose Coupling - —Å–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n";
    std::cout << "‚Ä¢ Testability - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ Flexibility - –≥–∏–±–∫–æ—Å—Ç—å –≤ –∑–∞–º–µ–Ω–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n";
    std::cout << "‚Ä¢ Single Responsibility - —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ Dependency Inversion - —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ Complexity - —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n";
    std::cout << "‚Ä¢ Learning Curve - –∫—Ä–∏–≤–∞—è –æ–±—É—á–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ Over-engineering - —Ä–∏—Å–∫ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ Performance - –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π overhead\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Constructor Injection –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Setter Injection –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Interface Injection –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ DI –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤\n";
}

int main() {
    std::cout << "üéØ –û–°–ù–û–í–´ DEPENDENCY INJECTION\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n";
    
    demonstrateProblemsWithoutDI();
    demonstrateConstructorInjection();
    demonstrateSetterInjection();
    demonstrateInterfaceInjection();
    analyzeDIAdvantages();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "DI: ‚àÄO ‚àà Objects, ‚àÄD ‚àà Dependencies: \n";
    std::cout << "DI(O, D) ‚üπ D ‚àà injected(O) ‚àß D ‚àâ created(O)\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. DI —É–ª—É—á—à–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –≥–∏–±–∫–æ—Å—Ç—å\n";
    std::cout << "2. Constructor Injection –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
    std::cout << "3. Setter Injection –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
    std::cout << "4. Interface Injection –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —á–µ—Ç–∫–∏–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç\n\n";
    
    std::cout << "üî¨ Dependency Injection - –æ—Å–Ω–æ–≤–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã!\n";
    
    return 0;
}
