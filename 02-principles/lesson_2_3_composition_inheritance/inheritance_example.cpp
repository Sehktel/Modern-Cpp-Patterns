/**
 * @file inheritance_example.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –µ–≥–æ –ø—Ä–æ–±–ª–µ–º
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
 * - Fragile Base Class Problem
 * - Diamond Problem
 * - Tight Coupling
 * - Violation of LSP
 */

#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <stdexcept>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * 
 * –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄA, B ‚àà Classes: B inherits A ‚üπ B ‚äÜ A
 * –≥–¥–µ ‚äÜ –æ–∑–Ω–∞—á–∞–µ—Ç "—è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º"
 * 
 * –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞—Å—Å–∞ B —Ç–∞–∫–∂–µ —è–≤–ª—è—é—Ç—Å—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞ A.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: FRAGILE BASE CLASS PROBLEM
// ============================================================================

/**
 * @brief –ü—Ä–æ–±–ª–µ–º–∞ —Ö—Ä—É–ø–∫–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
 * 
 * –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã,
 * –¥–∞–∂–µ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∂—É—Ç—Å—è –±–µ–∑–≤—Ä–µ–¥–Ω—ã–º–∏.
 */
class BadBaseClass {
protected:
    std::vector<int> data;
    
public:
    BadBaseClass() {
        data = {1, 2, 3, 4, 5};
        std::cout << "üèóÔ∏è –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: ";
        printData();
    }
    
    virtual ~BadBaseClass() = default;
    
    // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤ –±—É–¥—É—â–µ–º
    virtual void processData() {
        std::cout << "üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ\n";
        for (size_t i = 0; i < data.size(); ++i) {
            data[i] *= 2; // –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        }
        printData();
    }
    
    virtual void printData() const {
        std::cout << "–î–∞–Ω–Ω—ã–µ: ";
        for (size_t i = 0; i < data.size(); ++i) {
            std::cout << data[i];
            if (i < data.size() - 1) std::cout << ", ";
        }
        std::cout << "\n";
    }
    
    // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
    virtual void addData(int value) {
        data.push_back(value);
        std::cout << "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: " << value << "\n";
    }
    
    // –ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    const std::vector<int>& getData() const {
        return data;
    }
};

class BadDerivedClass : public BadBaseClass {
private:
    int multiplier;
    
public:
    BadDerivedClass(int mult = 3) : multiplier(mult) {
        std::cout << "üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º: " << multiplier << "\n";
    }
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
    void processData() override {
        std::cout << "üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ\n";
        
        // –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–π –∫–ª–∞—Å—Å –ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        for (size_t i = 0; i < data.size(); ++i) {
            data[i] *= multiplier;
        }
        printData();
    }
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    void specialProcess() {
        std::cout << "‚≠ê –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ\n";
        
        // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç —Å–ª–æ–º–∞—Ç—å—Å—è, –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è
        if (data.size() > 0) {
            int sum = 0;
            for (int value : data) {
                sum += value;
            }
            std::cout << "–°—É–º–º–∞ –¥–∞–Ω–Ω—ã—Ö: " << sum << "\n";
        }
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: DIAMOND PROBLEM
// ============================================================================

/**
 * @brief –ü—Ä–æ–±–ª–µ–º–∞ —Ä–æ–º–±–æ–≤–∏–¥–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * 
 * –ö–æ–≥–¥–∞ –∫–ª–∞—Å—Å –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –¥–≤—É—Ö –∫–ª–∞—Å—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∞–º–∏ –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è
 * –æ—Ç –æ–¥–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞, –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å.
 */
class Animal {
protected:
    std::string name;
    int age;
    
public:
    Animal(const std::string& animalName, int animalAge) 
        : name(animalName), age(animalAge) {
        std::cout << "üêæ –ñ–∏–≤–æ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–æ: " << name << " (–≤–æ–∑—Ä–∞—Å—Ç: " << age << ")\n";
    }
    
    virtual ~Animal() = default;
    
    virtual void makeSound() {
        std::cout << "üîä " << name << " –∏–∑–¥–∞–µ—Ç –∑–≤—É–∫\n";
    }
    
    virtual void move() {
        std::cout << "üö∂ " << name << " –¥–≤–∏–≥–∞–µ—Ç—Å—è\n";
    }
    
    const std::string& getName() const { return name; }
    int getAge() const { return age; }
};

class Mammal : public Animal {
protected:
    bool hasFur;
    
public:
    Mammal(const std::string& name, int age, bool fur = true) 
        : Animal(name, age), hasFur(fur) {
        std::cout << "üêï –ú–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–µ —Å–æ–∑–¥–∞–Ω–æ —Å –º–µ—Ö–æ–º: " << (hasFur ? "–¥–∞" : "–Ω–µ—Ç") << "\n";
    }
    
    void makeSound() override {
        std::cout << "üîä " << name << " –∏–∑–¥–∞–µ—Ç –∑–≤—É–∫ –º–ª–µ–∫–æ–ø–∏—Ç–∞—é—â–µ–≥–æ\n";
    }
    
    void feedMilk() {
        std::cout << "ü•õ " << name << " –∫–æ—Ä–º–∏—Ç –º–æ–ª–æ–∫–æ–º\n";
    }
    
    bool hasFur() const { return hasFur; }
};

class WingedAnimal : public Animal {
protected:
    int wingSpan;
    
public:
    WingedAnimal(const std::string& name, int age, int span = 100) 
        : Animal(name, age), wingSpan(span) {
        std::cout << "ü¶Ö –ö—Ä—ã–ª–∞—Ç–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–æ —Å —Ä–∞–∑–º–∞—Ö–æ–º –∫—Ä—ã–ª—å–µ–≤: " << wingSpan << " —Å–º\n";
    }
    
    void makeSound() override {
        std::cout << "üîä " << name << " –∏–∑–¥–∞–µ—Ç –∑–≤—É–∫ –∫—Ä—ã–ª–∞—Ç–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ\n";
    }
    
    void fly() {
        std::cout << "‚úàÔ∏è " << name << " –ª–µ—Ç–∞–µ—Ç —Å —Ä–∞–∑–º–∞—Ö–æ–º –∫—Ä—ã–ª—å–µ–≤ " << wingSpan << " —Å–º\n";
    }
    
    int getWingSpan() const { return wingSpan; }
};

// –ü—Ä–æ–±–ª–µ–º–∞: Bat –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Mammal –∏ WingedAnimal
// –û–±–∞ —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç Animal, —Å–æ–∑–¥–∞–≤–∞—è –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å
class BadBat : public Mammal, public WingedAnimal {
public:
    BadBat(const std::string& name, int age, int span = 50) 
        : Mammal(name, age, true), WingedAnimal(name, age, span) {
        std::cout << "ü¶á –õ–µ—Ç—É—á–∞—è –º—ã—à—å —Å–æ–∑–¥–∞–Ω–∞ (–ø—Ä–æ–±–ª–µ–º–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)\n";
    }
    
    void makeSound() override {
        std::cout << "üîä " << name << " –∏–∑–¥–∞–µ—Ç —É–ª—å—Ç—Ä–∞–∑–≤—É–∫\n";
    }
    
    // –ü—Ä–æ–±–ª–µ–º–∞: –∫–∞–∫–æ–π name –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å? Mammal::name –∏–ª–∏ WingedAnimal::name?
    void demonstrateProblem() {
        std::cout << "‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º\n";
        std::cout << "–ò–º—è –∏–∑ Mammal: " << Mammal::name << "\n";
        std::cout << "–ò–º—è –∏–∑ WingedAnimal: " << WingedAnimal::name << "\n";
        std::cout << "–í–æ–∑—Ä–∞—Å—Ç –∏–∑ Mammal: " << Mammal::age << "\n";
        std::cout << "–í–æ–∑—Ä–∞—Å—Ç –∏–∑ WingedAnimal: " << WingedAnimal::age << "\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: VIOLATION OF LISKOV SUBSTITUTION PRINCIPLE
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤
 * 
 * –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω—è–µ–º—ã –±–∞–∑–æ–≤—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏
 * –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
 */
class BadRectangle {
protected:
    int width;
    int height;
    
public:
    BadRectangle(int w, int h) : width(w), height(h) {
        std::cout << "üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: " << width << "x" << height << "\n";
    }
    
    virtual void setWidth(int w) {
        width = w;
        std::cout << "üìê –®–∏—Ä–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << width << "\n";
    }
    
    virtual void setHeight(int h) {
        height = h;
        std::cout << "üìê –í—ã—Å–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << height << "\n";
    }
    
    virtual int getWidth() const { return width; }
    virtual int getHeight() const { return height; }
    
    virtual int getArea() const {
        return width * height;
    }
    
    virtual void printInfo() const {
        std::cout << "üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: " << width << "x" << height 
                  << ", –ø–ª–æ—â–∞–¥—å: " << getArea() << "\n";
    }
};

class BadSquare : public BadRectangle {
public:
    BadSquare(int side) : BadRectangle(side, side) {
        std::cout << "‚¨ú –ö–≤–∞–¥—Ä–∞—Ç —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–æ—Ä–æ–Ω–æ–π: " << side << "\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    void setWidth(int w) override {
        width = w;
        height = w; // –ö–≤–∞–¥—Ä–∞—Ç –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        std::cout << "‚¨ú –°—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << w << "\n";
    }
    
    void setHeight(int h) override {
        width = h;  // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω—è–µ–º width –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ height
        height = h;
        std::cout << "‚¨ú –°—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " << h << "\n";
    }
    
    void printInfo() const override {
        std::cout << "‚¨ú –ö–≤–∞–¥—Ä–∞—Ç: —Å—Ç–æ—Ä–æ–Ω–∞ " << width 
                  << ", –ø–ª–æ—â–∞–¥—å: " << getArea() << "\n";
    }
};

/**
 * @brief –§—É–Ω–∫—Ü–∏—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∞—è –Ω–∞—Ä—É—à–µ–Ω–∏–µ LSP
 */
void demonstrateLSPViolation(BadRectangle& rect) {
    std::cout << "\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –¥–ª—è " << (dynamic_cast<BadSquare*>(&rect) ? "–∫–≤–∞–¥—Ä–∞—Ç–∞" : "–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞") << ":\n";
    
    int originalWidth = rect.getWidth();
    int originalHeight = rect.getHeight();
    int originalArea = rect.getArea();
    
    std::cout << "–ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: " << originalWidth << "x" << originalHeight 
              << ", –ø–ª–æ—â–∞–¥—å: " << originalArea << "\n";
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—É
    rect.setWidth(10);
    
    int newWidth = rect.getWidth();
    int newHeight = rect.getHeight();
    int newArea = rect.getArea();
    
    std::cout << "–ü–æ—Å–ª–µ setWidth(10): " << newWidth << "x" << newHeight 
              << ", –ø–ª–æ—â–∞–¥—å: " << newArea << "\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã LSP
    bool widthChanged = (newWidth != originalWidth);
    bool heightPreserved = (newHeight == originalHeight);
    bool behaviorConsistent = widthChanged && heightPreserved;
    
    std::cout << "‚úÖ –®–∏—Ä–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: " << (widthChanged ? "–î–∞" : "–ù–µ—Ç") << "\n";
    std::cout << "‚úÖ –í—ã—Å–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å: " << (heightPreserved ? "–î–∞" : "–ù–µ—Ç") << "\n";
    std::cout << "‚ùå –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ: " << (behaviorConsistent ? "–î–∞" : "–ù–µ—Ç") << "\n";
    
    if (!behaviorConsistent) {
        std::cout << "üö® –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤—ã—Å–æ—Ç—É!\n";
    }
}

// ============================================================================
// –ü–†–ò–ú–ï–† 4: TIGHT COUPLING PROBLEM
// ============================================================================

/**
 * @brief –ü—Ä–æ–±–ª–µ–º–∞ —Ç–µ—Å–Ω–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
 * 
 * –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å–Ω—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –±–∞–∑–æ–≤—ã–º
 * –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏.
 */
class BadDatabaseConnection {
protected:
    std::string connectionString;
    bool connected;
    
public:
    BadDatabaseConnection(const std::string& connStr) 
        : connectionString(connStr), connected(false) {
        std::cout << "üóÑÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Å–æ–∑–¥–∞–Ω–æ: " << connectionString << "\n";
    }
    
    virtual ~BadDatabaseConnection() {
        if (connected) {
            disconnect();
        }
    }
    
    virtual void connect() {
        connected = true;
        std::cout << "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    }
    
    virtual void disconnect() {
        connected = false;
        std::cout << "üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ\n";
    }
    
    virtual void executeQuery(const std::string& query) {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î");
        }
        std::cout << "üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: " << query << "\n";
    }
    
    // –ú–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É –≤ –±—É–¥—É—â–µ–º
    virtual void beginTransaction() {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î");
        }
        std::cout << "üîÑ –ù–∞—á–∞–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n";
    }
    
    virtual void commitTransaction() {
        std::cout << "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n";
    }
    
    virtual void rollbackTransaction() {
        std::cout << "‚ùå –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n";
    }
};

class BadMySQLConnection : public BadDatabaseConnection {
private:
    std::string mysqlVersion;
    
public:
    BadMySQLConnection(const std::string& connStr, const std::string& version = "8.0") 
        : BadDatabaseConnection(connStr), mysqlVersion(version) {
        std::cout << "üê¨ MySQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (–≤–µ—Ä—Å–∏—è: " << mysqlVersion << ")\n";
    }
    
    void connect() override {
        BadDatabaseConnection::connect();
        std::cout << "üê¨ MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    }
    
    void executeQuery(const std::string& query) override {
        BadDatabaseConnection::executeQuery(query);
        std::cout << "üê¨ MySQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n";
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è MySQL –º–µ—Ç–æ–¥—ã
    void useDatabase(const std::string& dbName) {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MySQL");
        }
        std::cout << "üê¨ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " << dbName << "\n";
    }
    
    void showTables() {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MySQL");
        }
        std::cout << "üê¨ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã\n";
    }
};

class BadPostgreSQLConnection : public BadDatabaseConnection {
private:
    std::string pgVersion;
    
public:
    BadPostgreSQLConnection(const std::string& connStr, const std::string& version = "13") 
        : BadDatabaseConnection(connStr), pgVersion(version) {
        std::cout << "üêò PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (–≤–µ—Ä—Å–∏—è: " << pgVersion << ")\n";
    }
    
    void connect() override {
        BadDatabaseConnection::connect();
        std::cout << "üêò PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
    }
    
    void executeQuery(const std::string& query) override {
        BadDatabaseConnection::executeQuery(query);
        std::cout << "üêò PostgreSQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n";
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è PostgreSQL –º–µ—Ç–æ–¥—ã
    void createSchema(const std::string& schemaName) {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL");
        }
        std::cout << "üêò –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã: " << schemaName << "\n";
    }
    
    void createExtension(const std::string& extensionName) {
        if (!connected) {
            throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL");
        }
        std::cout << "üêò –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: " << extensionName << "\n";
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú
// ============================================================================

void demonstrateFragileBaseClass() {
    std::cout << "‚ùå FRAGILE BASE CLASS PROBLEM:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadBaseClass base;
    base.processData();
    
    BadDerivedClass derived(5);
    derived.processData();
    derived.specialProcess();
    
    std::cout << "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ BadBaseClass –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å BadDerivedClass\n";
    std::cout << "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã\n";
}

void demonstrateDiamondProblem() {
    std::cout << "\n‚ùå DIAMOND PROBLEM:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadBat bat("–ë—ç—Ç–º–µ–Ω", 5, 30);
    bat.makeSound();
    bat.feedMilk();
    bat.fly();
    
    std::cout << "\n";
    bat.demonstrateProblem();
    
    std::cout << "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –∏ –º–µ—Ç–æ–¥–∞–º\n";
    std::cout << "–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏–º–µ–Ω\n";
}

void demonstrateLSPViolation() {
    std::cout << "\n‚ùå VIOLATION OF LSP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadRectangle rect(5, 10);
    demonstrateLSPViolation(rect);
    
    BadSquare square(5);
    demonstrateLSPViolation(square);
    
    std::cout << "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: Square –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Rectangle\n";
    std::cout << "–ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –æ–±—ä–µ–∫—Ç–æ–≤\n";
}

void demonstrateTightCoupling() {
    std::cout << "\n‚ùå TIGHT COUPLING PROBLEM:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadMySQLConnection mysql("mysql://localhost:3306/mydb");
    mysql.connect();
    mysql.useDatabase("testdb");
    mysql.executeQuery("SELECT * FROM users");
    mysql.showTables();
    
    std::cout << "\n";
    BadPostgreSQLConnection postgres("postgresql://localhost:5432/mydb");
    postgres.connect();
    postgres.createSchema("public");
    postgres.executeQuery("SELECT * FROM users");
    postgres.createExtension("uuid-ossp");
    
    std::cout << "\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: –¢–µ—Å–Ω–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å —Å –±–∞–∑–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º\n";
    std::cout << "–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ BadDatabaseConnection –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã\n";
}

void analyzeInheritanceProblems() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –û–°–ù–û–í–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:\n";
    std::cout << "‚Ä¢ Fragile Base Class - –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –ª–æ–º–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ\n";
    std::cout << "‚Ä¢ Diamond Problem - –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏\n";
    std::cout << "‚Ä¢ Tight Coupling - —Ç–µ—Å–Ω–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏\n";
    std::cout << "‚Ä¢ Violation of LSP - –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤\n";
    std::cout << "‚Ä¢ Inheritance Hell - –≥–ª—É–±–æ–∫–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n";
    
    std::cout << "‚ö†Ô∏è –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:\n";
    std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö 'is-a' –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n";
    std::cout << "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏—Ö –∏–µ—Ä–∞—Ä—Ö–∏–π –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID\n";
}

int main() {
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤\n\n";
    
    demonstrateFragileBaseClass();
    demonstrateDiamondProblem();
    demonstrateLSPViolation();
    demonstrateTightCoupling();
    analyzeInheritanceProblems();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: ‚àÄA, B ‚àà Classes: B inherits A ‚üπ B ‚äÜ A\n";
    std::cout << "–≥–¥–µ ‚äÜ –æ–∑–Ω–∞—á–∞–µ—Ç '—è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ–º'\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å–Ω—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å\n";
    std::cout << "2. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∫–ª–∞—Å—Å—ã\n";
    std::cout << "3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏\n";
    std::cout << "4. –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID\n\n";
    
    std::cout << "üî¨ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —á–∞—Å—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –ª—É—á—à–∏–º –≤—ã–±–æ—Ä–æ–º!\n";
    
    return 0;
}
