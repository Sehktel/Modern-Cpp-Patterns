/**
 * @file comparison_analysis.cpp
 * @brief –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 * —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
 */

#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <chrono>
#include <map>
#include <algorithm>

/**
 * @brief –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
 */
class CodeMetrics {
public:
    struct InheritanceMetrics {
        int depthOfInheritanceTree;
        int numberOfChildren;
        int couplingBetweenObjects;
        double maintainabilityIndex;
    };
    
    struct CompositionMetrics {
        int numberOfComponents;
        int couplingBetweenObjects;
        double cohesionIndex;
        double flexibilityIndex;
    };
    
    static void analyzeInheritanceHierarchy() {
        std::cout << "üìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
        std::cout << std::string(50, '-') << "\n";
        
        InheritanceMetrics metrics;
        metrics.depthOfInheritanceTree = 4; // –ì–ª—É–±–∏–Ω–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        metrics.numberOfChildren = 3;       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–º–∫–æ–≤
        metrics.couplingBetweenObjects = 8; // –°—Ç–µ–ø–µ–Ω—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
        metrics.maintainabilityIndex = 65.5; // –ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏
        
        std::cout << "‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (DIT): " << metrics.depthOfInheritanceTree << "\n";
        std::cout << "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–º–∫–æ–≤ (NOC): " << metrics.numberOfChildren << "\n";
        std::cout << "‚Ä¢ –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ (CBO): " << metrics.couplingBetweenObjects << "\n";
        std::cout << "‚Ä¢ –ò–Ω–¥–µ–∫—Å —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏: " << metrics.maintainabilityIndex << "%\n\n";
        
        std::cout << "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´:\n";
        std::cout << "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏\n";
        std::cout << "‚Ä¢ –ì–ª—É–±–æ–∫–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n";
        std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º–æ—Å—Ç–∏\n";
    }
    
    static void analyzeCompositionStructure() {
        std::cout << "üìä –ê–ù–ê–õ–ò–ó –ú–ï–¢–†–ò–ö –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
        std::cout << std::string(50, '-') << "\n";
        
        CompositionMetrics metrics;
        metrics.numberOfComponents = 5;     // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        metrics.couplingBetweenObjects = 3; // –°—Ç–µ–ø–µ–Ω—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
        metrics.cohesionIndex = 85.2;       // –ò–Ω–¥–µ–∫—Å —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        metrics.flexibilityIndex = 92.1;    // –ò–Ω–¥–µ–∫—Å –≥–∏–±–∫–æ—Å—Ç–∏
        
        std::cout << "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: " << metrics.numberOfComponents << "\n";
        std::cout << "‚Ä¢ –°–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏ (CBO): " << metrics.couplingBetweenObjects << "\n";
        std::cout << "‚Ä¢ –ò–Ω–¥–µ–∫—Å —Å–≤—è–∑–Ω–æ—Å—Ç–∏: " << metrics.cohesionIndex << "%\n";
        std::cout << "‚Ä¢ –ò–Ω–¥–µ–∫—Å –≥–∏–±–∫–æ—Å—Ç–∏: " << metrics.flexibilityIndex << "%\n\n";
        
        std::cout << "‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
        std::cout << "‚Ä¢ –ù–∏–∑–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏\n";
        std::cout << "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n";
        std::cout << "‚Ä¢ –í—ã—Å–æ–∫–∞—è –≥–∏–±–∫–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
// ============================================================================

/**
 * @brief –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
class InheritancePerformanceTest {
private:
    class BaseShape {
    public:
        virtual ~BaseShape() = default;
        virtual double getArea() const = 0;
        virtual double getPerimeter() const = 0;
        virtual std::string getType() const = 0;
    };
    
    class Rectangle : public BaseShape {
    private:
        double width, height;
    public:
        Rectangle(double w, double h) : width(w), height(h) {}
        
        double getArea() const override {
            return width * height;
        }
        
        double getPerimeter() const override {
            return 2 * (width + height);
        }
        
        std::string getType() const override {
            return "Rectangle";
        }
    };
    
    class Circle : public BaseShape {
    private:
        double radius;
    public:
        Circle(double r) : radius(r) {}
        
        double getArea() const override {
            return 3.14159 * radius * radius;
        }
        
        double getPerimeter() const override {
            return 2 * 3.14159 * radius;
        }
        
        std::string getType() const override {
            return "Circle";
        }
    };
    
public:
    static void runTest() {
        std::cout << "‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
        std::cout << std::string(50, '-') << "\n";
        
        const int iterations = 1000000;
        std::vector<std::unique_ptr<BaseShape>> shapes;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        auto start = std::chrono::high_resolution_clock::now();
        
        for (int i = 0; i < iterations; ++i) {
            if (i % 2 == 0) {
                shapes.push_back(std::make_unique<Rectangle>(i, i + 1));
            } else {
                shapes.push_back(std::make_unique<Circle>(i));
            }
        }
        
        auto end = std::chrono::high_resolution_clock::now();
        auto creationTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π
        start = std::chrono::high_resolution_clock::now();
        
        double totalArea = 0;
        for (const auto& shape : shapes) {
            totalArea += shape->getArea();
        }
        
        end = std::chrono::high_resolution_clock::now();
        auto calculationTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        
        std::cout << "–û–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: " << iterations << "\n";
        std::cout << "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " << creationTime.count() << " –º–∫—Å\n";
        std::cout << "–í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << calculationTime.count() << " –º–∫—Å\n";
        std::cout << "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: " << totalArea << "\n";
        std::cout << "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã: " << iterations * 2 << "\n\n";
    }
};

/**
 * @brief –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 */
class CompositionPerformanceTest {
private:
    class AreaCalculator {
    public:
        virtual ~AreaCalculator() = default;
        virtual double calculateArea() const = 0;
    };
    
    class RectangleAreaCalculator : public AreaCalculator {
    private:
        double width, height;
    public:
        RectangleAreaCalculator(double w, double h) : width(w), height(h) {}
        
        double calculateArea() const override {
            return width * height;
        }
    };
    
    class CircleAreaCalculator : public AreaCalculator {
    private:
        double radius;
    public:
        CircleAreaCalculator(double r) : radius(r) {}
        
        double calculateArea() const override {
            return 3.14159 * radius * radius;
        }
    };
    
    class Shape {
    private:
        std::string type;
        std::unique_ptr<AreaCalculator> areaCalculator;
    public:
        Shape(const std::string& shapeType, std::unique_ptr<AreaCalculator> calculator)
            : type(shapeType), areaCalculator(std::move(calculator)) {}
        
        double getArea() const {
            return areaCalculator->calculateArea();
        }
        
        const std::string& getType() const {
            return type;
        }
    };
    
public:
    static void runTest() {
        std::cout << "‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
        std::cout << std::string(50, '-') << "\n";
        
        const int iterations = 1000000;
        std::vector<std::unique_ptr<Shape>> shapes;
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
        auto start = std::chrono::high_resolution_clock::now();
        
        for (int i = 0; i < iterations; ++i) {
            if (i % 2 == 0) {
                shapes.push_back(std::make_unique<Shape>("Rectangle", 
                    std::make_unique<RectangleAreaCalculator>(i, i + 1)));
            } else {
                shapes.push_back(std::make_unique<Shape>("Circle", 
                    std::make_unique<CircleAreaCalculator>(i)));
            }
        }
        
        auto end = std::chrono::high_resolution_clock::now();
        auto creationTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        
        // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–µ–π
        start = std::chrono::high_resolution_clock::now();
        
        double totalArea = 0;
        for (const auto& shape : shapes) {
            totalArea += shape->getArea();
        }
        
        end = std::chrono::high_resolution_clock::now();
        auto calculationTime = std::chrono::duration_cast<std::chrono::microseconds>(end - start);
        
        std::cout << "–û–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: " << iterations << "\n";
        std::cout << "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: " << creationTime.count() << " –º–∫—Å\n";
        std::cout << "–í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π: " << calculationTime.count() << " –º–∫—Å\n";
        std::cout << "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å: " << totalArea << "\n";
        std::cout << "–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã: " << iterations << "\n\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –°–†–ê–í–ù–ï–ù–ò–ï –ì–ò–ë–ö–û–°–¢–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
class InheritanceFlexibilityDemo {
private:
    class BadVehicle {
    protected:
        std::string name;
        int maxSpeed;
    public:
        BadVehicle(const std::string& n, int speed) : name(n), maxSpeed(speed) {}
        virtual ~BadVehicle() = default;
        
        virtual void start() {
            std::cout << "üöó " << name << " –∑–∞–≤–æ–¥–∏—Ç—Å—è\n";
        }
        
        virtual void drive() {
            std::cout << "üöó " << name << " –µ–¥–µ—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é " << maxSpeed << " –∫–º/—á\n";
        }
    };
    
    class BadCar : public BadVehicle {
    public:
        BadCar(const std::string& n, int speed) : BadVehicle(n, speed) {}
        
        void drive() override {
            std::cout << "üöô " << name << " –µ–¥–µ—Ç –ø–æ –¥–æ—Ä–æ–≥–µ\n";
        }
        
        void openTrunk() {
            std::cout << "üì¶ " << name << " –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–≥–∞–∂–Ω–∏–∫\n";
        }
    };
    
    class BadTruck : public BadVehicle {
    public:
        BadTruck(const std::string& n, int speed) : BadVehicle(n, speed) {}
        
        void drive() override {
            std::cout << "üöõ " << name << " –µ–¥–µ—Ç –ø–æ —à–æ—Å—Å–µ\n";
        }
        
        void loadCargo() {
            std::cout << "üì¶ " << name << " –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–∑\n";
        }
    };
    
public:
    static void demonstrate() {
        std::cout << "üîÑ –ì–ò–ë–ö–û–°–¢–¨ –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
        std::cout << std::string(40, '-') << "\n";
        
        BadCar car("–°–µ–¥–∞–Ω", 120);
        BadTruck truck("–ì—Ä—É–∑–æ–≤–∏–∫", 80);
        
        car.start();
        car.drive();
        car.openTrunk();
        
        truck.start();
        truck.drive();
        truck.loadCargo();
        
        std::cout << "\n‚ö†Ô∏è –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:\n";
        std::cout << "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏\n";
        std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
        std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –∂–µ—Å—Ç–∫—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é\n\n";
    }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 */
class CompositionFlexibilityDemo {
private:
    class DrivingBehavior {
    public:
        virtual ~DrivingBehavior() = default;
        virtual void drive(const std::string& vehicleName) = 0;
    };
    
    class CityDriving : public DrivingBehavior {
    public:
        void drive(const std::string& vehicleName) override {
            std::cout << "üèôÔ∏è " << vehicleName << " –µ–¥–µ—Ç –ø–æ –≥–æ—Ä–æ–¥—É\n";
        }
    };
    
    class HighwayDriving : public DrivingBehavior {
    public:
        void drive(const std::string& vehicleName) override {
            std::cout << "üõ£Ô∏è " << vehicleName << " –µ–¥–µ—Ç –ø–æ —à–æ—Å—Å–µ\n";
        }
    };
    
    class OffRoadDriving : public DrivingBehavior {
    public:
        void drive(const std::string& vehicleName) override {
            std::cout << "üå≤ " << vehicleName << " –µ–¥–µ—Ç –ø–æ –±–µ–∑–¥–æ—Ä–æ–∂—å—é\n";
        }
    };
    
    class GoodVehicle {
    private:
        std::string name;
        std::unique_ptr<DrivingBehavior> drivingBehavior;
    public:
        GoodVehicle(const std::string& n, std::unique_ptr<DrivingBehavior> behavior)
            : name(n), drivingBehavior(std::move(behavior)) {}
        
        void start() {
            std::cout << "üöó " << name << " –∑–∞–≤–æ–¥–∏—Ç—Å—è\n";
        }
        
        void drive() {
            drivingBehavior->drive(name);
        }
        
        void changeDrivingBehavior(std::unique_ptr<DrivingBehavior> newBehavior) {
            drivingBehavior = std::move(newBehavior);
            std::cout << "üîÑ " << name << " –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∏–ª—å –≤–æ–∂–¥–µ–Ω–∏—è\n";
        }
    };
    
public:
    static void demonstrate() {
        std::cout << "üîÑ –ì–ò–ë–ö–û–°–¢–¨ –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
        std::cout << std::string(40, '-') << "\n";
        
        auto vehicle = std::make_unique<GoodVehicle>("–£–Ω–∏–≤–µ—Ä—Å–∞–ª", 
            std::make_unique<CityDriving>());
        
        vehicle->start();
        vehicle->drive();
        
        // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        vehicle->changeDrivingBehavior(std::make_unique<HighwayDriving>());
        vehicle->drive();
        
        vehicle->changeDrivingBehavior(std::make_unique<OffRoadDriving>());
        vehicle->drive();
        
        std::cout << "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
        std::cout << "‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
        std::cout << "‚Ä¢ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –≤–æ–∂–¥–µ–Ω–∏—è\n";
        std::cout << "‚Ä¢ –°–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n";
        std::cout << "‚Ä¢ –í—ã—Å–æ–∫–∞—è –≥–∏–±–∫–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã\n\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –°–†–ê–í–ù–ï–ù–ò–ï –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–ò
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
class InheritanceTestabilityDemo {
private:
    class BadDatabaseConnection {
    protected:
        std::string connectionString;
        bool connected;
    public:
        BadDatabaseConnection(const std::string& connStr) 
            : connectionString(connStr), connected(false) {}
        
        virtual ~BadDatabaseConnection() = default;
        
        virtual void connect() {
            connected = true;
            std::cout << "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " << connectionString << "\n";
            // –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î - —Å–ª–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        }
        
        virtual void disconnect() {
            connected = false;
            std::cout << "üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç " << connectionString << "\n";
        }
        
        virtual bool isConnected() const {
            return connected;
        }
        
        virtual void executeQuery(const std::string& query) {
            if (!connected) {
                throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î");
            }
            std::cout << "üìù –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: " << query << "\n";
            // –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ - —Å–ª–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        }
    };
    
    class BadMySQLConnection : public BadDatabaseConnection {
    public:
        BadMySQLConnection(const std::string& connStr) : BadDatabaseConnection(connStr) {}
        
        void executeQuery(const std::string& query) override {
            BadDatabaseConnection::executeQuery(query);
            std::cout << "üê¨ MySQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω\n";
        }
    };
    
public:
    static void demonstrate() {
        std::cout << "üß™ –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨ –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
        std::cout << std::string(40, '-') << "\n";
        
        BadMySQLConnection mysql("mysql://localhost:3306/test");
        
        try {
            mysql.connect();
            mysql.executeQuery("SELECT * FROM users");
            mysql.disconnect();
        } catch (const std::exception& e) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << "\n";
        }
        
        std::cout << "\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n";
        std::cout << "‚Ä¢ –°–ª–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞\n";
        std::cout << "‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –ë–î\n";
        std::cout << "‚Ä¢ –¢–µ—Å–Ω–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n";
        std::cout << "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –ª–æ–º–∞—é—Ç —Ç–µ—Å—Ç—ã\n\n";
    }
};

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 */
class CompositionTestabilityDemo {
private:
    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    class IDatabaseConnection {
    public:
        virtual ~IDatabaseConnection() = default;
        virtual void connect() = 0;
        virtual void disconnect() = 0;
        virtual bool isConnected() const = 0;
        virtual void executeQuery(const std::string& query) = 0;
    };
    
    // –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    class MySQLConnection : public IDatabaseConnection {
    private:
        std::string connectionString;
        bool connected;
    public:
        MySQLConnection(const std::string& connStr) 
            : connectionString(connStr), connected(false) {}
        
        void connect() override {
            connected = true;
            std::cout << "üîå MySQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ " << connectionString << "\n";
        }
        
        void disconnect() override {
            connected = false;
            std::cout << "üîå MySQL –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\n";
        }
        
        bool isConnected() const override {
            return connected;
        }
        
        void executeQuery(const std::string& query) override {
            if (!connected) {
                throw std::runtime_error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å MySQL");
            }
            std::cout << "üê¨ MySQL –∑–∞–ø—Ä–æ—Å: " << query << "\n";
        }
    };
    
    // –ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockDatabaseConnection : public IDatabaseConnection {
    private:
        bool connected;
        std::vector<std::string> executedQueries;
    public:
        MockDatabaseConnection() : connected(false) {}
        
        void connect() override {
            connected = true;
            std::cout << "üß™ Mock –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n";
        }
        
        void disconnect() override {
            connected = false;
            std::cout << "üß™ Mock –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ\n";
        }
        
        bool isConnected() const override {
            return connected;
        }
        
        void executeQuery(const std::string& query) override {
            executedQueries.push_back(query);
            std::cout << "üß™ Mock –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω: " << query << "\n";
        }
        
        const std::vector<std::string>& getExecutedQueries() const {
            return executedQueries;
        }
    };
    
    // –°–µ—Ä–≤–∏—Å —Å –∏–Ω—ä–µ–∫—Ü–∏–µ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    class DatabaseService {
    private:
        std::unique_ptr<IDatabaseConnection> connection;
    public:
        DatabaseService(std::unique_ptr<IDatabaseConnection> conn) 
            : connection(std::move(conn)) {}
        
        void connect() {
            connection->connect();
        }
        
        void executeQuery(const std::string& query) {
            connection->executeQuery(query);
        }
        
        void disconnect() {
            connection->disconnect();
        }
        
        bool isConnected() const {
            return connection->isConnected();
        }
    };
    
public:
    static void demonstrate() {
        std::cout << "üß™ –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨ –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
        std::cout << std::string(40, '-') << "\n";
        
        // –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥
        std::cout << "–ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–¥:\n";
        DatabaseService prodService(std::make_unique<MySQLConnection>("mysql://localhost:3306/prod"));
        prodService.connect();
        prodService.executeQuery("SELECT * FROM products");
        prodService.disconnect();
        
        std::cout << "\n–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥:\n";
        auto mockConnection = std::make_unique<MockDatabaseConnection>();
        DatabaseService testService(std::move(mockConnection));
        
        testService.connect();
        testService.executeQuery("SELECT * FROM users");
        testService.executeQuery("INSERT INTO logs VALUES (1, 'test')");
        testService.disconnect();
        
        std::cout << "\n‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n";
        std::cout << "‚Ä¢ –õ–µ–≥–∫–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
        std::cout << "‚Ä¢ –ù–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
        std::cout << "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ unit-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n";
        std::cout << "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ —Ç–µ—Å—Ç—ã\n\n";
    }
};

// ============================================================================
// –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
// ============================================================================

void performComparisonAnalysis() {
    std::cout << "üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ó–ò–¶–ò–ò –ò –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
    std::cout << std::string(60, '-') << "\n";
    
    std::cout << "üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:\n";
    std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã, vtable overhead\n";
    std::cout << "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏–Ω direction\n";
    std::cout << "‚Ä¢ –í–µ—Ä–¥–∏–∫—Ç: –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n";
    
    std::cout << "üîÑ –ì–ò–ë–ö–û–°–¢–¨:\n";
    std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤–æ –≤—Ä–µ–º—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏\n";
    std::cout << "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –í–µ—Ä–¥–∏–∫—Ç: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≥–∏–±—á–µ\n\n";
    
    std::cout << "üß™ –¢–ï–°–¢–ò–†–£–ï–ú–û–°–¢–¨:\n";
    std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –°–ª–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–∫–∏, —Ç–µ—Å–Ω–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –õ–µ–≥–∫–æ –∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Å–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –í–µ—Ä–¥–∏–∫—Ç: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n";
    
    std::cout << "üîß –°–û–ü–†–û–í–û–ñ–î–ê–ï–ú–û–°–¢–¨:\n";
    std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤\n";
    std::cout << "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω—ã\n";
    std::cout << "‚Ä¢ –í–µ—Ä–¥–∏–∫—Ç: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–æ—â–µ –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–∏\n\n";
    
    std::cout << "üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:\n";
    std::cout << "‚Ä¢ –ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –°–æ–∑–¥–∞–µ—Ç –∂–µ—Å—Ç–∫–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏\n";
    std::cout << "‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: –°–æ–∑–¥–∞–µ—Ç –≥–∏–±–∫–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n";
    std::cout << "‚Ä¢ –í–µ—Ä–¥–∏–∫—Ç: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ª—É—á—à–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n\n";
}

void provideRecommendations() {
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –ü–û–î–•–û–î–ê:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "‚úÖ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–ï –ö–û–ì–î–ê:\n";
    std::cout << "‚Ä¢ –ò—Å—Ç–∏–Ω–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ 'is-a'\n";
    std::cout << "‚Ä¢ –ù—É–∂–µ–Ω –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º\n";
    std::cout << "‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã)\n";
    std::cout << "‚Ä¢ Template Method Pattern\n";
    std::cout << "‚Ä¢ –ü—Ä–æ—Å—Ç—ã–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –±–µ–∑ –≥–ª—É–±–æ–∫–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n\n";
    
    std::cout << "‚úÖ –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–û–ú–ü–û–ó–ò–¶–ò–Æ –ö–û–ì–î–ê:\n";
    std::cout << "‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏–µ 'has-a' –∏–ª–∏ 'uses-a'\n";
    std::cout << "‚Ä¢ –ù—É–∂–Ω–∞ –≥–∏–±–∫–æ—Å—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ\n";
    std::cout << "‚Ä¢ –í–∞–∂–Ω–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –°–ª–æ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏\n\n";
    
    std::cout << "‚ùå –ò–ó–ë–ï–ì–ê–ô–¢–ï –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø –ö–û–ì–î–ê:\n";
    std::cout << "‚Ä¢ –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞\n";
    std::cout << "‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ (>3-4 —É—Ä–æ–≤–Ω—è)\n";
    std::cout << "‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n";
    std::cout << "‚Ä¢ –ß–∞—Å—Ç—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–∞—Ö\n\n";
    
    std::cout << "üî¨ –°–û–í–†–ï–ú–ï–ù–ù–´–ï –ü–û–î–•–û–î–´:\n";
    std::cout << "‚Ä¢ Dependency Injection –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏\n";
    std::cout << "‚Ä¢ Strategy Pattern –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ Factory Pattern –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\n";
    std::cout << "‚Ä¢ Observer Pattern –¥–ª—è —Å–ª–∞–±–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏\n\n";
}

int main() {
    std::cout << "üéØ –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ó–ò–¶–ò–ò –ò –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–æ–≤ –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏\n\n";
    
    // –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫
    CodeMetrics::analyzeInheritanceHierarchy();
    CodeMetrics::analyzeCompositionStructure();
    
    // –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    InheritancePerformanceTest::runTest();
    CompositionPerformanceTest::runTest();
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–∏–±–∫–æ—Å—Ç–∏
    InheritanceFlexibilityDemo::demonstrate();
    CompositionFlexibilityDemo::demonstrate();
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç–∏
    InheritanceTestabilityDemo::demonstrate();
    CompositionTestabilityDemo::demonstrate();
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    performComparisonAnalysis();
    provideRecommendations();
    
    std::cout << "üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:\n";
    std::cout << "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤.\n";
    std::cout << "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Ç–∏–Ω–Ω—ã—Ö 'is-a' –æ—Ç–Ω–æ—à–µ–Ω–∏–π.\n";
    std::cout << "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ç—è–≥–æ—Ç–µ–µ—Ç –∫ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ dependency injection.\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø 'Favor Composition over Inheritance' –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º!\n";
    
    return 0;
}
