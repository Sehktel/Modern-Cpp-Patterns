/**
 * @file composition_example.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –µ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–¥ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º:
 * - Loose Coupling
 * - Flexibility
 * - Easier Testing
 * - Multiple Inheritance Simulation
 */

#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <functional>
#include <map>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 * 
 * –ö–æ–º–ø–æ–∑–∏—Ü–∏—é –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄA, B ‚àà Objects: A composed_of B ‚üπ B ‚àà parts(A)
 * –≥–¥–µ parts(A) = {x | x —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ–±—ä–µ–∫—Ç–∞ A}
 * 
 * –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–±—ä–µ–∫—Ç A —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç B –∫–∞–∫ —Å–≤–æ—é —á–∞—Å—Ç—å.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: COMPOSITION OVER INHERITANCE
// ============================================================================

/**
 * @brief –ü—Ä–æ–±–ª–µ–º–∞: –°–ª–æ–∂–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
class BadVehicle {
protected:
    std::string name;
    int maxSpeed;
    int fuelCapacity;
    
public:
    BadVehicle(const std::string& vehicleName, int speed, int fuel) 
        : name(vehicleName), maxSpeed(speed), fuelCapacity(fuel) {
        std::cout << "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: " << name << "\n";
    }
    
    virtual ~BadVehicle() = default;
    
    virtual void start() {
        std::cout << "üöÄ " << name << " –∑–∞–≤–æ–¥–∏—Ç—Å—è\n";
    }
    
    virtual void stop() {
        std::cout << "üõë " << name << " –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è\n";
    }
    
    virtual void accelerate() {
        std::cout << "‚ö° " << name << " —É—Å–∫–æ—Ä—è–µ—Ç—Å—è\n";
    }
    
    virtual void brake() {
        std::cout << "üõë " << name << " —Ç–æ—Ä–º–æ–∑–∏—Ç\n";
    }
};

class BadCar : public BadVehicle {
public:
    BadCar(const std::string& name, int speed, int fuel) 
        : BadVehicle(name, speed, fuel) {
        std::cout << "üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å–æ–∑–¥–∞–Ω\n";
    }
    
    void openTrunk() {
        std::cout << "üì¶ " << name << " –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –±–∞–≥–∞–∂–Ω–∏–∫\n";
    }
};

class BadMotorcycle : public BadVehicle {
public:
    BadMotorcycle(const std::string& name, int speed, int fuel) 
        : BadVehicle(name, speed, fuel) {
        std::cout << "üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω\n";
    }
    
    void wheelie() {
        std::cout << "üîÑ " << name << " –¥–µ–ª–∞–µ—Ç –≤–∏–ª–ª–∏\n";
    }
};

// –ü—Ä–æ–±–ª–µ–º–∞: –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º?
class BadHybridVehicle : public BadCar {
private:
    bool electricMode;
    
public:
    BadHybridVehicle(const std::string& name, int speed, int fuel) 
        : BadCar(name, speed, fuel), electricMode(false) {
        std::cout << "üîã –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ\n";
    }
    
    void switchToElectric() {
        electricMode = true;
        std::cout << "‚ö° " << name << " –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º\n";
    }
    
    void switchToGas() {
        electricMode = false;
        std::cout << "‚õΩ " << name << " –ø–µ—Ä–µ–∫–ª—é—á–∏–ª—Å—è –Ω–∞ –±–µ–Ω–∑–∏–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º\n";
    }
};

/**
 * @brief –†–µ—à–µ–Ω–∏–µ: –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –≤–º–µ—Å—Ç–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
 */
// –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
class Engine {
private:
    std::string type;
    int power;
    bool running;
    
public:
    Engine(const std::string& engineType, int enginePower) 
        : type(engineType), power(enginePower), running(false) {
        std::cout << "üîß –î–≤–∏–≥–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: " << type << " (" << power << " –ª.—Å.)\n";
    }
    
    void start() {
        running = true;
        std::cout << "üöÄ –î–≤–∏–≥–∞—Ç–µ–ª—å " << type << " –∑–∞–ø—É—â–µ–Ω\n";
    }
    
    void stop() {
        running = false;
        std::cout << "üõë –î–≤–∏–≥–∞—Ç–µ–ª—å " << type << " –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n";
    }
    
    void accelerate() {
        if (running) {
            std::cout << "‚ö° –î–≤–∏–≥–∞—Ç–µ–ª—å " << type << " —É—Å–∫–æ—Ä—è–µ—Ç—Å—è\n";
        }
    }
    
    bool isRunning() const { return running; }
    const std::string& getType() const { return type; }
    int getPower() const { return power; }
};

class Wheel {
private:
    std::string material;
    int diameter;
    bool inflated;
    
public:
    Wheel(const std::string& wheelMaterial, int wheelDiameter) 
        : material(wheelMaterial), diameter(wheelDiameter), inflated(true) {
        std::cout << "‚≠ï –ö–æ–ª–µ—Å–æ —Å–æ–∑–¥–∞–Ω–æ: " << material << " (–¥–∏–∞–º–µ—Ç—Ä: " << diameter << " —Å–º)\n";
    }
    
    void inflate() {
        inflated = true;
        std::cout << "üí® –ö–æ–ª–µ—Å–æ " << material << " –Ω–∞–∫–∞—á–∞–Ω–æ\n";
    }
    
    void deflate() {
        inflated = false;
        std::cout << "üí® –ö–æ–ª–µ—Å–æ " << material << " —Å–ø—É—â–µ–Ω–æ\n";
    }
    
    void brake() {
        std::cout << "üõë –ö–æ–ª–µ—Å–æ " << material << " —Ç–æ—Ä–º–æ–∑–∏—Ç\n";
    }
    
    bool isInflated() const { return inflated; }
    const std::string& getMaterial() const { return material; }
    int getDiameter() const { return diameter; }
};

class FuelTank {
private:
    int capacity;
    int currentFuel;
    std::string fuelType;
    
public:
    FuelTank(int tankCapacity, const std::string& type = "gasoline") 
        : capacity(tankCapacity), currentFuel(tankCapacity), fuelType(type) {
        std::cout << "‚õΩ –¢–æ–ø–ª–∏–≤–Ω—ã–π –±–∞–∫ —Å–æ–∑–¥–∞–Ω: " << capacity << " –ª (" << fuelType << ")\n";
    }
    
    void refuel(int amount) {
        currentFuel = std::min(capacity, currentFuel + amount);
        std::cout << "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞ " << amount << " –ª " << fuelType << "\n";
    }
    
    void consume(int amount) {
        currentFuel = std::max(0, currentFuel - amount);
        std::cout << "‚õΩ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ " << amount << " –ª " << fuelType << "\n";
    }
    
    int getCurrentFuel() const { return currentFuel; }
    int getCapacity() const { return capacity; }
    const std::string& getFuelType() const { return fuelType; }
};

// –ü–æ–≤–µ–¥–µ–Ω–∏—è –∫–∞–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
class DrivingBehavior {
public:
    virtual ~DrivingBehavior() = default;
    virtual void drive() = 0;
    virtual std::string getBehaviorType() const = 0;
};

class NormalDriving : public DrivingBehavior {
public:
    void drive() override {
        std::cout << "üöó –û–±—ã—á–Ω–æ–µ –≤–æ–∂–¥–µ–Ω–∏–µ\n";
    }
    
    std::string getBehaviorType() const override {
        return "Normal";
    }
};

class AggressiveDriving : public DrivingBehavior {
public:
    void drive() override {
        std::cout << "üèéÔ∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –≤–æ–∂–¥–µ–Ω–∏–µ\n";
    }
    
    std::string getBehaviorType() const override {
        return "Aggressive";
    }
};

class EcoDriving : public DrivingBehavior {
public:
    void drive() override {
        std::cout << "üå± –≠–∫–æ-–≤–æ–∂–¥–µ–Ω–∏–µ\n";
    }
    
    std::string getBehaviorType() const override {
        return "Eco";
    }
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
class GoodVehicle {
private:
    std::string name;
    std::unique_ptr<Engine> engine;
    std::vector<std::unique_ptr<Wheel>> wheels;
    std::unique_ptr<FuelTank> fuelTank;
    std::unique_ptr<DrivingBehavior> drivingBehavior;
    
public:
    GoodVehicle(const std::string& vehicleName, 
                std::unique_ptr<Engine> vehicleEngine,
                std::unique_ptr<FuelTank> tank,
                std::unique_ptr<DrivingBehavior> behavior)
        : name(vehicleName), engine(std::move(vehicleEngine)), 
          fuelTank(std::move(tank)), drivingBehavior(std::move(behavior)) {
        std::cout << "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ: " << name << "\n";
    }
    
    void addWheel(std::unique_ptr<Wheel> wheel) {
        wheels.push_back(std::move(wheel));
        std::cout << "‚≠ï –ö–æ–ª–µ—Å–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ " << name << "\n";
    }
    
    void start() {
        std::cout << "üöÄ –ó–∞–ø—É—Å–∫ " << name << "\n";
        if (engine) {
            engine->start();
        }
    }
    
    void stop() {
        std::cout << "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ " << name << "\n";
        if (engine) {
            engine->stop();
        }
    }
    
    void drive() {
        std::cout << "üöó " << name << " –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ\n";
        if (drivingBehavior) {
            drivingBehavior->drive();
        }
        if (engine) {
            engine->accelerate();
        }
    }
    
    void brake() {
        std::cout << "üõë " << name << " —Ç–æ—Ä–º–æ–∑–∏—Ç\n";
        for (const auto& wheel : wheels) {
            wheel->brake();
        }
    }
    
    void refuel(int amount) {
        std::cout << "‚õΩ –ó–∞–ø—Ä–∞–≤–∫–∞ " << name << "\n";
        if (fuelTank) {
            fuelTank->refuel(amount);
        }
    }
    
    void changeDrivingBehavior(std::unique_ptr<DrivingBehavior> newBehavior) {
        drivingBehavior = std::move(newBehavior);
        std::cout << "üîÑ " << name << " –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∏–ª—å –≤–æ–∂–¥–µ–Ω–∏—è –Ω–∞ " 
                  << drivingBehavior->getBehaviorType() << "\n";
    }
    
    // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const std::string& getName() const { return name; }
    int getWheelCount() const { return wheels.size(); }
    std::string getEngineType() const { 
        return engine ? engine->getType() : "No engine"; 
    }
    std::string getFuelType() const { 
        return fuelTank ? fuelTank->getFuelType() : "No fuel tank"; 
    }
    std::string getDrivingBehavior() const { 
        return drivingBehavior ? drivingBehavior->getBehaviorType() : "No behavior"; 
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: STRATEGY PATTERN WITH COMPOSITION
// ============================================================================

/**
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Strategy —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
 */
class PaymentStrategy {
public:
    virtual ~PaymentStrategy() = default;
    virtual bool pay(double amount) = 0;
    virtual std::string getPaymentType() const = 0;
};

class CreditCardPayment : public PaymentStrategy {
private:
    std::string cardNumber;
    std::string expiryDate;
    
public:
    CreditCardPayment(const std::string& card, const std::string& expiry) 
        : cardNumber(card), expiryDate(expiry) {}
    
    bool pay(double amount) override {
        std::cout << "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π " << cardNumber.substr(0, 4) << "****: $" << amount << "\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Credit Card";
    }
};

class PayPalPayment : public PaymentStrategy {
private:
    std::string email;
    
public:
    PayPalPayment(const std::string& emailAddr) : email(emailAddr) {}
    
    bool pay(double amount) override {
        std::cout << "üí∞ PayPal –æ–ø–ª–∞—Ç–∞ —Å " << email << ": $" << amount << "\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "PayPal";
    }
};

class BankTransferPayment : public PaymentStrategy {
private:
    std::string accountNumber;
    
public:
    BankTransferPayment(const std::string& account) : accountNumber(account) {}
    
    bool pay(double amount) override {
        std::cout << "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Å " << accountNumber << ": $" << amount << "\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Bank Transfer";
    }
};

class PaymentProcessor {
private:
    std::unique_ptr<PaymentStrategy> paymentStrategy;
    std::string processorName;
    
public:
    PaymentProcessor(const std::string& name, std::unique_ptr<PaymentStrategy> strategy)
        : processorName(name), paymentStrategy(std::move(strategy)) {}
    
    bool processPayment(double amount) {
        std::cout << "üîÑ " << processorName << " –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂\n";
        if (paymentStrategy) {
            return paymentStrategy->pay(amount);
        }
        return false;
    }
    
    void changePaymentMethod(std::unique_ptr<PaymentStrategy> newStrategy) {
        paymentStrategy = std::move(newStrategy);
        std::cout << "üîÑ " << processorName << " –∏–∑–º–µ–Ω–∏–ª –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–∞ " 
                  << paymentStrategy->getPaymentType() << "\n";
    }
    
    std::string getCurrentPaymentMethod() const {
        return paymentStrategy ? paymentStrategy->getPaymentType() : "None";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: COMPOSITION FOR MULTIPLE INHERITANCE SIMULATION
// ============================================================================

/**
 * @brief –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
 */
class Flyable {
public:
    virtual ~Flyable() = default;
    virtual void fly() = 0;
    virtual std::string getFlyableType() const = 0;
};

class Swimmable {
public:
    virtual ~Swimmable() = default;
    virtual void swim() = 0;
    virtual std::string getSwimmableType() const = 0;
};

class Walkable {
public:
    virtual ~Walkable() = default;
    virtual void walk() = 0;
    virtual std::string getWalkableType() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
class BirdFlying : public Flyable {
public:
    void fly() override {
        std::cout << "ü¶Ö –ü—Ç–∏—Ü–∞ –ª–µ—Ç–∞–µ—Ç, –º–∞—Ö–∞—è –∫—Ä—ã–ª—å—è–º–∏\n";
    }
    
    std::string getFlyableType() const override {
        return "Bird Flying";
    }
};

class InsectFlying : public Flyable {
public:
    void fly() override {
        std::cout << "ü¶ü –ù–∞—Å–µ–∫–æ–º–æ–µ –ª–µ—Ç–∞–µ—Ç, –∂—É–∂–∂–∞ –∫—Ä—ã–ª—å—è–º–∏\n";
    }
    
    std::string getFlyableType() const override {
        return "Insect Flying";
    }
};

class FishSwimming : public Swimmable {
public:
    void swim() override {
        std::cout << "üêü –†—ã–±–∞ –ø–ª—ã–≤–µ—Ç, –¥–≤–∏–≥–∞—è –ø–ª–∞–≤–Ω–∏–∫–∞–º–∏\n";
    }
    
    std::string getSwimmableType() const override {
        return "Fish Swimming";
    }
};

class DuckSwimming : public Swimmable {
public:
    void swim() override {
        std::cout << "ü¶Ü –£—Ç–∫–∞ –ø–ª—ã–≤–µ—Ç, –≥—Ä–µ–±—è –ª–∞–ø–∫–∞–º–∏\n";
    }
    
    std::string getSwimmableType() const override {
        return "Duck Swimming";
    }
};

class HumanWalking : public Walkable {
public:
    void walk() override {
        std::cout << "üö∂ –ß–µ–ª–æ–≤–µ–∫ –∏–¥–µ—Ç –Ω–∞ –¥–≤—É—Ö –Ω–æ–≥–∞—Ö\n";
    }
    
    std::string getWalkableType() const override {
        return "Human Walking";
    }
};

class DogWalking : public Walkable {
public:
    void walk() override {
        std::cout << "üêï –°–æ–±–∞–∫–∞ –∏–¥–µ—Ç –Ω–∞ —á–µ—Ç—ã—Ä–µ—Ö –ª–∞–ø–∞—Ö\n";
    }
    
    std::string getWalkableType() const override {
        return "Dog Walking";
    }
};

// –ñ–∏–≤–æ—Ç–Ω–æ–µ —Å –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
class Animal {
private:
    std::string name;
    std::string species;
    std::unique_ptr<Flyable> flyingAbility;
    std::unique_ptr<Swimmable> swimmingAbility;
    std::unique_ptr<Walkable> walkingAbility;
    
public:
    Animal(const std::string& animalName, const std::string& animalSpecies)
        : name(animalName), species(animalSpecies) {
        std::cout << "üêæ –ñ–∏–≤–æ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–æ: " << name << " (" << species << ")\n";
    }
    
    void addFlyingAbility(std::unique_ptr<Flyable> ability) {
        flyingAbility = std::move(ability);
        std::cout << "ü¶Ö " << name << " –ø–æ–ª—É—á–∏–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–µ—Ç–∞—Ç—å: " 
                  << flyingAbility->getFlyableType() << "\n";
    }
    
    void addSwimmingAbility(std::unique_ptr<Swimmable> ability) {
        swimmingAbility = std::move(ability);
        std::cout << "üèä " << name << " –ø–æ–ª—É—á–∏–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–ª–∞–≤–∞—Ç—å: " 
                  << swimmingAbility->getSwimmableType() << "\n";
    }
    
    void addWalkingAbility(std::unique_ptr<Walkable> ability) {
        walkingAbility = std::move(ability);
        std::cout << "üö∂ " << name << " –ø–æ–ª—É—á–∏–ª —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ö–æ–¥–∏—Ç—å: " 
                  << walkingAbility->getWalkableType() << "\n";
    }
    
    void fly() {
        if (flyingAbility) {
            flyingAbility->fly();
        } else {
            std::cout << "‚ùå " << name << " –Ω–µ —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å\n";
        }
    }
    
    void swim() {
        if (swimmingAbility) {
            swimmingAbility->swim();
        } else {
            std::cout << "‚ùå " << name << " –Ω–µ —É–º–µ–µ—Ç –ø–ª–∞–≤–∞—Ç—å\n";
        }
    }
    
    void walk() {
        if (walkingAbility) {
            walkingAbility->walk();
        } else {
            std::cout << "‚ùå " << name << " –Ω–µ —É–º–µ–µ—Ç —Ö–æ–¥–∏—Ç—å\n";
        }
    }
    
    void showAbilities() {
        std::cout << "üìã –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ " << name << ":\n";
        std::cout << "  –õ–µ—Ç–∞–Ω–∏–µ: " << (flyingAbility ? "–î–∞" : "–ù–µ—Ç") << "\n";
        std::cout << "  –ü–ª–∞–≤–∞–Ω–∏–µ: " << (swimmingAbility ? "–î–∞" : "–ù–µ—Ç") << "\n";
        std::cout << "  –•–æ–¥—å–±–∞: " << (walkingAbility ? "–î–∞" : "–ù–µ—Ç") << "\n";
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í
// ============================================================================

void demonstrateCompositionBenefits() {
    std::cout << "‚úÖ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π:\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    auto engine = std::make_unique<Engine>("V8", 300);
    auto fuelTank = std::make_unique<FuelTank>(60, "gasoline");
    auto drivingBehavior = std::make_unique<NormalDriving>();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
    GoodVehicle car("–ú–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", std::move(engine), std::move(fuelTank), std::move(drivingBehavior));
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–µ—Å
    for (int i = 0; i < 4; ++i) {
        car.addWheel(std::make_unique<Wheel>("Rubber", 65));
    }
    
    // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞
    car.start();
    car.drive();
    car.brake();
    car.refuel(20);
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    car.changeDrivingBehavior(std::make_unique<EcoDriving>());
    car.drive();
    
    std::cout << "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–º —Å—Ä–µ–¥—Å—Ç–≤–µ:\n";
    std::cout << "–ò–º—è: " << car.getName() << "\n";
    std::cout << "–ö–æ–ª–µ—Å: " << car.getWheelCount() << "\n";
    std::cout << "–î–≤–∏–≥–∞—Ç–µ–ª—å: " << car.getEngineType() << "\n";
    std::cout << "–¢–æ–ø–ª–∏–≤–æ: " << car.getFuelType() << "\n";
    std::cout << "–°—Ç–∏–ª—å –≤–æ–∂–¥–µ–Ω–∏—è: " << car.getDrivingBehavior() << "\n";
}

void demonstrateStrategyPattern() {
    std::cout << "\n‚úÖ STRATEGY PATTERN –° –ö–û–ú–ü–û–ó–ò–¶–ò–ï–ô:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
    PaymentProcessor processor1("–û–Ω–ª–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω", 
                               std::make_unique<CreditCardPayment>("1234567890123456", "12/25"));
    
    PaymentProcessor processor2("–°–µ—Ä–≤–∏—Å –ø–æ–¥–ø–∏—Å–∫–∏", 
                               std::make_unique<PayPalPayment>("user@example.com"));
    
    PaymentProcessor processor3("B2B –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", 
                               std::make_unique<BankTransferPayment>("9876543210987654"));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    processor1.processPayment(100.0);
    processor2.processPayment(25.0);
    processor3.processPayment(1000.0);
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    processor1.changePaymentMethod(std::make_unique<PayPalPayment>("customer@example.com"));
    processor1.processPayment(150.0);
}

void demonstrateMultipleInheritanceSimulation() {
    std::cout << "\n‚úÖ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–û–ì–û –ù–ê–°–õ–ï–î–û–í–ê–ù–ò–Ø:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏
    Animal duck("–î–æ–Ω–∞–ª—å–¥", "–£—Ç–∫–∞");
    duck.addFlyingAbility(std::make_unique<BirdFlying>());
    duck.addSwimmingAbility(std::make_unique<DuckSwimming>());
    duck.addWalkingAbility(std::make_unique<DogWalking>());
    
    Animal fish("–ù–µ–º–æ", "–†—ã–±–∞-–∫–ª–æ—É–Ω");
    fish.addSwimmingAbility(std::make_unique<FishSwimming>());
    
    Animal bird("–¢–≤–∏—Ç–∏", "–ö–∞–Ω–∞—Ä–µ–π–∫–∞");
    bird.addFlyingAbility(std::make_unique<BirdFlying>());
    
    Animal human("–ò–≤–∞–Ω", "–ß–µ–ª–æ–≤–µ–∫");
    human.addWalkingAbility(std::make_unique<HumanWalking>());
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
    std::cout << "\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π:\n";
    
    duck.showAbilities();
    duck.fly();
    duck.swim();
    duck.walk();
    
    std::cout << "\n";
    fish.showAbilities();
    fish.swim();
    fish.fly();
    
    std::cout << "\n";
    bird.showAbilities();
    bird.fly();
    bird.swim();
    
    std::cout << "\n";
    human.showAbilities();
    human.walk();
    human.fly();
}

void analyzeCompositionAdvantages() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ü–†–ï–ò–ú–£–©–ï–°–¢–í –ö–û–ú–ü–û–ó–ò–¶–ò–ò:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –û–°–ù–û–í–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ Loose Coupling - —Å–ª–∞–±–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n";
    std::cout << "‚Ä¢ Flexibility - –≥–∏–±–∫–æ—Å—Ç—å –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ Easier Testing - –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ Multiple Inheritance Simulation - —Å–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ Runtime Behavior Changes - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ Better Encapsulation - –ª—É—á—à–∞—è –∏–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏—è\n\n";
    
    std::cout << "‚úÖ –ü–û–°–õ–ï–î–°–¢–í–ò–Ø:\n";
    std::cout << "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ maintainability\n";
    std::cout << "‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏–µ –≥–∏–±–∫–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Strategy Pattern –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ Dependency Injection\n";
    std::cout << "‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n";
}

int main() {
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ò–ú–£–©–ï–°–¢–í –ö–û–ú–ü–û–ó–ò–¶–ò–ò\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –ü–æ–Ω–∏–º–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –Ω–∞–¥ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º\n\n";
    
    demonstrateCompositionBenefits();
    demonstrateStrategyPattern();
    demonstrateMultipleInheritanceSimulation();
    analyzeCompositionAdvantages();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: ‚àÄA, B ‚àà Objects: A composed_of B ‚üπ B ‚àà parts(A)\n";
    std::cout << "–≥–¥–µ parts(A) = {x | x —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ–±—ä–µ–∫—Ç–∞ A}\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ª–∞–±—É—é —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å\n";
    std::cout << "2. –ü–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n";
    std::cout << "3. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ\n";
    std::cout << "4. –ö–æ–º–ø–æ–∑–∏—Ü–∏—è —Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É 'Favor Composition over Inheritance'\n\n";
    
    std::cout << "üî¨ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è - –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∏–±–∫–∏—Ö —Å–∏—Å—Ç–µ–º!\n";
    
    return 0;
}
