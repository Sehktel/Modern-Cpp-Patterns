/**
 * @file lsp_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Liskov Substitution Principle (LSP)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ LSP —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
 * –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */

#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <stdexcept>
#include <cmath>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è LSP
 * 
 * LSP –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄD ‚äÜ B: ‚àÄd ‚àà D, ‚àÄb ‚àà B: behavior(d) ‚äÜ behavior(b)
 * –≥–¥–µ behavior(x) = {–º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å x}
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –æ–±—ä–µ–∫—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω—è–µ–º—ã
 * –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–† –° –ü–†–Ø–ú–û–£–ì–û–õ–¨–ù–ò–ö–û–ú –ò –ö–í–ê–î–†–ê–¢–û–ú
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω Rectangle-Square
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ LSP, –∫–æ–≥–¥–∞ Square –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç Rectangle,
 * –Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞.
 */
class BadRectangle {
protected:
    int width;
    int height;
    
public:
    BadRectangle(int w, int h) : width(w), height(h) {}
    
    virtual void setWidth(int w) {
        width = w;
        std::cout << "üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —à–∏—Ä–∏–Ω–∞: " << w << "\n";
    }
    
    virtual void setHeight(int h) {
        height = h;
        std::cout << "üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞: " << h << "\n";
    }
    
    virtual int getWidth() const { return width; }
    virtual int getHeight() const { return height; }
    
    virtual int getArea() const {
        return width * height;
    }
    
    virtual int getPerimeter() const {
        return 2 * (width + height);
    }
    
    virtual std::string getType() const {
        return "Rectangle";
    }
};

class BadSquare : public BadRectangle {
public:
    BadSquare(int side) : BadRectangle(side, side) {}
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    void setWidth(int w) override {
        width = w;
        height = w;  // –ö–≤–∞–¥—Ä–∞—Ç –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ä–∞–≤–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        std::cout << "‚¨ú –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞: " << w << "\n";
    }
    
    void setHeight(int h) override {
        width = h;   // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω—è–µ–º width –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ height
        height = h;
        std::cout << "‚¨ú –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∞: " << h << "\n";
    }
    
    std::string getType() const override {
        return "Square";
    }
};

/**
 * @brief –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ LSP
 * 
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–µ—Ç, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã—Å–æ—Ç—É,
 * –Ω–æ —Å Square —ç—Ç–æ –Ω–µ —Ç–∞–∫.
 */
void demonstrateLSPViolation(BadRectangle& rect) {
    std::cout << "\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –¥–ª—è " << rect.getType() << ":\n";
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    int originalWidth = rect.getWidth();
    int originalHeight = rect.getHeight();
    int originalArea = rect.getArea();
    
    std::cout << "–ò—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: " << originalWidth << "x" << originalHeight 
              << ", –ø–ª–æ—â–∞–¥—å: " << originalArea << "\n";
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —à–∏—Ä–∏–Ω—É
    rect.setWidth(10);
    
    int newWidth = rect.getWidth();
    int newHeight = rect.getHeight();
    int newArea = rect.getArea();
    
    std::cout << "–ü–æ—Å–ª–µ setWidth(10): " << newWidth << "x" << newHeight 
              << ", –ø–ª–æ—â–∞–¥—å: " << newArea << "\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–∞—Ä–∏–∞–Ω—Ç—ã LSP
    bool widthChanged = (newWidth != originalWidth);
    bool heightPreserved = (newHeight == originalHeight);
    bool behaviorConsistent = widthChanged && heightPreserved;
    
    std::cout << "‚úÖ –®–∏—Ä–∏–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: " << (widthChanged ? "–î–∞" : "–ù–µ—Ç") << "\n";
    std::cout << "‚úÖ –í—ã—Å–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å: " << (heightPreserved ? "–î–∞" : "–ù–µ—Ç") << "\n";
    std::cout << "‚ùå –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ: " << (behaviorConsistent ? "–î–∞" : "–ù–µ—Ç") << "\n";
    
    if (!behaviorConsistent) {
        std::cout << "üö® –ù–ê–†–£–®–ï–ù–ò–ï LSP: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø–æ–≤–ª–∏—è–ª–æ –Ω–∞ –≤—ã—Å–æ—Ç—É!\n";
    }
}

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –°–ò–°–¢–ï–ú–ê –§–ê–ô–õ–û–í
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∞–π–ª–æ–≤
 */
class BadFile {
protected:
    std::string name;
    size_t size;
    
public:
    BadFile(const std::string& fileName, size_t fileSize) 
        : name(fileName), size(fileSize) {}
    
    virtual ~BadFile() = default;
    
    virtual void read() {
        std::cout << "üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " << name << " (—Ä–∞–∑–º–µ—Ä: " << size << " –±–∞–π—Ç)\n";
    }
    
    virtual void write(const std::string& data) {
        std::cout << "‚úçÔ∏è –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª: " << name << " (–¥–∞–Ω–Ω—ã–µ: " << data << ")\n";
    }
    
    virtual void deleteFile() {
        std::cout << "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: " << name << "\n";
    }
    
    virtual std::string getName() const { return name; }
    virtual size_t getSize() const { return size; }
};

class BadReadOnlyFile : public BadFile {
public:
    BadReadOnlyFile(const std::string& fileName, size_t fileSize) 
        : BadFile(fileName, fileSize) {}
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    void write(const std::string& data) override {
        throw std::runtime_error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è: " + name);
    }
    
    void deleteFile() override {
        throw std::runtime_error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è: " + name);
    }
};

/**
 * @brief –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ LSP –≤ —Å–∏—Å—Ç–µ–º–µ —Ñ–∞–π–ª–æ–≤
 */
void demonstrateFileLSPViolation(BadFile& file) {
    std::cout << "\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: " << file.getName() << "\n";
    
    try {
        file.read();
        file.write("test data");
        file.deleteFile();
        std::cout << "‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n";
    } catch (const std::exception& e) {
        std::cout << "‚ùå –û—à–∏–±–∫–∞: " << e.what() << "\n";
        std::cout << "üö® –ù–ê–†–£–®–ï–ù–ò–ï LSP: –§–∞–π–ª –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –±–∞–∑–æ–≤—ã–º —Ç–∏–ø–æ–º!\n";
    }
}

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø LSP
// ============================================================================

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ LSP: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
 */
class Shape {
public:
    virtual ~Shape() = default;
    virtual double getArea() const = 0;
    virtual double getPerimeter() const = 0;
    virtual std::string getType() const = 0;
    virtual void printInfo() const = 0;
};

class Rectangle : public Shape {
private:
    double width;
    double height;
    
public:
    Rectangle(double w, double h) : width(w), height(h) {}
    
    double getArea() const override {
        return width * height;
    }
    
    double getPerimeter() const override {
        return 2 * (width + height);
    }
    
    std::string getType() const override {
        return "Rectangle";
    }
    
    void printInfo() const override {
        std::cout << "üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: " << width << "x" << height 
                  << ", –ø–ª–æ—â–∞–¥—å: " << getArea() << ", –ø–µ—Ä–∏–º–µ—Ç—Ä: " << getPerimeter() << "\n";
    }
    
    // –ú–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    void setWidth(double w) { width = w; }
    void setHeight(double h) { height = h; }
    double getWidth() const { return width; }
    double getHeight() const { return height; }
};

class Square : public Shape {
private:
    double side;
    
public:
    Square(double s) : side(s) {}
    
    double getArea() const override {
        return side * side;
    }
    
    double getPerimeter() const override {
        return 4 * side;
    }
    
    std::string getType() const override {
        return "Square";
    }
    
    void printInfo() const override {
        std::cout << "‚¨ú –ö–≤–∞–¥—Ä–∞—Ç: —Å—Ç–æ—Ä–æ–Ω–∞ " << side 
                  << ", –ø–ª–æ—â–∞–¥—å: " << getArea() << ", –ø–µ—Ä–∏–º–µ—Ç—Ä: " << getPerimeter() << "\n";
    }
    
    // –ú–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
    void setSide(double s) { side = s; }
    double getSide() const { return side; }
};

class Circle : public Shape {
private:
    double radius;
    
public:
    Circle(double r) : radius(r) {}
    
    double getArea() const override {
        return M_PI * radius * radius;
    }
    
    double getPerimeter() const override {
        return 2 * M_PI * radius;
    }
    
    std::string getType() const override {
        return "Circle";
    }
    
    void printInfo() const override {
        std::cout << "‚≠ï –ö—Ä—É–≥: —Ä–∞–¥–∏—É—Å " << radius 
                  << ", –ø–ª–æ—â–∞–¥—å: " << getArea() << ", –ø–µ—Ä–∏–º–µ—Ç—Ä: " << getPerimeter() << "\n";
    }
    
    // –ú–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫—Ä—É–≥–∞
    void setRadius(double r) { radius = r; }
    double getRadius() const { return radius; }
};

/**
 * @brief –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–±–ª—é–¥–µ–Ω–∏–µ LSP
 * 
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±–æ–π —Ñ–∏–≥—É—Ä–æ–π —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Shape,
 * –∏ –≤—Å–µ —Ñ–∏–≥—É—Ä—ã –≤–µ–¥—É—Ç —Å–µ–±—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ.
 */
void demonstrateGoodLSP(const Shape& shape) {
    std::cout << "\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –¥–ª—è " << shape.getType() << ":\n";
    shape.printInfo();
    
    // –í—Å–µ —Ñ–∏–≥—É—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    double area = shape.getArea();
    double perimeter = shape.getPerimeter();
    
    std::cout << "‚úÖ –ü–ª–æ—â–∞–¥—å: " << area << "\n";
    std::cout << "‚úÖ –ü–µ—Ä–∏–º–µ—Ç—Ä: " << perimeter << "\n";
    std::cout << "‚úÖ LSP —Å–æ–±–ª—é–¥–µ–Ω: —Ñ–∏–≥—É—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –±–∞–∑–æ–≤—ã–º —Ç–∏–ø–æ–º\n";
}

// ============================================================================
// –ü–†–ò–ú–ï–† 4: –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ============================================================================

/**
 * @brief –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è LSP –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
class NotificationChannel {
public:
    virtual ~NotificationChannel() = default;
    virtual bool send(const std::string& message) = 0;
    virtual std::string getChannelType() const = 0;
    virtual bool isAvailable() const = 0;
    virtual void configure() = 0;
};

class EmailChannel : public NotificationChannel {
private:
    std::string email;
    bool configured;
    
public:
    EmailChannel(const std::string& emailAddr) : email(emailAddr), configured(false) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            std::cout << "‚ùå Email –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            return false;
        }
        
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << email << ": " << message << "\n";
        return true;
    }
    
    std::string getChannelType() const override {
        return "Email";
    }
    
    bool isAvailable() const override {
        return configured && !email.empty() && email.find('@') != std::string::npos;
    }
    
    void configure() override {
        configured = true;
        std::cout << "‚öôÔ∏è Email –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è " << email << "\n";
    }
};

class SMSChannel : public NotificationChannel {
private:
    std::string phoneNumber;
    bool configured;
    
public:
    SMSChannel(const std::string& phone) : phoneNumber(phone), configured(false) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            std::cout << "‚ùå SMS –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            return false;
        }
        
        std::cout << "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ " << phoneNumber << ": " << message << "\n";
        return true;
    }
    
    std::string getChannelType() const override {
        return "SMS";
    }
    
    bool isAvailable() const override {
        return configured && phoneNumber.length() >= 10;
    }
    
    void configure() override {
        configured = true;
        std::cout << "‚öôÔ∏è SMS –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è " << phoneNumber << "\n";
    }
};

class PushNotificationChannel : public NotificationChannel {
private:
    std::string deviceToken;
    bool configured;
    
public:
    PushNotificationChannel(const std::string& token) : deviceToken(token), configured(false) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            std::cout << "‚ùå Push –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            return false;
        }
        
        std::cout << "üîî –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ " 
                  << deviceToken.substr(0, 8) << "...: " << message << "\n";
        return true;
    }
    
    std::string getChannelType() const override {
        return "Push Notification";
    }
    
    bool isAvailable() const override {
        return configured && deviceToken.length() >= 32;
    }
    
    void configure() override {
        configured = true;
        std::cout << "‚öôÔ∏è Push –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ " 
                  << deviceToken.substr(0, 8) << "...\n";
    }
};

class NotificationService {
public:
    static void sendNotification(std::unique_ptr<NotificationChannel> channel, 
                                const std::string& message) {
        if (!channel) {
            std::cout << "‚ùå –ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n";
            return;
        }
        
        std::cout << "\nüîî –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ " << channel->getChannelType() << ":\n";
        
        // –í—Å–µ –∫–∞–Ω–∞–ª—ã –≤–µ–¥—É—Ç —Å–µ–±—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è LSP
        channel->configure();
        
        if (channel->isAvailable()) {
            bool success = channel->send(message);
            std::cout << "–†–µ–∑—É–ª—å—Ç–∞—Ç: " << (success ? "‚úÖ –£—Å–ø–µ—à–Ω–æ" : "‚ùå –û—à–∏–±–∫–∞") << "\n";
        } else {
            std::cout << "‚ùå –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
        }
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 5: –°–ò–°–¢–ï–ú–ê –ö–û–õ–õ–ï–ö–¶–ò–ô
// ============================================================================

/**
 * @brief –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è LSP –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–ª–ª–µ–∫—Ü–∏–π
 */
template<typename T>
class Collection {
public:
    virtual ~Collection() = default;
    virtual void add(const T& item) = 0;
    virtual bool remove(const T& item) = 0;
    virtual bool contains(const T& item) const = 0;
    virtual size_t size() const = 0;
    virtual bool isEmpty() const = 0;
    virtual void clear() = 0;
    virtual std::string getType() const = 0;
};

template<typename T>
class List : public Collection<T> {
private:
    std::vector<T> items;
    
public:
    void add(const T& item) override {
        items.push_back(item);
        std::cout << "‚ûï –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫: " << item << "\n";
    }
    
    bool remove(const T& item) override {
        auto it = std::find(items.begin(), items.end(), item);
        if (it != items.end()) {
            items.erase(it);
            std::cout << "‚ûñ –£–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞: " << item << "\n";
            return true;
        }
        return false;
    }
    
    bool contains(const T& item) const override {
        return std::find(items.begin(), items.end(), item) != items.end();
    }
    
    size_t size() const override {
        return items.size();
    }
    
    bool isEmpty() const override {
        return items.empty();
    }
    
    void clear() override {
        items.clear();
        std::cout << "üóëÔ∏è –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω\n";
    }
    
    std::string getType() const override {
        return "List";
    }
};

template<typename T>
class Set : public Collection<T> {
private:
    std::vector<T> items;
    
    bool itemExists(const T& item) const {
        return std::find(items.begin(), items.end(), item) != items.end();
    }
    
public:
    void add(const T& item) override {
        if (!itemExists(item)) {
            items.push_back(item);
            std::cout << "‚ûï –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ: " << item << "\n";
        } else {
            std::cout << "‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ: " << item << "\n";
        }
    }
    
    bool remove(const T& item) override {
        auto it = std::find(items.begin(), items.end(), item);
        if (it != items.end()) {
            items.erase(it);
            std::cout << "‚ûñ –£–¥–∞–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞: " << item << "\n";
            return true;
        }
        return false;
    }
    
    bool contains(const T& item) const override {
        return itemExists(item);
    }
    
    size_t size() const override {
        return items.size();
    }
    
    bool isEmpty() const override {
        return items.empty();
    }
    
    void clear() override {
        items.clear();
        std::cout << "üóëÔ∏è –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ—á–∏—â–µ–Ω–æ\n";
    }
    
    std::string getType() const override {
        return "Set";
    }
};

template<typename T>
class Stack : public Collection<T> {
private:
    std::vector<T> items;
    
public:
    void add(const T& item) override {
        items.push_back(item);
        std::cout << "‚¨ÜÔ∏è –≠–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–µ–∫: " << item << "\n";
    }
    
    bool remove(const T& item) override {
        if (!items.empty() && items.back() == item) {
            items.pop_back();
            std::cout << "‚¨áÔ∏è –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ç–µ–∫–∞: " << item << "\n";
            return true;
        }
        std::cout << "‚ö†Ô∏è –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–µ–∫–∞\n";
        return false;
    }
    
    bool contains(const T& item) const override {
        return std::find(items.begin(), items.end(), item) != items.end();
    }
    
    size_t size() const override {
        return items.size();
    }
    
    bool isEmpty() const override {
        return items.empty();
    }
    
    void clear() override {
        items.clear();
        std::cout << "üóëÔ∏è –°—Ç–µ–∫ –æ—á–∏—â–µ–Ω\n";
    }
    
    std::string getType() const override {
        return "Stack";
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Å—Ç–µ–∫–∞
    T top() const {
        if (items.empty()) {
            throw std::runtime_error("–°—Ç–µ–∫ –ø—É—Å—Ç");
        }
        return items.back();
    }
    
    void pop() {
        if (!items.empty()) {
            items.pop_back();
        }
    }
};

template<typename T>
void demonstrateCollectionLSP(std::unique_ptr<Collection<T>> collection, 
                             const std::vector<T>& testItems) {
    std::cout << "\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LSP –¥–ª—è " << collection->getType() << ":\n";
    
    // –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    std::cout << "–†–∞–∑–º–µ—Ä: " << collection->size() << "\n";
    std::cout << "–ü—É—Å—Ç–∞: " << (collection->isEmpty() ? "–î–∞" : "–ù–µ—Ç") << "\n";
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    for (const auto& item : testItems) {
        collection->add(item);
    }
    
    std::cout << "–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: " << collection->size() << "\n";
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    for (const auto& item : testItems) {
        bool contains = collection->contains(item);
        std::cout << "–°–æ–¥–µ—Ä–∂–∏—Ç '" << item << "': " << (contains ? "–î–∞" : "–ù–µ—Ç") << "\n";
    }
    
    // –û—á–∏—Å—Ç–∫–∞
    collection->clear();
    std::cout << "–†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: " << collection->size() << "\n";
    std::cout << "‚úÖ LSP —Å–æ–±–ª—é–¥–µ–Ω: –∫–æ–ª–ª–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω–∞ –±–∞–∑–æ–≤—ã–º —Ç–∏–ø–æ–º\n";
}

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateBadLSP() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä Rectangle-Square:\n";
    std::cout << std::string(60, '-') << "\n";
    
    BadRectangle rect(5, 10);
    BadSquare square(5);
    
    std::cout << "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rectangle:\n";
    demonstrateLSPViolation(rect);
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Square:\n";
    demonstrateLSPViolation(square);
    
    std::cout << "\n‚ùå –ù–ê–†–£–®–ï–ù–ò–ï LSP - –°–∏—Å—Ç–µ–º–∞ —Ñ–∞–π–ª–æ–≤:\n";
    std::cout << std::string(40, '-') << "\n";
    
    BadFile regularFile("document.txt", 1024);
    BadReadOnlyFile readOnlyFile("readonly.txt", 512);
    
    demonstrateFileLSPViolation(regularFile);
    demonstrateFileLSPViolation(readOnlyFile);
}

void demonstrateGoodLSP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï LSP - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∏–≥—É—Ä:\n";
    std::cout << std::string(50, '-') << "\n";
    
    Rectangle rect(5, 10);
    Square square(5);
    Circle circle(3);
    
    demonstrateGoodLSP(rect);
    demonstrateGoodLSP(square);
    demonstrateGoodLSP(circle);
    
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï LSP - –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n";
    std::cout << std::string(40, '-') << "\n";
    
    NotificationService::sendNotification(
        std::make_unique<EmailChannel>("user@example.com"),
        "–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
    );
    
    NotificationService::sendNotification(
        std::make_unique<SMSChannel>("+1234567890"),
        "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: 123456"
    );
    
    NotificationService::sendNotification(
        std::make_unique<PushNotificationChannel>("abc123def456ghi789jkl012mno345pqr678"),
        "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"
    );
    
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï LSP - –°–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:\n";
    std::cout << std::string(40, '-') << "\n";
    
    std::vector<std::string> testItems = {"apple", "banana", "cherry", "apple"};
    
    demonstrateCollectionLSP(
        std::make_unique<List<std::string>>(),
        testItems
    );
    
    demonstrateCollectionLSP(
        std::make_unique<Set<std::string>>(),
        testItems
    );
    
    demonstrateCollectionLSP(
        std::make_unique<Stack<std::string>>(),
        testItems
    );
}

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í LSP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–æ–≤\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–≥–æ–≤ –≤ runtime\n";
    std::cout << "‚Ä¢ –õ—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–π\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –≤–º–µ—Å—Ç–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ\n";
    std::cout << "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø "is-a" vs "has-a" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LISKOV SUBSTITUTION PRINCIPLE (LSP)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –õ–∏—Å–∫–æ–≤\n\n";
    
    demonstrateBadLSP();
    demonstrateGoodLSP();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "LSP: ‚àÄD ‚äÜ B: ‚àÄd ‚àà D, ‚àÄb ‚àà B: behavior(d) ‚äÜ behavior(b)\n";
    std::cout << "–≥–¥–µ behavior(x) = {–º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å x}\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –û–±—ä–µ–∫—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–º–µ–Ω—è–µ–º—ã –æ–±—ä–µ–∫—Ç–∞–º–∏ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞\n";
    std::cout << "2. –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—Ä—É—à–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞\n";
    std::cout << "3. LSP –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞\n";
    std::cout << "4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏–π\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
