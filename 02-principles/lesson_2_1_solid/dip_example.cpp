/**
 * @file dip_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Dependency Inversion Principle (DIP)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ DIP —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
 * –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */

#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <map>
#include <fstream>
#include <sstream>
#include <chrono>
#include <iomanip>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è DIP
 * 
 * DIP –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄM‚ÇÅ ‚àà HighLevel, ‚àÄM‚ÇÇ ‚àà LowLevel:
 * Dependency(M‚ÇÅ, M‚ÇÇ) ‚üπ ‚àÉA ‚àà Abstractions: 
 * Dependency(M‚ÇÅ, A) ‚àß Dependency(M‚ÇÇ, A)
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –º–æ–¥—É–ª–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–æ–¥—É–ª–µ–π
 * –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è. –û–±–∞ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∞—Ä—É—à–∞–µ—Ç DIP, —Ç–∞–∫ –∫–∞–∫ BusinessLogic –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç
 * –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ FileLogger –∏ EmailNotification.
 */
class BadFileLogger {
public:
    void log(const std::string& message) {
        std::ofstream logFile("application.log", std::ios::app);
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        logFile << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                << "] [FILE] " << message << "\n";
        logFile.close();
        std::cout << "üìù [FILE] " << message << "\n";
    }
};

class BadConsoleLogger {
public:
    void log(const std::string& message) {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] [CONSOLE] " << message << "\n";
    }
};

class BadEmailNotification {
public:
    void send(const std::string& message) {
        std::cout << "üìß [EMAIL] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    }
};

class BadSMSNotification {
public:
    void send(const std::string& message) {
        std::cout << "üì± [SMS] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS: " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
    }
};

class BadBusinessLogic {
private:
    BadFileLogger fileLogger;
    BadConsoleLogger consoleLogger;
    BadEmailNotification emailNotification;
    BadSMSNotification smsNotification;
    
public:
    void processOrder(const std::string& orderId) {
        // –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP: –ø—Ä—è–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        fileLogger.log("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: " + orderId);
        consoleLogger.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: " + orderId);
        
        // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        std::cout << "üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ " << orderId << "\n";
        
        // –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP: –ø—Ä—è–º–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        emailNotification.send("–ó–∞–∫–∞–∑ " + orderId + " –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        smsNotification.send("–ó–∞–∫–∞–∑ " + orderId + " –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ");
        
        fileLogger.log("–ó–∞–∫–∞–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + orderId);
    }
    
    void processPayment(const std::string& paymentId) {
        fileLogger.log("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: " + paymentId);
        consoleLogger.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞: " + paymentId);
        
        // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ " << paymentId << "\n";
        
        emailNotification.send("–ü–ª–∞—Ç–µ–∂ " + paymentId + " —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        smsNotification.send("–ü–ª–∞—Ç–µ–∂ " + paymentId + " –∑–∞–≤–µ—Ä—à–µ–Ω");
        
        fileLogger.log("–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + paymentId);
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
class ILogger {
public:
    virtual ~ILogger() = default;
    virtual void log(const std::string& message) = 0;
    virtual void logError(const std::string& error) = 0;
    virtual void logWarning(const std::string& warning) = 0;
    virtual void logInfo(const std::string& info) = 0;
    virtual std::string getLoggerType() const = 0;
};

class INotificationService {
public:
    virtual ~INotificationService() = default;
    virtual bool send(const std::string& message) = 0;
    virtual bool sendUrgent(const std::string& message) = 0;
    virtual std::string getServiceType() const = 0;
    virtual bool isAvailable() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
class FileLogger : public ILogger {
private:
    std::string logFilePath;
    
public:
    FileLogger(const std::string& path = "application.log") : logFilePath(path) {}
    
    void log(const std::string& message) override {
        writeToFile("INFO", message);
        std::cout << "üìù [FILE] " << message << "\n";
    }
    
    void logError(const std::string& error) override {
        writeToFile("ERROR", error);
        std::cout << "‚ùå [FILE ERROR] " << error << "\n";
    }
    
    void logWarning(const std::string& warning) override {
        writeToFile("WARNING", warning);
        std::cout << "‚ö†Ô∏è [FILE WARNING] " << warning << "\n";
    }
    
    void logInfo(const std::string& info) override {
        writeToFile("INFO", info);
        std::cout << "‚ÑπÔ∏è [FILE INFO] " << info << "\n";
    }
    
    std::string getLoggerType() const override {
        return "File Logger";
    }
    
private:
    void writeToFile(const std::string& level, const std::string& message) {
        std::ofstream logFile(logFilePath, std::ios::app);
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        logFile << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                << "] [" << level << "] " << message << "\n";
        logFile.close();
    }
};

class ConsoleLogger : public ILogger {
public:
    void log(const std::string& message) override {
        logWithTimestamp("INFO", message);
    }
    
    void logError(const std::string& error) override {
        logWithTimestamp("ERROR", error);
        std::cout << "‚ùå [CONSOLE ERROR] " << error << "\n";
    }
    
    void logWarning(const std::string& warning) override {
        logWithTimestamp("WARNING", warning);
        std::cout << "‚ö†Ô∏è [CONSOLE WARNING] " << warning << "\n";
    }
    
    void logInfo(const std::string& info) override {
        logWithTimestamp("INFO", info);
        std::cout << "‚ÑπÔ∏è [CONSOLE INFO] " << info << "\n";
    }
    
    std::string getLoggerType() const override {
        return "Console Logger";
    }
    
private:
    void logWithTimestamp(const std::string& level, const std::string& message) {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] [" << level << "] " << message << "\n";
    }
};

class DatabaseLogger : public ILogger {
private:
    std::string connectionString;
    bool connected = false;
    
public:
    DatabaseLogger(const std::string& connStr = "database://localhost:5432/logs") 
        : connectionString(connStr) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connected = true;
    }
    
    void log(const std::string& message) override {
        if (connected) {
            writeToDatabase("INFO", message);
            std::cout << "üóÑÔ∏è [DATABASE] " << message << "\n";
        }
    }
    
    void logError(const std::string& error) override {
        if (connected) {
            writeToDatabase("ERROR", error);
            std::cout << "‚ùå [DATABASE ERROR] " << error << "\n";
        }
    }
    
    void logWarning(const std::string& warning) override {
        if (connected) {
            writeToDatabase("WARNING", warning);
            std::cout << "‚ö†Ô∏è [DATABASE WARNING] " << warning << "\n";
        }
    }
    
    void logInfo(const std::string& info) override {
        if (connected) {
            writeToDatabase("INFO", info);
            std::cout << "‚ÑπÔ∏è [DATABASE INFO] " << info << "\n";
        }
    }
    
    std::string getLoggerType() const override {
        return "Database Logger";
    }
    
private:
    void writeToDatabase(const std::string& level, const std::string& message) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        // INSERT INTO logs (timestamp, level, message) VALUES (?, ?, ?)
    }
};

class EmailNotificationService : public INotificationService {
private:
    std::string smtpServer;
    std::string fromEmail;
    bool available = true;
    
public:
    EmailNotificationService(const std::string& server = "smtp.gmail.com", 
                           const std::string& from = "noreply@company.com")
        : smtpServer(server), fromEmail(from) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üìß [EMAIL] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ " << smtpServer << ": " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
        return true;
    }
    
    bool sendUrgent(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üö® [URGENT EMAIL] –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ email
        return true;
    }
    
    std::string getServiceType() const override {
        return "Email Notification Service";
    }
    
    bool isAvailable() const override {
        return available;
    }
    
    void setAvailable(bool avail) {
        available = avail;
    }
};

class SMSNotificationService : public INotificationService {
private:
    std::string provider;
    std::string apiKey;
    bool available = true;
    
public:
    SMSNotificationService(const std::string& smsProvider = "Twilio", 
                          const std::string& key = "api_key_123")
        : provider(smsProvider), apiKey(key) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üì± [SMS] –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ " << provider << ": " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
        return true;
    }
    
    bool sendUrgent(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üö® [URGENT SMS] –°—Ä–æ—á–Ω–æ–µ SMS: " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ SMS
        return true;
    }
    
    std::string getServiceType() const override {
        return "SMS Notification Service";
    }
    
    bool isAvailable() const override {
        return available;
    }
    
    void setAvailable(bool avail) {
        available = avail;
    }
};

class PushNotificationService : public INotificationService {
private:
    std::string platform;
    std::string apiEndpoint;
    bool available = true;
    
public:
    PushNotificationService(const std::string& pushPlatform = "Firebase", 
                           const std::string& endpoint = "https://fcm.googleapis.com/fcm/send")
        : platform(pushPlatform), apiEndpoint(endpoint) {}
    
    bool send(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üîî [PUSH] –û—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ " << platform << ": " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return true;
    }
    
    bool sendUrgent(const std::string& message) override {
        if (!isAvailable()) {
            return false;
        }
        
        std::cout << "üö® [URGENT PUSH] –°—Ä–æ—á–Ω–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: " << message << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        return true;
    }
    
    std::string getServiceType() const override {
        return "Push Notification Service";
    }
    
    bool isAvailable() const override {
        return available;
    }
    
    void setAvailable(bool avail) {
        available = avail;
    }
};

// –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
class BusinessLogic {
private:
    std::unique_ptr<ILogger> logger;
    std::vector<std::unique_ptr<INotificationService>> notificationServices;
    
public:
    // Dependency Injection —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    BusinessLogic(std::unique_ptr<ILogger> loggerPtr, 
                  std::vector<std::unique_ptr<INotificationService>> notificationPtrs)
        : logger(std::move(loggerPtr)), notificationServices(std::move(notificationPtrs)) {}
    
    void processOrder(const std::string& orderId) {
        logger->logInfo("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: " + orderId);
        
        try {
            // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
            std::cout << "üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ " << orderId << "\n";
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            std::this_thread::sleep_for(std::chrono::milliseconds(100));
            
            logger->logInfo("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + orderId);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            sendNotifications("–ó–∞–∫–∞–∑ " + orderId + " –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ");
            
        } catch (const std::exception& e) {
            logger->logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ " + orderId + ": " + e.what());
            sendUrgentNotifications("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ " + orderId + " –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
        }
    }
    
    void processPayment(const std::string& paymentId) {
        logger->logInfo("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: " + paymentId);
        
        try {
            // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
            std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ " << paymentId << "\n";
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            std::this_thread::sleep_for(std::chrono::milliseconds(150));
            
            logger->logInfo("–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + paymentId);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sendNotifications("–ü–ª–∞—Ç–µ–∂ " + paymentId + " —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            
        } catch (const std::exception& e) {
            logger->logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ " + paymentId + ": " + e.what());
            sendUrgentNotifications("–û–®–ò–ë–ö–ê –ü–õ–ê–¢–ï–ñ–ê: " + paymentId + " - —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ");
        }
    }
    
    void processRefund(const std::string& refundId) {
        logger->logWarning("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + refundId);
        
        try {
            // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
            std::cout << "üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ " << refundId << "\n";
            
            // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            std::this_thread::sleep_for(std::chrono::milliseconds(200));
            
            logger->logInfo("–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: " + refundId);
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            sendNotifications("–í–æ–∑–≤—Ä–∞—Ç " + refundId + " –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã");
            
        } catch (const std::exception& e) {
            logger->logError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ " + refundId + ": " + e.what());
            sendUrgentNotifications("–û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê: " + refundId + " - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞");
        }
    }
    
private:
    void sendNotifications(const std::string& message) {
        for (const auto& service : notificationServices) {
            if (service->isAvailable()) {
                bool success = service->send(message);
                if (success) {
                    logger->logInfo("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ " + service->getServiceType());
                } else {
                    logger->logWarning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + service->getServiceType());
                }
            }
        }
    }
    
    void sendUrgentNotifications(const std::string& message) {
        for (const auto& service : notificationServices) {
            if (service->isAvailable()) {
                bool success = service->sendUrgent(message);
                if (success) {
                    logger->logInfo("–°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ " + service->getServiceType());
                } else {
                    logger->logError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + service->getServiceType());
                }
            }
        }
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –°–ò–°–¢–ï–ú–ê –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

/**
 * @brief –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DIP –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class ICache {
public:
    virtual ~ICache() = default;
    virtual bool set(const std::string& key, const std::string& value, int ttl = 3600) = 0;
    virtual std::string get(const std::string& key) = 0;
    virtual bool deleteKey(const std::string& key) = 0;
    virtual bool exists(const std::string& key) = 0;
    virtual void clear() = 0;
    virtual std::string getCacheType() const = 0;
};

class MemoryCache : public ICache {
private:
    std::map<std::string, std::string> cache;
    std::map<std::string, std::chrono::system_clock::time_point> expiration;
    
public:
    bool set(const std::string& key, const std::string& value, int ttl = 3600) override {
        cache[key] = value;
        expiration[key] = std::chrono::system_clock::now() + std::chrono::seconds(ttl);
        std::cout << "üß† [MEMORY CACHE] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: " << key << "\n";
        return true;
    }
    
    std::string get(const std::string& key) override {
        if (exists(key)) {
            std::cout << "üß† [MEMORY CACHE] –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: " << key << "\n";
            return cache[key];
        }
        return "";
    }
    
    bool deleteKey(const std::string& key) override {
        if (cache.find(key) != cache.end()) {
            cache.erase(key);
            expiration.erase(key);
            std::cout << "üß† [MEMORY CACHE] –£–¥–∞–ª–µ–Ω –∫–ª—é—á: " << key << "\n";
            return true;
        }
        return false;
    }
    
    bool exists(const std::string& key) override {
        auto it = cache.find(key);
        if (it == cache.end()) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if (std::chrono::system_clock::now() > expiration[key]) {
            cache.erase(it);
            expiration.erase(key);
            return false;
        }
        
        return true;
    }
    
    void clear() override {
        cache.clear();
        expiration.clear();
        std::cout << "üß† [MEMORY CACHE] –ö—ç—à –æ—á–∏—â–µ–Ω\n";
    }
    
    std::string getCacheType() const override {
        return "Memory Cache";
    }
};

class RedisCache : public ICache {
private:
    std::string host;
    int port;
    bool connected = true;
    
public:
    RedisCache(const std::string& redisHost = "localhost", int redisPort = 6379)
        : host(redisHost), port(redisPort) {}
    
    bool set(const std::string& key, const std::string& value, int ttl = 3600) override {
        if (!connected) return false;
        
        std::cout << "üî¥ [REDIS CACHE] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–ª—é—á: " << key << " (TTL: " << ttl << "s)\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis
        return true;
    }
    
    std::string get(const std::string& key) override {
        if (!connected) return "";
        
        std::cout << "üî¥ [REDIS CACHE] –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: " << key << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis
        return "cached_value_from_redis";
    }
    
    bool deleteKey(const std::string& key) override {
        if (!connected) return false;
        
        std::cout << "üî¥ [REDIS CACHE] –£–¥–∞–ª–µ–Ω –∫–ª—é—á: " << key << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis
        return true;
    }
    
    bool exists(const std::string& key) override {
        if (!connected) return false;
        
        std::cout << "üî¥ [REDIS CACHE] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: " << key << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis
        return true;
    }
    
    void clear() override {
        if (connected) {
            std::cout << "üî¥ [REDIS CACHE] –ö—ç—à –æ—á–∏—â–µ–Ω\n";
            // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Redis
        }
    }
    
    std::string getCacheType() const override {
        return "Redis Cache";
    }
    
    void setConnected(bool conn) {
        connected = conn;
    }
};

class DataService {
private:
    std::unique_ptr<ICache> cache;
    
public:
    DataService(std::unique_ptr<ICache> cachePtr) : cache(std::move(cachePtr)) {}
    
    std::string getUserData(const std::string& userId) {
        std::string cacheKey = "user_" + userId;
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞
        if (cache->exists(cacheKey)) {
            std::cout << "üìä [DATA SERVICE] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞\n";
            return cache->get(cacheKey);
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        std::cout << "üìä [DATA SERVICE] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î\n";
        std::string userData = "User data for " + userId;
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        cache->set(cacheKey, userData, 1800); // TTL 30 –º–∏–Ω—É—Ç
        
        return userData;
    }
    
    void updateUserData(const std::string& userId, const std::string& newData) {
        std::string cacheKey = "user_" + userId;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        std::cout << "üìä [DATA SERVICE] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î\n";
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        cache->set(cacheKey, newData, 1800);
        
        std::cout << "üìä [DATA SERVICE] –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " << userId << "\n";
    }
    
    void deleteUser(const std::string& userId) {
        std::string cacheKey = "user_" + userId;
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Å–∏–º—É–ª—è—Ü–∏—è)
        std::cout << "üìä [DATA SERVICE] –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î\n";
        
        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        cache->deleteKey(cacheKey);
        
        std::cout << "üìä [DATA SERVICE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –∫—ç—à–∞\n";
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateBadDIP() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï DIP - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π:\n";
    std::cout << std::string(60, '-') << "\n";
    
    BadBusinessLogic badLogic;
    badLogic.processOrder("ORDER-001");
    badLogic.processPayment("PAYMENT-001");
}

void demonstrateGoodDIP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï DIP - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π:\n";
    std::cout << std::string(60, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    auto fileLogger = std::make_unique<FileLogger>("business.log");
    auto consoleLogger = std::make_unique<ConsoleLogger>();
    auto databaseLogger = std::make_unique<DatabaseLogger>();
    
    auto emailService = std::make_unique<EmailNotificationService>();
    auto smsService = std::make_unique<SMSNotificationService>();
    auto pushService = std::make_unique<PushNotificationService>();
    
    // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    std::vector<std::unique_ptr<INotificationService>> notificationServices;
    notificationServices.push_back(std::move(emailService));
    notificationServices.push_back(std::move(smsService));
    notificationServices.push_back(std::move(pushService));
    
    // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
    BusinessLogic businessLogic(std::move(fileLogger), std::move(notificationServices));
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    businessLogic.processOrder("ORDER-002");
    businessLogic.processPayment("PAYMENT-002");
    businessLogic.processRefund("REFUND-001");
    
    std::cout << "\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥—Ä—É–≥–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π –ª–æ–≥–≥–µ—Ä–∞:\n";
    std::vector<std::unique_ptr<INotificationService>> notificationServices2;
    notificationServices2.push_back(std::make_unique<EmailNotificationService>());
    
    BusinessLogic businessLogic2(std::make_unique<ConsoleLogger>(), std::move(notificationServices2));
    businessLogic2.processOrder("ORDER-003");
}

void demonstrateCacheDIP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï DIP - –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∫—ç—à–∞
    auto memoryCache = std::make_unique<MemoryCache>();
    DataService dataService1(std::move(memoryCache));
    
    std::cout << "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Memory Cache:\n";
    dataService1.getUserData("user123");
    dataService1.getUserData("user123"); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
    dataService1.updateUserData("user123", "Updated user data");
    dataService1.deleteUser("user123");
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å Redis Cache:\n";
    auto redisCache = std::make_unique<RedisCache>("redis.example.com", 6379);
    DataService dataService2(std::move(redisCache));
    
    dataService2.getUserData("user456");
    dataService2.getUserData("user456"); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
    dataService2.updateUserData("user456", "Updated user data");
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º Redis:\n";
    auto unavailableRedis = std::make_unique<RedisCache>("unavailable.redis.com", 6379);
    unavailableRedis->setConnected(false);
    DataService dataService3(std::move(unavailableRedis));
    
    dataService3.getUserData("user789"); // –î–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫—ç—à–∞
}

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í DIP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –ú–æ–¥—É–ª–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –º–æ–¥—É–ª–µ–π –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è\n";
    std::cout << "‚Ä¢ –û–±–∞ —Ç–∏–ø–∞ –º–æ–¥—É–ª–µ–π –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å (–ª–µ–≥–∫–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–∫–∏)\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ª–µ–≥–∫–æ–π –∑–∞–º–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n";
    std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ coupling –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏\n";
    std::cout << "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (IoC)\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–±–æ–ª—å—à–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π)\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ dependency injection\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π overhead –æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ–µ over-engineering –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏—è IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DIP –¥–ª—è —á–∞—Å—Ç–æ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ dependency injection —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä\n";
    std::cout << "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ IoC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ factory pattern –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DEPENDENCY INVERSION PRINCIPLE (DIP)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π\n\n";
    
    demonstrateBadDIP();
    demonstrateGoodDIP();
    demonstrateCacheDIP();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "DIP: ‚àÄM‚ÇÅ ‚àà HighLevel, ‚àÄM‚ÇÇ ‚àà LowLevel:\n";
    std::cout << "Dependency(M‚ÇÅ, M‚ÇÇ) ‚üπ ‚àÉA ‚àà Abstractions: \n";
    std::cout << "Dependency(M‚ÇÅ, A) ‚àß Dependency(M‚ÇÇ, A)\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ú–æ–¥—É–ª–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–æ–¥—É–ª–µ–π –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è\n";
    std::cout << "2. –û–±–∞ —Ç–∏–ø–∞ –º–æ–¥—É–ª–µ–π –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π\n";
    std::cout << "3. DIP –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≥–∏–±–∫–æ—Å—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å\n";
    std::cout << "4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ –≥–∏–±–∫–æ—Å—Ç—å—é\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
