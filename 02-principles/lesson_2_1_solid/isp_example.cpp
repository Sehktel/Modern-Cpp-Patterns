/**
 * @file isp_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Interface Segregation Principle (ISP)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ISP —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
 * –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */

#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <map>
#include <set>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è ISP
 * 
 * ISP –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄI ‚àà Interfaces, ‚àÄC ‚àà Clients: 
 * |UsedMethods(I,C)| / |AllMethods(I)| ‚Üí 1
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤,
 * –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –°–ò–°–¢–ï–ú–ê –£–°–¢–†–û–ô–°–¢–í (–ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô –ü–†–ò–ú–ï–†)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * 
 * –≠—Ç–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞—Ä—É—à–∞–µ—Ç ISP, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ
 * –Ω–µ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.
 */
class BadIDevice {
public:
    virtual ~BadIDevice() = default;
    virtual void read() = 0;
    virtual void write() = 0;
    virtual void scan() = 0;
    virtual void print() = 0;
    virtual void fax() = 0;
    virtual void copy() = 0;
    virtual void networkConnect() = 0;
    virtual void bluetoothConnect() = 0;
    virtual void wifiConnect() = 0;
    virtual void usbConnect() = 0;
};

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP: –ü—Ä–∏–Ω—Ç–µ—Ä –≤—ã–Ω—É–∂–¥–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */
class BadPrinter : public BadIDevice {
public:
    void read() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª—ã!");
    }
    
    void write() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã!");
    }
    
    void scan() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å!");
    }
    
    void print() override {
        std::cout << "üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void fax() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Å—ã!");
    }
    
    void copy() override {
        std::cout << "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void networkConnect() override {
        std::cout << "üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏\n";
    }
    
    void bluetoothConnect() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Bluetooth!");
    }
    
    void wifiConnect() override {
        std::cout << "üì∂ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Wi-Fi\n";
    }
    
    void usbConnect() override {
        std::cout << "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USB\n";
    }
};

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP: –°–∫–∞–Ω–µ—Ä –≤—ã–Ω—É–∂–¥–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 */
class BadScanner : public BadIDevice {
public:
    void read() override {
        std::cout << "üìñ –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void write() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã!");
    }
    
    void scan() override {
        std::cout << "üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void print() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å!");
    }
    
    void fax() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Å—ã!");
    }
    
    void copy() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!");
    }
    
    void networkConnect() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–µ—Ç—å!");
    }
    
    void bluetoothConnect() override {
        std::cout << "üîµ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Bluetooth\n";
    }
    
    void wifiConnect() override {
        throw std::runtime_error("–°–∫–∞–Ω–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Wi-Fi!");
    }
    
    void usbConnect() override {
        std::cout << "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USB\n";
    }
};

/**
 * @brief –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–µ ISP
 */
void demonstrateBadISP() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï ISP - –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::unique_ptr<BadIDevice> printer = std::make_unique<BadPrinter>();
    std::unique_ptr<BadIDevice> scanner = std::make_unique<BadScanner>();
    
    std::cout << "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:\n";
    try {
        printer->print();
        printer->copy();
        printer->networkConnect();
        printer->read(); // –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!
    } catch (const std::exception& e) {
        std::cout << "–û—à–∏–±–∫–∞: " << e.what() << "\n";
    }
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞:\n";
    try {
        scanner->read();
        scanner->scan();
        scanner->bluetoothConnect();
        scanner->print(); // –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!
    } catch (const std::exception& e) {
        std::cout << "–û—à–∏–±–∫–∞: " << e.what() << "\n";
    }
    
    std::cout << "\nüö® –ü–†–û–ë–õ–ï–ú–ê: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—ã–Ω—É–∂–¥–µ–Ω—ã —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã!\n";
}

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø ISP
// ============================================================================

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ ISP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
class IReadable {
public:
    virtual ~IReadable() = default;
    virtual void read() = 0;
};

class IWritable {
public:
    virtual ~IWritable() = default;
    virtual void write() = 0;
};

class IScannable {
public:
    virtual ~IScannable() = default;
    virtual void scan() = 0;
};

class IPrintable {
public:
    virtual ~IPrintable() = default;
    virtual void print() = 0;
};

class IFaxable {
public:
    virtual ~IFaxable() = default;
    virtual void fax() = 0;
};

class ICopyable {
public:
    virtual ~ICopyable() = default;
    virtual void copy() = 0;
};

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
class INetworkConnectable {
public:
    virtual ~INetworkConnectable() = default;
    virtual void networkConnect() = 0;
    virtual void networkDisconnect() = 0;
    virtual bool isNetworkConnected() const = 0;
};

class IBluetoothConnectable {
public:
    virtual ~IBluetoothConnectable() = default;
    virtual void bluetoothConnect() = 0;
    virtual void bluetoothDisconnect() = 0;
    virtual bool isBluetoothConnected() const = 0;
};

class IWiFiConnectable {
public:
    virtual ~IWiFiConnectable() = default;
    virtual void wifiConnect() = 0;
    virtual void wifiDisconnect() = 0;
    virtual bool isWiFiConnected() const = 0;
};

class IUSBConnectable {
public:
    virtual ~IUSBConnectable() = default;
    virtual void usbConnect() = 0;
    virtual void usbDisconnect() = 0;
    virtual bool isUSBConnected() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
class Printer : public IPrintable, public ICopyable, public INetworkConnectable, public IUSBConnectable {
private:
    bool networkConnected = false;
    bool usbConnected = false;
    
public:
    void print() override {
        std::cout << "üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void copy() override {
        std::cout << "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void networkConnect() override {
        networkConnected = true;
        std::cout << "üåê –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏\n";
    }
    
    void networkDisconnect() override {
        networkConnected = false;
        std::cout << "üåê –ü—Ä–∏–Ω—Ç–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏\n";
    }
    
    bool isNetworkConnected() const override {
        return networkConnected;
    }
    
    void usbConnect() override {
        usbConnected = true;
        std::cout << "üîå –ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ USB\n";
    }
    
    void usbDisconnect() override {
        usbConnected = false;
        std::cout << "üîå –ü—Ä–∏–Ω—Ç–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç USB\n";
    }
    
    bool isUSBConnected() const override {
        return usbConnected;
    }
};

class Scanner : public IReadable, public IScannable, public IBluetoothConnectable, public IUSBConnectable {
private:
    bool bluetoothConnected = false;
    bool usbConnected = false;
    
public:
    void read() override {
        std::cout << "üìñ –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void scan() override {
        std::cout << "üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void bluetoothConnect() override {
        bluetoothConnected = true;
        std::cout << "üîµ –°–∫–∞–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Bluetooth\n";
    }
    
    void bluetoothDisconnect() override {
        bluetoothConnected = false;
        std::cout << "üîµ –°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bluetooth\n";
    }
    
    bool isBluetoothConnected() const override {
        return bluetoothConnected;
    }
    
    void usbConnect() override {
        usbConnected = true;
        std::cout << "üîå –°–∫–∞–Ω–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ USB\n";
    }
    
    void usbDisconnect() override {
        usbConnected = false;
        std::cout << "üîå –°–∫–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç USB\n";
    }
    
    bool isUSBConnected() const override {
        return usbConnected;
    }
};

class MultiFunctionDevice : public IPrintable, public IScannable, public IFaxable, 
                           public ICopyable, public INetworkConnectable, public IWiFiConnectable {
private:
    bool networkConnected = false;
    bool wifiConnected = false;
    
public:
    void print() override {
        std::cout << "üñ®Ô∏è –ú–§–£: –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void scan() override {
        std::cout << "üìÑ –ú–§–£: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void fax() override {
        std::cout << "üì† –ú–§–£: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Å–∞\n";
    }
    
    void copy() override {
        std::cout << "üìã –ú–§–£: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void networkConnect() override {
        networkConnected = true;
        std::cout << "üåê –ú–§–£: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ç–∏\n";
    }
    
    void networkDisconnect() override {
        networkConnected = false;
        std::cout << "üåê –ú–§–£: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ç–∏\n";
    }
    
    bool isNetworkConnected() const override {
        return networkConnected;
    }
    
    void wifiConnect() override {
        wifiConnected = true;
        std::cout << "üì∂ –ú–§–£: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Wi-Fi\n";
    }
    
    void wifiDisconnect() override {
        wifiConnected = false;
        std::cout << "üì∂ –ú–§–£: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Wi-Fi\n";
    }
    
    bool isWiFiConnected() const override {
        return wifiConnected;
    }
};

class SmartPhone : public IReadable, public IWritable, public IPrintable, 
                   public IBluetoothConnectable, public IWiFiConnectable, public IUSBConnectable {
private:
    bool bluetoothConnected = false;
    bool wifiConnected = false;
    bool usbConnected = false;
    
public:
    void read() override {
        std::cout << "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞\n";
    }
    
    void write() override {
        std::cout << "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞\n";
    }
    
    void print() override {
        std::cout << "üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ü–µ—á–∞—Ç—å —á–µ—Ä–µ–∑ AirPrint\n";
    }
    
    void bluetoothConnect() override {
        bluetoothConnected = true;
        std::cout << "üîµ –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ü–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Bluetooth\n";
    }
    
    void bluetoothDisconnect() override {
        bluetoothConnected = false;
        std::cout << "üîµ –°–º–∞—Ä—Ç—Ñ–æ–Ω: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Bluetooth\n";
    }
    
    bool isBluetoothConnected() const override {
        return bluetoothConnected;
    }
    
    void wifiConnect() override {
        wifiConnected = true;
        std::cout << "üì∂ –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Wi-Fi\n";
    }
    
    void wifiDisconnect() override {
        wifiConnected = false;
        std::cout << "üì∂ –°–º–∞—Ä—Ç—Ñ–æ–Ω: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Wi-Fi\n";
    }
    
    bool isWiFiConnected() const override {
        return wifiConnected;
    }
    
    void usbConnect() override {
        usbConnected = true;
        std::cout << "üîå –°–º–∞—Ä—Ç—Ñ–æ–Ω: –ü–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ USB\n";
    }
    
    void usbDisconnect() override {
        usbConnected = false;
        std::cout << "üîå –°–º–∞—Ä—Ç—Ñ–æ–Ω: –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç USB\n";
    }
    
    bool isUSBConnected() const override {
        return usbConnected;
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
class BadIUser {
public:
    virtual ~BadIUser() = default;
    virtual void login() = 0;
    virtual void logout() = 0;
    virtual void createPost() = 0;
    virtual void deletePost() = 0;
    virtual void likePost() = 0;
    virtual void commentPost() = 0;
    virtual void followUser() = 0;
    virtual void unfollowUser() = 0;
    virtual void sendMessage() = 0;
    virtual void receiveMessage() = 0;
    virtual void uploadFile() = 0;
    virtual void downloadFile() = 0;
    virtual void createGroup() = 0;
    virtual void joinGroup() = 0;
    virtual void leaveGroup() = 0;
    virtual void moderateContent() = 0;
    virtual void banUser() = 0;
    virtual void unbanUser() = 0;
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ ISP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */

// –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
class IAuthenticatable {
public:
    virtual ~IAuthenticatable() = default;
    virtual void login() = 0;
    virtual void logout() = 0;
    virtual bool isLoggedIn() const = 0;
};

class IPostManager {
public:
    virtual ~IPostManager() = default;
    virtual void createPost() = 0;
    virtual void deletePost() = 0;
    virtual void editPost() = 0;
};

class ISocialInteraction {
public:
    virtual ~ISocialInteraction() = default;
    virtual void likePost() = 0;
    virtual void commentPost() = 0;
    virtual void followUser() = 0;
    virtual void unfollowUser() = 0;
};

class IMessageManager {
public:
    virtual ~IMessageManager() = default;
    virtual void sendMessage() = 0;
    virtual void receiveMessage() = 0;
    virtual void deleteMessage() = 0;
};

class IFileManager {
public:
    virtual ~IFileManager() = default;
    virtual void uploadFile() = 0;
    virtual void downloadFile() = 0;
    virtual void deleteFile() = 0;
};

class IGroupManager {
public:
    virtual ~IGroupManager() = default;
    virtual void createGroup() = 0;
    virtual void joinGroup() = 0;
    virtual void leaveGroup() = 0;
    virtual void inviteToGroup() = 0;
};

class IModerator {
public:
    virtual ~IModerator() = default;
    virtual void moderateContent() = 0;
    virtual void banUser() = 0;
    virtual void unbanUser() = 0;
    virtual void deleteInappropriateContent() = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class RegularUser : public IAuthenticatable, public IPostManager, public ISocialInteraction, public IMessageManager {
private:
    bool loggedIn = false;
    
public:
    void login() override {
        loggedIn = true;
        std::cout << "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n";
    }
    
    void logout() override {
        loggedIn = false;
        std::cout << "üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
    }
    
    bool isLoggedIn() const override {
        return loggedIn;
    }
    
    void createPost() override {
        std::cout << "üìù –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void deletePost() override {
        std::cout << "üóëÔ∏è –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–≤–æ–π –ø–æ—Å—Ç\n";
    }
    
    void editPost() override {
        std::cout << "‚úèÔ∏è –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void likePost() override {
        std::cout << "‚ù§Ô∏è –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫\n";
    }
    
    void commentPost() override {
        std::cout << "üí¨ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void followUser() override {
        std::cout << "‚ûï –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unfollowUser() override {
        std::cout << "‚ûñ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void sendMessage() override {
        std::cout << "üì§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void receiveMessage() override {
        std::cout << "üì• –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void deleteMessage() override {
        std::cout << "üóëÔ∏è –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
};

class ContentCreator : public IAuthenticatable, public IPostManager, public ISocialInteraction, 
                       public IMessageManager, public IFileManager {
private:
    bool loggedIn = false;
    
public:
    void login() override {
        loggedIn = true;
        std::cout << "üé® –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n";
    }
    
    void logout() override {
        loggedIn = false;
        std::cout << "üé® –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
    }
    
    bool isLoggedIn() const override {
        return loggedIn;
    }
    
    void createPost() override {
        std::cout << "üé® –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç\n";
    }
    
    void deletePost() override {
        std::cout << "üóëÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç\n";
    }
    
    void editPost() override {
        std::cout << "‚úèÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void likePost() override {
        std::cout << "‚ù§Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫\n";
    }
    
    void commentPost() override {
        std::cout << "üí¨ –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void followUser() override {
        std::cout << "‚ûï –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unfollowUser() override {
        std::cout << "‚ûñ –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void sendMessage() override {
        std::cout << "üì§ –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void receiveMessage() override {
        std::cout << "üì• –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void deleteMessage() override {
        std::cout << "üóëÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void uploadFile() override {
        std::cout << "üì§ –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ)\n";
    }
    
    void downloadFile() override {
        std::cout << "üì• –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª\n";
    }
    
    void deleteFile() override {
        std::cout << "üóëÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª\n";
    }
};

class Moderator : public IAuthenticatable, public IPostManager, public ISocialInteraction, 
                  public IMessageManager, public IModerator {
private:
    bool loggedIn = false;
    
public:
    void login() override {
        loggedIn = true;
        std::cout << "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n";
    }
    
    void logout() override {
        loggedIn = false;
        std::cout << "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
    }
    
    bool isLoggedIn() const override {
        return loggedIn;
    }
    
    void createPost() override {
        std::cout << "üìù –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç\n";
    }
    
    void deletePost() override {
        std::cout << "üóëÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç\n";
    }
    
    void editPost() override {
        std::cout << "‚úèÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void likePost() override {
        std::cout << "‚ù§Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫\n";
    }
    
    void commentPost() override {
        std::cout << "üí¨ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void followUser() override {
        std::cout << "‚ûï –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unfollowUser() override {
        std::cout << "‚ûñ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void sendMessage() override {
        std::cout << "üì§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void receiveMessage() override {
        std::cout << "üì• –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void deleteMessage() override {
        std::cout << "üóëÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void moderateContent() override {
        std::cout << "üîç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n";
    }
    
    void banUser() override {
        std::cout << "üö´ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unbanUser() override {
        std::cout << "‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void deleteInappropriateContent() override {
        std::cout << "üóëÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n";
    }
};

class Administrator : public IAuthenticatable, public IPostManager, public ISocialInteraction, 
                      public IMessageManager, public IFileManager, public IGroupManager, public IModerator {
private:
    bool loggedIn = false;
    
public:
    void login() override {
        loggedIn = true;
        std::cout << "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É\n";
    }
    
    void logout() override {
        loggedIn = false;
        std::cout << "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n";
    }
    
    bool isLoggedIn() const override {
        return loggedIn;
    }
    
    void createPost() override {
        std::cout << "üìù –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ—Å—Ç\n";
    }
    
    void deletePost() override {
        std::cout << "üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ—Å—Ç\n";
    }
    
    void editPost() override {
        std::cout << "‚úèÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void likePost() override {
        std::cout << "‚ù§Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫\n";
    }
    
    void commentPost() override {
        std::cout << "üí¨ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç\n";
    }
    
    void followUser() override {
        std::cout << "‚ûï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unfollowUser() override {
        std::cout << "‚ûñ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void sendMessage() override {
        std::cout << "üì§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void receiveMessage() override {
        std::cout << "üì• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void deleteMessage() override {
        std::cout << "üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ\n";
    }
    
    void uploadFile() override {
        std::cout << "üì§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª\n";
    }
    
    void downloadFile() override {
        std::cout << "üì• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª\n";
    }
    
    void deleteFile() override {
        std::cout << "üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª\n";
    }
    
    void createGroup() override {
        std::cout << "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–ª –≥—Ä—É–ø–ø—É\n";
    }
    
    void joinGroup() override {
        std::cout << "‚ûï –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥—Ä—É–ø–ø–µ\n";
    }
    
    void leaveGroup() override {
        std::cout << "‚ûñ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É\n";
    }
    
    void inviteToGroup() override {
        std::cout << "üì® –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≤ –≥—Ä—É–ø–ø—É\n";
    }
    
    void moderateContent() override {
        std::cout << "üîç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–¥–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç\n";
    }
    
    void banUser() override {
        std::cout << "üö´ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void unbanUser() override {
        std::cout << "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n";
    }
    
    void deleteInappropriateContent() override {
        std::cout << "üóëÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n";
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateGoodISP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï ISP - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    std::unique_ptr<Printer> printer = std::make_unique<Printer>();
    std::unique_ptr<Scanner> scanner = std::make_unique<Scanner>();
    std::unique_ptr<MultiFunctionDevice> mfd = std::make_unique<MultiFunctionDevice>();
    std::unique_ptr<SmartPhone> phone = std::make_unique<SmartPhone>();
    
    std::cout << "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:\n";
    printer->print();
    printer->copy();
    printer->networkConnect();
    printer->usbConnect();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–µ—Ä–∞:\n";
    scanner->read();
    scanner->scan();
    scanner->bluetoothConnect();
    scanner->usbConnect();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–§–£:\n";
    mfd->print();
    mfd->scan();
    mfd->fax();
    mfd->copy();
    mfd->networkConnect();
    mfd->wifiConnect();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞:\n";
    phone->read();
    phone->write();
    phone->print();
    phone->bluetoothConnect();
    phone->wifiConnect();
    phone->usbConnect();
}

void demonstrateUserISP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï ISP - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    std::unique_ptr<RegularUser> regularUser = std::make_unique<RegularUser>();
    std::unique_ptr<ContentCreator> creator = std::make_unique<ContentCreator>();
    std::unique_ptr<Moderator> moderator = std::make_unique<Moderator>();
    std::unique_ptr<Administrator> admin = std::make_unique<Administrator>();
    
    std::cout << "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n";
    regularUser->login();
    regularUser->createPost();
    regularUser->likePost();
    regularUser->followUser();
    regularUser->sendMessage();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–∫—Ä–µ–∞—Ç–æ—Ä–∞:\n";
    creator->login();
    creator->createPost();
    creator->uploadFile();
    creator->followUser();
    creator->sendMessage();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n";
    moderator->login();
    moderator->createPost();
    moderator->moderateContent();
    moderator->banUser();
    moderator->sendMessage();
    
    std::cout << "\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n";
    admin->login();
    admin->createPost();
    admin->uploadFile();
    admin->createGroup();
    admin->moderateContent();
    admin->banUser();
}

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í ISP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≤–∏—Å—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –Ω—É–∂–Ω—ã—Ö –∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n";
    std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ coupling –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n";
    std::cout << "‚Ä¢ –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ –£–ø—Ä–æ—â–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–∫–∏–Ω–≥–∞\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –º–µ–∂–¥—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ ISP –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å –æ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º\n";
    std::cout << "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Adapter Pattern –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø INTERFACE SEGREGATION PRINCIPLE (ISP)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤\n\n";
    
    demonstrateBadISP();
    demonstrateGoodISP();
    demonstrateUserISP();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "ISP: ‚àÄI ‚àà Interfaces, ‚àÄC ‚àà Clients: \n";
    std::cout << "|UsedMethods(I,C)| / |AllMethods(I)| ‚Üí 1\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç\n";
    std::cout << "2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ\n";
    std::cout << "3. ISP —É–ª—É—á—à–∞–µ—Ç –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å\n";
    std::cout << "4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
