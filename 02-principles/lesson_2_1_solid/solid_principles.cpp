/**
 * @file solid_principles.cpp
 * @brief –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SOLID –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º C++
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID —á–µ—Ä–µ–∑ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã.
 * –ö–∞–∂–¥—ã–π –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è —Ç–µ–æ—Ä–∏–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏.
 */

#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <chrono>
#include <fstream>
#include <sstream>

// ============================================================================
// SINGLE RESPONSIBILITY PRINCIPLE (SRP)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –ö–ª–∞—Å—Å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—è–º–∏
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: UserManager –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * 1. –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 2. –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 * 3. –û—Ç–ø—Ä–∞–≤–∫—É email
 * 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 5. –†–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 
 * –≠—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
 */
class BadUserManager {
private:
    std::string name;
    std::string email;
    std::string password;
    
public:
    void setUserData(const std::string& n, const std::string& e, const std::string& p) {
        name = n;
        email = e;
        password = p;
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –≤–∞–ª–∏–¥–∞—Ü–∏—è
    bool validateUser() {
        if (name.empty() || email.empty() || password.empty()) {
            return false;
        }
        if (email.find('@') == std::string::npos) {
            return false;
        }
        return true;
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –æ—Ç–ø—Ä–∞–≤–∫–∞ email
    void sendWelcomeEmail() {
        std::cout << "–û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << email << ": –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " << name << "!\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    void logUserCreation() {
        std::ofstream log("user_creation.log", std::ios::app);
        log << "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: " << name << " (" << email << ")\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: —Ä–∞–±–æ—Ç–∞ —Å –ë–î
    void saveToDatabase() {
        std::cout << "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: " << name << "\n";
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ SRP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π
 * 
 * –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
 * - User: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 * - UserValidator: –≤–∞–ª–∏–¥–∞—Ü–∏—è
 * - EmailService: –æ—Ç–ø—Ä–∞–≤–∫–∞ email
 * - Logger: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * - UserRepository: —Ä–∞–±–æ—Ç–∞ —Å –ë–î
 */

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User {
private:
    std::string name;
    std::string email;
    std::string password;
    
public:
    User(const std::string& n, const std::string& e, const std::string& p)
        : name(n), email(e), password(p) {}
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    const std::string& getName() const { return name; }
    const std::string& getEmail() const { return email; }
    const std::string& getPassword() const { return password; }
    
    // –°–µ—Ç—Ç–µ—Ä—ã
    void setName(const std::string& n) { name = n; }
    void setEmail(const std::string& e) { email = e; }
    void setPassword(const std::string& p) { password = p; }
};

// –ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserValidator {
public:
    static bool isValid(const User& user) {
        const std::string& name = user.getName();
        const std::string& email = user.getEmail();
        const std::string& password = user.getPassword();
        
        if (name.empty() || email.empty() || password.empty()) {
            return false;
        }
        
        if (email.find('@') == std::string::npos) {
            return false;
        }
        
        if (password.length() < 6) {
            return false;
        }
        
        return true;
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
class EmailService {
public:
    static void sendWelcomeEmail(const User& user) {
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << user.getEmail() 
                  << ": –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " << user.getName() << "!\n";
    }
    
    static void sendPasswordReset(const User& user) {
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ " << user.getEmail() << "\n";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
class Logger {
public:
    static void logUserCreation(const User& user) {
        std::ofstream log("user_creation.log", std::ios::app);
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        log << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
            << "] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: " << user.getName() 
            << " (" << user.getEmail() << ")\n";
    }
    
    static void logError(const std::string& error) {
        std::ofstream log("error.log", std::ios::app);
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        log << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
            << "] –û–®–ò–ë–ö–ê: " << error << "\n";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class UserRepository {
public:
    static void save(const User& user) {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î: " << user.getName() << "\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    }
    
    static User findById(int id) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return User("Test User", "test@example.com", "password");
    }
    
    static void deleteUser(int id) {
        std::cout << "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: " << id << "\n";
    }
};

// ============================================================================
// OPEN/CLOSED PRINCIPLE (OCP)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
 * —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å PaymentProcessor.
 */
class BadPaymentProcessor {
public:
    enum PaymentType {
        CREDIT_CARD,
        PAYPAL,
        BANK_TRANSFER
    };
    
    void processPayment(PaymentType type, double amount) {
        switch (type) {
            case CREDIT_CARD:
                std::cout << "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã: $" << amount << "\n";
                break;
            case PAYPAL:
                std::cout << "–û–±—Ä–∞–±–æ—Ç–∫–∞ PayPal: $" << amount << "\n";
                break;
            case BANK_TRANSFER:
                std::cout << "–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: $" << amount << "\n";
                break;
            // –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç switch!
        }
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ OCP: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * 
 * –ù–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞,
 * –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞.
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
class PaymentStrategy {
public:
    virtual ~PaymentStrategy() = default;
    virtual void processPayment(double amount) = 0;
    virtual std::string getPaymentType() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
class CreditCardPayment : public PaymentStrategy {
public:
    void processPayment(double amount) override {
        std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã: $" << amount << "\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    }
    
    std::string getPaymentType() const override {
        return "Credit Card";
    }
};

class PayPalPayment : public PaymentStrategy {
public:
    void processPayment(double amount) override {
        std::cout << "üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ PayPal: $" << amount << "\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PayPal
    }
    
    std::string getPaymentType() const override {
        return "PayPal";
    }
};

class BankTransferPayment : public PaymentStrategy {
public:
    void processPayment(double amount) override {
        std::cout << "üè¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: $" << amount << "\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
    }
    
    std::string getPaymentType() const override {
        return "Bank Transfer";
    }
};

// –ù–æ–≤—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
class CryptoPayment : public PaymentStrategy {
public:
    void processPayment(double amount) override {
        std::cout << "‚Çø –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: $" << amount << "\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    }
    
    std::string getPaymentType() const override {
        return "Cryptocurrency";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)
class PaymentProcessor {
private:
    std::unique_ptr<PaymentStrategy> strategy;
    
public:
    void setPaymentStrategy(std::unique_ptr<PaymentStrategy> paymentStrategy) {
        strategy = std::move(paymentStrategy);
    }
    
    void processPayment(double amount) {
        if (strategy) {
            std::cout << "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞: " << strategy->getPaymentType() << "\n";
            strategy->processPayment(amount);
        } else {
            std::cout << "‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n";
        }
    }
};

// ============================================================================
// LISKOV SUBSTITUTION PRINCIPLE (LSP)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä —Å Rectangle –∏ Square
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: Square –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Rectangle –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è
 * –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
 */
class Rectangle {
protected:
    int width;
    int height;
    
public:
    Rectangle(int w, int h) : width(w), height(h) {}
    
    virtual void setWidth(int w) { width = w; }
    virtual void setHeight(int h) { height = h; }
    virtual int getWidth() const { return width; }
    virtual int getHeight() const { return height; }
    virtual int getArea() const { return width * height; }
};

class BadSquare : public Rectangle {
public:
    BadSquare(int side) : Rectangle(side, side) {}
    
    void setWidth(int w) override {
        width = w;
        height = w; // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    }
    
    void setHeight(int h) override {
        width = h;  // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        height = h;
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ LSP: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–µ—Ä–∞—Ä—Ö–∏—è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∏–≥—É—Ä
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–≥—É—Ä
class Shape {
public:
    virtual ~Shape() = default;
    virtual double getArea() const = 0;
    virtual double getPerimeter() const = 0;
    virtual std::string getType() const = 0;
};

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
class GoodRectangle : public Shape {
private:
    double width;
    double height;
    
public:
    GoodRectangle(double w, double h) : width(w), height(h) {}
    
    double getArea() const override {
        return width * height;
    }
    
    double getPerimeter() const override {
        return 2 * (width + height);
    }
    
    std::string getType() const override {
        return "Rectangle";
    }
    
    void setWidth(double w) { width = w; }
    void setHeight(double h) { height = h; }
    double getWidth() const { return width; }
    double getHeight() const { return height; }
};

// –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∞–¥—Ä–∞—Ç–∞ (—á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞)
class GoodSquare : public Shape {
private:
    double side;
    
public:
    GoodSquare(double s) : side(s) {}
    
    double getArea() const override {
        return side * side;
    }
    
    double getPerimeter() const override {
        return 4 * side;
    }
    
    std::string getType() const override {
        return "Square";
    }
    
    void setSide(double s) { side = s; }
    double getSide() const { return side; }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ LSP
void demonstrateLSP(const Shape& shape) {
    std::cout << "üìê –§–∏–≥—É—Ä–∞: " << shape.getType() 
              << ", –ü–ª–æ—â–∞–¥—å: " << shape.getArea()
              << ", –ü–µ—Ä–∏–º–µ—Ç—Ä: " << shape.getPerimeter() << "\n";
}

// ============================================================================
// INTERFACE SEGREGATION PRINCIPLE (ISP)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å IDevice —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 * –¥–æ–ª–∂–Ω—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å.
 */
class BadIDevice {
public:
    virtual ~BadIDevice() = default;
    virtual void read() = 0;
    virtual void write() = 0;
    virtual void scan() = 0;
    virtual void print() = 0;
    virtual void fax() = 0;
    virtual void copy() = 0;
};

// –ü—Ä–∏–Ω—Ç–µ—Ä –≤—ã–Ω—É–∂–¥–µ–Ω —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –Ω–µ –Ω—É–∂–Ω—ã
class BadPrinter : public BadIDevice {
public:
    void read() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å!");
    }
    
    void write() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å!");
    }
    
    void scan() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å!");
    }
    
    void print() override {
        std::cout << "üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void fax() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–∫—Å—ã!");
    }
    
    void copy() override {
        throw std::runtime_error("–ü—Ä–∏–Ω—Ç–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å!");
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ ISP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 */

// –†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
class IReadable {
public:
    virtual ~IReadable() = default;
    virtual void read() = 0;
};

class IWritable {
public:
    virtual ~IWritable() = default;
    virtual void write() = 0;
};

class IScannable {
public:
    virtual ~IScannable() = default;
    virtual void scan() = 0;
};

class IPrintable {
public:
    virtual ~IPrintable() = default;
    virtual void print() = 0;
};

class IFaxable {
public:
    virtual ~IFaxable() = default;
    virtual void fax() = 0;
};

class ICopyable {
public:
    virtual ~ICopyable() = default;
    virtual void copy() = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Ä–µ–∞–ª–∏–∑—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
class Printer : public IPrintable, public ICopyable {
public:
    void print() override {
        std::cout << "üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void copy() override {
        std::cout << "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
};

class Scanner : public IReadable, public IScannable {
public:
    void read() override {
        std::cout << "üìñ –ß—Ç–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void scan() override {
        std::cout << "üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
};

class MultiFunctionDevice : public IPrintable, public IScannable, public IFaxable, public ICopyable {
public:
    void print() override {
        std::cout << "üñ®Ô∏è –ü–µ—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void scan() override {
        std::cout << "üìÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
    
    void fax() override {
        std::cout << "üì† –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–∫—Å–∞\n";
    }
    
    void copy() override {
        std::cout << "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n";
    }
};

// ============================================================================
// DEPENDENCY INVERSION PRINCIPLE (DIP)
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π
 * 
 * –ü—Ä–æ–±–ª–µ–º–∞: BusinessLogic –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
 * FileLogger –∏ EmailNotification, —á—Ç–æ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏
 * –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
 */
class BadFileLogger {
public:
    void log(const std::string& message) {
        std::cout << "üìù [FILE] " << message << "\n";
    }
};

class BadEmailNotification {
public:
    void send(const std::string& message) {
        std::cout << "üìß [EMAIL] " << message << "\n";
    }
};

class BadBusinessLogic {
private:
    BadFileLogger logger;
    BadEmailNotification notification;
    
public:
    void processOrder(const std::string& orderId) {
        logger.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: " + orderId);
        
        // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        std::cout << "üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ " << orderId << "\n";
        
        notification.send("–ó–∞–∫–∞–∑ " + orderId + " –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)
class ILogger {
public:
    virtual ~ILogger() = default;
    virtual void log(const std::string& message) = 0;
};

class INotificationService {
public:
    virtual ~INotificationService() = default;
    virtual void send(const std::string& message) = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
class FileLogger : public ILogger {
public:
    void log(const std::string& message) override {
        std::cout << "üìù [FILE] " << message << "\n";
        // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    }
};

class ConsoleLogger : public ILogger {
public:
    void log(const std::string& message) override {
        std::cout << "üñ•Ô∏è [CONSOLE] " << message << "\n";
    }
};

class EmailNotificationService : public INotificationService {
public:
    void send(const std::string& message) override {
        std::cout << "üìß [EMAIL] " << message << "\n";
        // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    }
};

class SMSNotificationService : public INotificationService {
public:
    void send(const std::string& message) override {
        std::cout << "üì± [SMS] " << message << "\n";
        // –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
    }
};

// –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
class BusinessLogic {
private:
    std::unique_ptr<ILogger> logger;
    std::unique_ptr<INotificationService> notificationService;
    
public:
    // Dependency Injection —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
    BusinessLogic(std::unique_ptr<ILogger> loggerPtr, 
                  std::unique_ptr<INotificationService> notificationPtr)
        : logger(std::move(loggerPtr)), notificationService(std::move(notificationPtr)) {}
    
    void processOrder(const std::string& orderId) {
        logger->log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: " + orderId);
        
        // –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        std::cout << "üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ " << orderId << "\n";
        
        notificationService->send("–ó–∞–∫–∞–∑ " + orderId + " –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –ü–†–ò–ù–¶–ò–ü–û–í
// ============================================================================

void demonstrateSRP() {
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SINGLE RESPONSIBILITY PRINCIPLE (SRP)\n";
    std::cout << std::string(60, '=') << "\n\n";
    
    std::cout << "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP:\n";
    BadUserManager badManager;
    badManager.setUserData("–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "ivan@example.com", "password123");
    if (badManager.validateUser()) {
        badManager.saveToDatabase();
        badManager.sendWelcomeEmail();
        badManager.logUserCreation();
    }
    
    std::cout << "\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ SRP:\n";
    User user("–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "petr@example.com", "securepass");
    
    if (UserValidator::isValid(user)) {
        UserRepository::save(user);
        EmailService::sendWelcomeEmail(user);
        Logger::logUserCreation(user);
    } else {
        Logger::logError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
}

void demonstrateOCP() {
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OPEN/CLOSED PRINCIPLE (OCP)\n";
    std::cout << std::string(60, '=') << "\n\n";
    
    std::cout << "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP:\n";
    BadPaymentProcessor badProcessor;
    badProcessor.processPayment(BadPaymentProcessor::CREDIT_CARD, 100.0);
    badProcessor.processPayment(BadPaymentProcessor::PAYPAL, 200.0);
    badProcessor.processPayment(BadPaymentProcessor::BANK_TRANSFER, 300.0);
    
    std::cout << "\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ OCP:\n";
    PaymentProcessor processor;
    
    // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
    processor.setPaymentStrategy(std::make_unique<CreditCardPayment>());
    processor.processPayment(100.0);
    
    processor.setPaymentStrategy(std::make_unique<PayPalPayment>());
    processor.processPayment(200.0);
    
    processor.setPaymentStrategy(std::make_unique<BankTransferPayment>());
    processor.processPayment(300.0);
    
    // –ù–æ–≤—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
    processor.setPaymentStrategy(std::make_unique<CryptoPayment>());
    processor.processPayment(500.0);
}

void demonstrateLSP() {
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø LISKOV SUBSTITUTION PRINCIPLE (LSP)\n";
    std::cout << std::string(60, '=') << "\n\n";
    
    std::cout << "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP:\n";
    Rectangle rect(5, 10);
    std::cout << "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ 5x10, –ø–ª–æ—â–∞–¥—å: " << rect.getArea() << "\n";
    
    BadSquare badSquare(5);
    std::cout << "–ö–≤–∞–¥—Ä–∞—Ç 5x5, –ø–ª–æ—â–∞–¥—å: " << badSquare.getArea() << "\n";
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ LSP: –∏–∑–º–µ–Ω–µ–Ω–∏–µ width –≤–ª–∏—è–µ—Ç –Ω–∞ height
    badSquare.setWidth(10);
    std::cout << "–ü–æ—Å–ª–µ setWidth(10): " << badSquare.getWidth() << "x" 
              << badSquare.getHeight() << ", –ø–ª–æ—â–∞–¥—å: " << badSquare.getArea() << "\n";
    
    std::cout << "\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ LSP:\n";
    GoodRectangle goodRect(5, 10);
    GoodSquare goodSquare(5);
    
    // –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é —Ñ–∏–≥—É—Ä—É —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    demonstrateLSP(goodRect);
    demonstrateLSP(goodSquare);
    
    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
    goodRect.setWidth(8);
    goodRect.setHeight(12);
    demonstrateLSP(goodRect);
    
    goodSquare.setSide(7);
    demonstrateLSP(goodSquare);
}

void demonstrateISP() {
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø INTERFACE SEGREGATION PRINCIPLE (ISP)\n";
    std::cout << std::string(60, '=') << "\n\n";
    
    std::cout << "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ ISP:\n";
    BadPrinter badPrinter;
    try {
        badPrinter.print();
        badPrinter.read(); // –í—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ!
    } catch (const std::exception& e) {
        std::cout << "–û—à–∏–±–∫–∞: " << e.what() << "\n";
    }
    
    std::cout << "\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ ISP:\n";
    
    // –ö–∞–∂–¥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
    Printer printer;
    Scanner scanner;
    MultiFunctionDevice mfd;
    
    std::cout << "–ü—Ä–∏–Ω—Ç–µ—Ä:\n";
    printer.print();
    printer.copy();
    
    std::cout << "–°–∫–∞–Ω–µ—Ä:\n";
    scanner.read();
    scanner.scan();
    
    std::cout << "–ú–§–£:\n";
    mfd.print();
    mfd.scan();
    mfd.fax();
    mfd.copy();
}

void demonstrateDIP() {
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø DEPENDENCY INVERSION PRINCIPLE (DIP)\n";
    std::cout << std::string(60, '=') << "\n\n";
    
    std::cout << "‚ùå –ù–∞—Ä—É—à–µ–Ω–∏–µ DIP:\n";
    BadBusinessLogic badLogic;
    badLogic.processOrder("ORDER-001");
    
    std::cout << "\n‚úÖ –°–æ–±–ª—é–¥–µ–Ω–∏–µ DIP:\n";
    
    // –ú–æ–∂–Ω–æ –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    auto fileLogger = std::make_unique<FileLogger>();
    auto emailNotification = std::make_unique<EmailNotificationService>();
    
    BusinessLogic businessLogic1(std::move(fileLogger), std::move(emailNotification));
    businessLogic1.processOrder("ORDER-002");
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    auto consoleLogger = std::make_unique<ConsoleLogger>();
    auto smsNotification = std::make_unique<SMSNotificationService>();
    
    BusinessLogic businessLogic2(std::move(consoleLogger), std::move(smsNotification));
    businessLogic2.processOrder("ORDER-003");
}

int main() {
    std::cout << "üöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SOLID –ü–†–ò–ù–¶–ò–ü–û–í –í –°–û–í–†–ï–ú–ï–ù–ù–û–ú C++\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –ò–∑—É—á–µ–Ω–∏–µ –ø—è—Ç–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –û–û–ü\n\n";
    
    demonstrateSRP();
    demonstrateOCP();
    demonstrateLSP();
    demonstrateISP();
    demonstrateDIP();
    
    std::cout << "\n" << std::string(60, '=') << "\n";
    std::cout << "üéì –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï\n";
    std::cout << std::string(60, '=') << "\n";
    std::cout << "SOLID –ø—Ä–∏–Ω—Ü–∏–ø—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç:\n";
    std::cout << "‚Ä¢ SRP: –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞\n";
    std::cout << "‚Ä¢ OCP: –†–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏\n";
    std::cout << "‚Ä¢ LSP: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ ISP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ DIP: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –∞ –Ω–µ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π\n\n";
    
    std::cout << "üí° –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:\n";
    std::cout << "1. –ü—Ä–∏–Ω—Ü–∏–ø—ã –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã –∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ\n";
    std::cout << "2. –ö–∞–∂–¥—ã–π –ø—Ä–∏–Ω—Ü–∏–ø –∏–º–µ–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ\n";
    std::cout << "3. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —è–∑—ã–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n";
    std::cout << "4. –≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –Ω–µ –¥–æ–≥–º—ã, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
