/**
 * @file srp_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Single Responsibility Principle (SRP)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ SRP —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
 * –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */

#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <fstream>
#include <chrono>
#include <iomanip>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è SRP
 * 
 * SRP –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄC ‚àà Classes: |Reasons(C)| = 1
 * –≥–¥–µ Reasons(C) = {r | –∏–∑–º–µ–Ω–µ–Ω–∏–µ r —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ C}
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –∫–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å OrderManager
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–∞—Ä—É—à–∞–µ—Ç SRP, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * 1. –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
 * 2. –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 * 3. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 * 4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
 * 5. –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 6. –†–∞–±–æ—Ç—É —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 * 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–æ–≤
 */
class BadOrderManager {
private:
    struct Order {
        int id;
        std::string customerName;
        std::string customerEmail;
        std::vector<std::string> items;
        double totalAmount;
        std::string status;
        std::chrono::system_clock::time_point createdAt;
    };
    
    Order order;
    
public:
    BadOrderManager(int orderId, const std::string& customer, const std::string& email) {
        order.id = orderId;
        order.customerName = customer;
        order.customerEmail = email;
        order.totalAmount = 0.0;
        order.status = "pending";
        order.createdAt = std::chrono::system_clock::now();
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    void addItem(const std::string& item) {
        order.items.push_back(item);
        std::cout << "üì¶ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: " << item << "\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –≤–∞–ª–∏–¥–∞—Ü–∏—è
    bool validateOrder() {
        if (order.customerName.empty()) {
            std::cout << "‚ùå –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n";
            return false;
        }
        
        if (order.customerEmail.empty() || order.customerEmail.find('@') == std::string::npos) {
            std::cout << "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å\n";
            return false;
        }
        
        if (order.items.empty()) {
            std::cout << "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º\n";
            return false;
        }
        
        return true;
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    void calculateTotal() {
        order.totalAmount = 0.0;
        for (const auto& item : order.items) {
            // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π)
            if (item == "laptop") order.totalAmount += 1000.0;
            else if (item == "mouse") order.totalAmount += 25.0;
            else if (item == "keyboard") order.totalAmount += 75.0;
            else order.totalAmount += 50.0; // —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        std::cout << "üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $" << order.totalAmount << "\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
    void applyDiscount(double discountPercent) {
        if (discountPercent > 0 && discountPercent <= 100) {
            double discountAmount = order.totalAmount * (discountPercent / 100.0);
            order.totalAmount -= discountAmount;
            std::cout << "üéØ –°–∫–∏–¥–∫–∞ " << discountPercent << "% –ø—Ä–∏–º–µ–Ω–µ–Ω–∞. "
                      << "–≠–∫–æ–Ω–æ–º–∏—è: $" << discountAmount << "\n";
        }
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    void sendConfirmationEmail() {
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ " << order.customerEmail << "\n";
        std::cout << "–¢–µ–∫—Å—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " << order.customerName 
                  << "! –í–∞—à –∑–∞–∫–∞–∑ #" << order.id << " –Ω–∞ —Å—É–º–º—É $" 
                  << order.totalAmount << " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: —Ä–∞–±–æ—Ç–∞ —Å –ë–î
    void saveToDatabase() {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #" << order.id << " –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    void generateReport() {
        std::ofstream report("order_report.txt");
        report << "=== –û–¢–ß–ï–¢ –ü–û –ó–ê–ö–ê–ó–£ ===\n";
        report << "ID: " << order.id << "\n";
        report << "–ö–ª–∏–µ–Ω—Ç: " << order.customerName << "\n";
        report << "Email: " << order.customerEmail << "\n";
        report << "–¢–æ–≤–∞—Ä—ã:\n";
        for (const auto& item : order.items) {
            report << "  - " << item << "\n";
        }
        report << "–û–±—â–∞—è —Å—É–º–º–∞: $" << order.totalAmount << "\n";
        report << "–°—Ç–∞—Ç—É—Å: " << order.status << "\n";
        report.close();
        std::cout << "üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ order_report.txt\n";
    }
    
    // –ù–∞—Ä—É—à–µ–Ω–∏–µ SRP: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    void updateStatus(const std::string& newStatus) {
        order.status = newStatus;
        std::cout << "üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " << newStatus << "\n";
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ SRP: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π
 * 
 * –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –∏–º–µ–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
 * - Order: —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
 * - OrderValidator: –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
 * - PriceCalculator: —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 * - DiscountManager: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
 * - NotificationService: –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - OrderRepository: —Ä–∞–±–æ—Ç–∞ —Å –ë–î
 * - ReportGenerator: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
 * - OrderStatusManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
 */

// –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
class Order {
private:
    int id;
    std::string customerName;
    std::string customerEmail;
    std::vector<std::string> items;
    double totalAmount;
    std::string status;
    std::chrono::system_clock::time_point createdAt;
    
public:
    Order(int orderId, const std::string& customer, const std::string& email)
        : id(orderId), customerName(customer), customerEmail(email), 
          totalAmount(0.0), status("pending"), createdAt(std::chrono::system_clock::now()) {}
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    int getId() const { return id; }
    const std::string& getCustomerName() const { return customerName; }
    const std::string& getCustomerEmail() const { return customerEmail; }
    const std::vector<std::string>& getItems() const { return items; }
    double getTotalAmount() const { return totalAmount; }
    const std::string& getStatus() const { return status; }
    auto getCreatedAt() const { return createdAt; }
    
    // –°–µ—Ç—Ç–µ—Ä—ã
    void addItem(const std::string& item) {
        items.push_back(item);
        std::cout << "üì¶ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: " << item << "\n";
    }
    
    void setTotalAmount(double amount) { totalAmount = amount; }
    void setStatus(const std::string& newStatus) { status = newStatus; }
};

// –ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤
class OrderValidator {
public:
    static bool isValid(const Order& order) {
        return validateCustomerName(order) && 
               validateCustomerEmail(order) && 
               validateItems(order);
    }
    
    static std::vector<std::string> getValidationErrors(const Order& order) {
        std::vector<std::string> errors;
        
        if (!validateCustomerName(order)) {
            errors.push_back("–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        
        if (!validateCustomerEmail(order)) {
            errors.push_back("–ù–µ–≤–µ—Ä–Ω—ã–π email –∞–¥—Ä–µ—Å");
        }
        
        if (!validateItems(order)) {
            errors.push_back("–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }
        
        return errors;
    }
    
private:
    static bool validateCustomerName(const Order& order) {
        return !order.getCustomerName().empty();
    }
    
    static bool validateCustomerEmail(const Order& order) {
        const std::string& email = order.getCustomerEmail();
        return !email.empty() && email.find('@') != std::string::npos;
    }
    
    static bool validateItems(const Order& order) {
        return !order.getItems().empty();
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
class PriceCalculator {
private:
    static double getItemPrice(const std::string& item) {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (item == "laptop") return 1000.0;
        else if (item == "mouse") return 25.0;
        else if (item == "keyboard") return 75.0;
        else if (item == "monitor") return 300.0;
        else if (item == "headphones") return 150.0;
        else return 50.0; // —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
    
public:
    static double calculateTotal(const Order& order) {
        double total = 0.0;
        for (const auto& item : order.getItems()) {
            total += getItemPrice(item);
        }
        return total;
    }
    
    static void updateOrderTotal(Order& order) {
        double total = calculateTotal(order);
        order.setTotalAmount(total);
        std::cout << "üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $" << total << "\n";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏
class DiscountManager {
public:
    enum class DiscountType {
        PERCENTAGE,
        FIXED_AMOUNT,
        BUY_ONE_GET_ONE
    };
    
    static void applyDiscount(Order& order, DiscountType type, double value) {
        double originalAmount = order.getTotalAmount();
        double discountAmount = 0.0;
        
        switch (type) {
            case DiscountType::PERCENTAGE:
                discountAmount = originalAmount * (value / 100.0);
                break;
            case DiscountType::FIXED_AMOUNT:
                discountAmount = std::min(value, originalAmount);
                break;
            case DiscountType::BUY_ONE_GET_ONE:
                // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ BOGO
                discountAmount = originalAmount * 0.5;
                break;
        }
        
        order.setTotalAmount(originalAmount - discountAmount);
        std::cout << "üéØ –°–∫–∏–¥–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞. –≠–∫–æ–Ω–æ–º–∏—è: $" << discountAmount 
                  << ", –Ω–æ–≤–∞—è —Å—É–º–º–∞: $" << order.getTotalAmount() << "\n";
    }
    
    static bool isEligibleForDiscount(const Order& order) {
        return order.getTotalAmount() > 100.0; // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Å–∫–∏–¥–∫–∏
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationService {
public:
    static void sendConfirmationEmail(const Order& order) {
        std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ " << order.getCustomerEmail() << "\n";
        std::cout << "–¢–µ–∫—Å—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " << order.getCustomerName() 
                  << "! –í–∞—à –∑–∞–∫–∞–∑ #" << order.getId() << " –Ω–∞ —Å—É–º–º—É $" 
                  << order.getTotalAmount() << " –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n";
    }
    
    static void sendStatusUpdate(const Order& order) {
        std::cout << "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ " << order.getCustomerEmail() << "\n";
        std::cout << "–¢–µ–∫—Å—Ç: –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #" << order.getId() 
                  << " –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " << order.getStatus() << "\n";
    }
    
    static void sendShippingNotification(const Order& order) {
        std::cout << "üöö –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ " << order.getCustomerEmail() << "\n";
        std::cout << "–¢–µ–∫—Å—Ç: –í–∞—à –∑–∞–∫–∞–∑ #" << order.getId() << " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class OrderRepository {
public:
    static void save(const Order& order) {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #" << order.getId() << " –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n";
        // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î
        // INSERT INTO orders (id, customer_name, customer_email, total_amount, status, created_at)
        // VALUES (?, ?, ?, ?, ?, ?)
    }
    
    static Order findById(int id) {
        std::cout << "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞ #" << id << " –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n";
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        return Order(id, "Test Customer", "test@example.com");
    }
    
    static void updateStatus(int orderId, const std::string& status) {
        std::cout << "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ #" << orderId << " –Ω–∞ " << status << "\n";
        // UPDATE orders SET status = ? WHERE id = ?
    }
    
    static std::vector<Order> findByCustomer(const std::string& customerEmail) {
        std::cout << "üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ " << customerEmail << "\n";
        // SELECT * FROM orders WHERE customer_email = ?
        return {}; // –∑–∞–≥–ª—É—à–∫–∞
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
class ReportGenerator {
public:
    static void generateOrderReport(const Order& order, const std::string& filename = "order_report.txt") {
        std::ofstream report(filename);
        
        report << "=== –û–¢–ß–ï–¢ –ü–û –ó–ê–ö–ê–ó–£ ===\n";
        report << "ID: " << order.getId() << "\n";
        report << "–ö–ª–∏–µ–Ω—Ç: " << order.getCustomerName() << "\n";
        report << "Email: " << order.getCustomerEmail() << "\n";
        report << "–¢–æ–≤–∞—Ä—ã:\n";
        
        for (const auto& item : order.getItems()) {
            report << "  - " << item << "\n";
        }
        
        report << "–û–±—â–∞—è —Å—É–º–º–∞: $" << order.getTotalAmount() << "\n";
        report << "–°—Ç–∞—Ç—É—Å: " << order.getStatus() << "\n";
        
        auto time_t = std::chrono::system_clock::to_time_t(order.getCreatedAt());
        report << "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: " << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") << "\n";
        
        report.close();
        std::cout << "üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ " << filename << "\n";
    }
    
    static void generateCustomerReport(const std::string& customerEmail) {
        auto orders = OrderRepository::findByCustomer(customerEmail);
        
        std::ofstream report("customer_report.txt");
        report << "=== –û–¢–ß–ï–¢ –ü–û –ö–õ–ò–ï–ù–¢–£ ===\n";
        report << "Email: " << customerEmail << "\n";
        report << "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: " << orders.size() << "\n";
        report.close();
        
        std::cout << "üìä –û—Ç—á–µ—Ç –ø–æ –∫–ª–∏–µ–Ω—Ç—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ customer_report.txt\n";
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤
class OrderStatusManager {
public:
    enum class Status {
        PENDING,
        CONFIRMED,
        PROCESSING,
        SHIPPED,
        DELIVERED,
        CANCELLED
    };
    
    static std::string statusToString(Status status) {
        switch (status) {
            case Status::PENDING: return "pending";
            case Status::CONFIRMED: return "confirmed";
            case Status::PROCESSING: return "processing";
            case Status::SHIPPED: return "shipped";
            case Status::DELIVERED: return "delivered";
            case Status::CANCELLED: return "cancelled";
            default: return "unknown";
        }
    }
    
    static bool canTransitionTo(const std::string& currentStatus, const std::string& newStatus) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if (currentStatus == "pending") {
            return newStatus == "confirmed" || newStatus == "cancelled";
        } else if (currentStatus == "confirmed") {
            return newStatus == "processing" || newStatus == "cancelled";
        } else if (currentStatus == "processing") {
            return newStatus == "shipped" || newStatus == "cancelled";
        } else if (currentStatus == "shipped") {
            return newStatus == "delivered";
        }
        return false;
    }
    
    static void updateStatus(Order& order, const std::string& newStatus) {
        if (canTransitionTo(order.getStatus(), newStatus)) {
            order.setStatus(newStatus);
            OrderRepository::updateStatus(order.getId(), newStatus);
            std::cout << "üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #" << order.getId() 
                      << " –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " << newStatus << "\n";
        } else {
            std::cout << "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å " << order.getStatus() 
                      << " –Ω–∞ " << newStatus << "\n";
        }
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateBadSRP() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï SRP - –ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–ª–∞—Å—Å:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BadOrderManager badOrder(1001, "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "ivan@example.com");
    badOrder.addItem("laptop");
    badOrder.addItem("mouse");
    badOrder.addItem("keyboard");
    
    if (badOrder.validateOrder()) {
        badOrder.calculateTotal();
        badOrder.applyDiscount(10.0);
        badOrder.sendConfirmationEmail();
        badOrder.saveToDatabase();
        badOrder.generateReport();
        badOrder.updateStatus("confirmed");
    }
}

void demonstrateGoodSRP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï SRP - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    Order order(1002, "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", "petr@example.com");
    order.addItem("laptop");
    order.addItem("monitor");
    order.addItem("headphones");
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (OrderValidator::isValid(order)) {
        std::cout << "‚úÖ –ó–∞–∫–∞–∑ –≤–∞–ª–∏–¥–µ–Ω\n";
        
        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        PriceCalculator::updateOrderTotal(order);
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
        if (DiscountManager::isEligibleForDiscount(order)) {
            DiscountManager::applyDiscount(order, DiscountManager::DiscountType::PERCENTAGE, 15.0);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        OrderRepository::save(order);
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        NotificationService::sendConfirmationEmail(order);
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        ReportGenerator::generateOrderReport(order);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        OrderStatusManager::updateStatus(order, "confirmed");
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        if (order.getStatus() == "confirmed") {
            NotificationService::sendStatusUpdate(order);
        }
        
    } else {
        std::cout << "‚ùå –ó–∞–∫–∞–∑ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω. –û—à–∏–±–∫–∏:\n";
        auto errors = OrderValidator::getValidationErrors(order);
        for (const auto& error : errors) {
            std::cout << "  - " << error << "\n";
        }
    }
}

// ============================================================================
// –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í
// ============================================================================

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í SRP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å - –ª–µ–≥—á–µ –ø–æ–Ω–∏–º–∞—Ç—å –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å\n";
    std::cout << "‚Ä¢ –ú–µ–Ω—å—à–µ coupling –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –∫–æ–¥–∞\n";
    std::cout << "‚Ä¢ –ë–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –≤ –∫–æ–º–∞–Ω–¥–µ\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–π overhead –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ SRP –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏\n";
    std::cout << "‚Ä¢ –ù–µ –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω—è–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n";
    std::cout << "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞—Å–∞–¥–æ–≤ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø SINGLE RESPONSIBILITY PRINCIPLE (SRP)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n\n";
    
    demonstrateBadSRP();
    demonstrateGoodSRP();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "SRP: ‚àÄC ‚àà Classes: |Reasons(C)| = 1\n";
    std::cout << "–≥–¥–µ Reasons(C) = {r | –∏–∑–º–µ–Ω–µ–Ω–∏–µ r —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ C}\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ –æ–¥–Ω—É –ø—Ä–∏—á–∏–Ω—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è\n";
    std::cout << "2. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π —É–ª—É—á—à–∞–µ—Ç maintainability\n";
    std::cout << "3. SRP —è–≤–ª—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ SOLID\n";
    std::cout << "4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –ø—Ä–æ—Å—Ç–æ—Ç–æ–π –∏ –≥–∏–±–∫–æ—Å—Ç—å—é\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
