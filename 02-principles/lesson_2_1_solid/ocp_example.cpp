/**
 * @file ocp_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Open/Closed Principle (OCP)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ OCP —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
 * –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.
 */

#include <iostream>
#include <memory>
#include <vector>
#include <string>
#include <functional>
#include <map>
#include <algorithm>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è OCP
 * 
 * OCP –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄE ‚àà Entities: E ‚àà Extensible ‚àß E ‚àâ Modifiable
 * –≥–¥–µ Extensible = {e | –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è e}
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è,
 * –Ω–æ –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ï–ô
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–∞—Ä—É—à–∞–µ—Ç OCP, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
 * –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥.
 */
class BadPaymentProcessor {
public:
    enum class PaymentType {
        CREDIT_CARD,
        PAYPAL,
        BANK_TRANSFER,
        CRYPTOCURRENCY  // –ù–æ–≤—ã–π —Ç–∏–ø - —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏!
    };
    
    struct PaymentRequest {
        PaymentType type;
        double amount;
        std::string currency;
        std::map<std::string, std::string> metadata;
    };
    
    bool processPayment(const PaymentRequest& request) {
        std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ —Å—É–º–º—É $" << request.amount << "\n";
        
        switch (request.type) {
            case PaymentType::CREDIT_CARD:
                return processCreditCard(request);
            case PaymentType::PAYPAL:
                return processPayPal(request);
            case PaymentType::BANK_TRANSFER:
                return processBankTransfer(request);
            case PaymentType::CRYPTOCURRENCY:
                return processCryptocurrency(request);  // –ù–æ–≤—ã–π case!
            default:
                std::cout << "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞\n";
                return false;
        }
    }
    
private:
    bool processCreditCard(const PaymentRequest& request) {
        std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã...\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
        return true;
    }
    
    bool processPayPal(const PaymentRequest& request) {
        std::cout << "üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ PayPal...\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PayPal
        return true;
    }
    
    bool processBankTransfer(const PaymentRequest& request) {
        std::cout << "üè¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞...\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        return true;
    }
    
    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ - –Ω–∞—Ä—É—à–µ–Ω–∏–µ OCP!
    bool processCryptocurrency(const PaymentRequest& request) {
        std::cout << "‚Çø –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...\n";
        // –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        return true;
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ OCP: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * 
 * –ù–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞,
 * –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞.
 */

// –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
class PaymentStrategy {
public:
    virtual ~PaymentStrategy() = default;
    virtual bool processPayment(double amount, const std::string& currency, 
                               const std::map<std::string, std::string>& metadata) = 0;
    virtual std::string getPaymentType() const = 0;
    virtual double getProcessingFee() const = 0;
    virtual bool supportsCurrency(const std::string& currency) const = 0;
    virtual std::vector<std::string> getSupportedCurrencies() const = 0;
};

// –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
class CreditCardPayment : public PaymentStrategy {
private:
    std::string cardNumber;
    std::string expiryDate;
    std::string cvv;
    
public:
    CreditCardPayment(const std::string& card, const std::string& expiry, const std::string& cvvCode)
        : cardNumber(card), expiryDate(expiry), cvv(cvvCode) {}
    
    bool processPayment(double amount, const std::string& currency, 
                       const std::map<std::string, std::string>& metadata) override {
        std::cout << "üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã: $" << amount << " " << currency << "\n";
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        if (!validateCard()) {
            std::cout << "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞\n";
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if (!checkLimits(amount)) {
            std::cout << "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ –∫–∞—Ä—Ç–µ\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        std::cout << "‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Credit Card";
    }
    
    double getProcessingFee() const override {
        return 0.029; // 2.9% –∫–æ–º–∏—Å—Å–∏—è
    }
    
    bool supportsCurrency(const std::string& currency) const override {
        std::vector<std::string> supported = {"USD", "EUR", "GBP", "JPY"};
        return std::find(supported.begin(), supported.end(), currency) != supported.end();
    }
    
    std::vector<std::string> getSupportedCurrencies() const override {
        return {"USD", "EUR", "GBP", "JPY"};
    }
    
private:
    bool validateCard() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        return cardNumber.length() >= 13 && cardNumber.length() <= 19;
    }
    
    bool checkLimits(double amount) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        return amount <= 10000.0;
    }
};

class PayPalPayment : public PaymentStrategy {
private:
    std::string email;
    std::string password;
    
public:
    PayPalPayment(const std::string& emailAddr, const std::string& pass)
        : email(emailAddr), password(pass) {}
    
    bool processPayment(double amount, const std::string& currency, 
                       const std::map<std::string, std::string>& metadata) override {
        std::cout << "üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ PayPal: $" << amount << " " << currency << "\n";
        
        // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (!authenticate()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ PayPal\n";
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        if (!checkBalance(amount)) {
            std::cout << "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ PayPal\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        std::cout << "‚úÖ –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ PayPal —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "PayPal";
    }
    
    double getProcessingFee() const override {
        return 0.034; // 3.4% –∫–æ–º–∏—Å—Å–∏—è
    }
    
    bool supportsCurrency(const std::string& currency) const override {
        std::vector<std::string> supported = {"USD", "EUR", "GBP", "CAD", "AUD", "JPY"};
        return std::find(supported.begin(), supported.end(), currency) != supported.end();
    }
    
    std::vector<std::string> getSupportedCurrencies() const override {
        return {"USD", "EUR", "GBP", "CAD", "AUD", "JPY"};
    }
    
private:
    bool authenticate() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        return !email.empty() && !password.empty();
    }
    
    bool checkBalance(double amount) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        return amount <= 5000.0;
    }
};

class BankTransferPayment : public PaymentStrategy {
private:
    std::string accountNumber;
    std::string routingNumber;
    std::string bankName;
    
public:
    BankTransferPayment(const std::string& account, const std::string& routing, const std::string& bank)
        : accountNumber(account), routingNumber(routing), bankName(bank) {}
    
    bool processPayment(double amount, const std::string& currency, 
                       const std::map<std::string, std::string>& metadata) override {
        std::cout << "üè¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: $" << amount << " " << currency << "\n";
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!validateBankAccount()) {
            std::cout << "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ\n";
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –±–∞–Ω–∫–∞
        if (!checkBankLimits(amount)) {
            std::cout << "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –±–∞–Ω–∫–∞\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        std::cout << "‚úÖ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Bank Transfer";
    }
    
    double getProcessingFee() const override {
        return 0.015; // 1.5% –∫–æ–º–∏—Å—Å–∏—è
    }
    
    bool supportsCurrency(const std::string& currency) const override {
        // –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–Ω–æ–≥–æ –≤–∞–ª—é—Ç
        return currency.length() == 3; // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    }
    
    std::vector<std::string> getSupportedCurrencies() const override {
        return {"USD", "EUR", "GBP", "CAD", "AUD", "JPY", "CHF", "SEK", "NOK", "DKK"};
    }
    
private:
    bool validateBankAccount() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        return accountNumber.length() >= 8 && routingNumber.length() == 9;
    }
    
    bool checkBankLimits(double amount) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        return amount <= 50000.0;
    }
};

// –ù–æ–≤—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
class CryptocurrencyPayment : public PaymentStrategy {
private:
    std::string walletAddress;
    std::string cryptoType;
    
public:
    CryptocurrencyPayment(const std::string& wallet, const std::string& crypto)
        : walletAddress(wallet), cryptoType(crypto) {}
    
    bool processPayment(double amount, const std::string& currency, 
                       const std::map<std::string, std::string>& metadata) override {
        std::cout << "‚Çø –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: " << amount << " " << cryptoType << "\n";
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
        if (!validateWallet()) {
            std::cout << "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n";
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if (!checkCryptoBalance(amount)) {
            std::cout << "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–æ—à–µ–ª—å–∫–µ\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        std::cout << "‚úÖ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Cryptocurrency (" + cryptoType + ")";
    }
    
    double getProcessingFee() const override {
        return 0.005; // 0.5% –∫–æ–º–∏—Å—Å–∏—è (–Ω–∏–∑–∫–∞—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç)
    }
    
    bool supportsCurrency(const std::string& currency) const override {
        // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Å–≤–æ–∏ –≤–∞–ª—é—Ç—ã
        return cryptoType == currency;
    }
    
    std::vector<std::string> getSupportedCurrencies() const override {
        return {cryptoType};
    }
    
private:
    bool validateWallet() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
        return walletAddress.length() >= 26 && walletAddress.length() <= 35;
    }
    
    bool checkCryptoBalance(double amount) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        return amount <= 100.0; // –õ–∏–º–∏—Ç –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
    }
};

// –ï—â–µ –æ–¥–∏–Ω –Ω–æ–≤—ã–π —Ç–∏–ø - Apple Pay!
class ApplePayPayment : public PaymentStrategy {
private:
    std::string deviceId;
    std::string passcode;
    
public:
    ApplePayPayment(const std::string& device, const std::string& pass)
        : deviceId(device), passcode(pass) {}
    
    bool processPayment(double amount, const std::string& currency, 
                       const std::map<std::string, std::string>& metadata) override {
        std::cout << "üçé –û–±—Ä–∞–±–æ—Ç–∫–∞ Apple Pay: $" << amount << " " << currency << "\n";
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (!validateDevice()) {
            std::cout << "‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ Apple\n";
            return false;
        }
        
        // –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if (!biometricAuth()) {
            std::cout << "‚ùå –û—à–∏–±–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        std::cout << "‚úÖ –ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Apple Pay —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n";
        return true;
    }
    
    std::string getPaymentType() const override {
        return "Apple Pay";
    }
    
    double getProcessingFee() const override {
        return 0.025; // 2.5% –∫–æ–º–∏—Å—Å–∏—è
    }
    
    bool supportsCurrency(const std::string& currency) const override {
        std::vector<std::string> supported = {"USD", "EUR", "GBP", "CAD", "AUD", "JPY", "CHF"};
        return std::find(supported.begin(), supported.end(), currency) != supported.end();
    }
    
    std::vector<std::string> getSupportedCurrencies() const override {
        return {"USD", "EUR", "GBP", "CAD", "AUD", "JPY", "CHF"};
    }
    
private:
    bool validateDevice() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        return deviceId.length() >= 10;
    }
    
    bool biometricAuth() {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        return passcode.length() >= 6;
    }
};

// –ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π (–æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∑–∞–∫—Ä—ã—Ç –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)
class PaymentProcessor {
private:
    std::vector<std::unique_ptr<PaymentStrategy>> strategies;
    
public:
    void addPaymentStrategy(std::unique_ptr<PaymentStrategy> strategy) {
        strategies.push_back(std::move(strategy));
    }
    
    bool processPayment(const std::string& paymentType, double amount, 
                       const std::string& currency = "USD",
                       const std::map<std::string, std::string>& metadata = {}) {
        
        auto strategy = findStrategy(paymentType);
        if (!strategy) {
            std::cout << "‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–ª–∞—Ç–µ–∂–∞ '" << paymentType << "' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞–ª—é—Ç—ã
        if (!strategy->supportsCurrency(currency)) {
            std::cout << "‚ùå –í–∞–ª—é—Ç–∞ '" << currency << "' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è " 
                      << strategy->getPaymentType() << "\n";
            return false;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        bool result = strategy->processPayment(amount, currency, metadata);
        
        if (result) {
            double fee = amount * strategy->getProcessingFee();
            std::cout << "üí∏ –ö–æ–º–∏—Å—Å–∏—è (" << strategy->getPaymentType() << "): $" 
                      << fee << " (" << (strategy->getProcessingFee() * 100) << "%)\n";
        }
        
        return result;
    }
    
    void listSupportedPayments() {
        std::cout << "üí≥ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π:\n";
        for (const auto& strategy : strategies) {
            std::cout << "  - " << strategy->getPaymentType() 
                      << " (–∫–æ–º–∏—Å—Å–∏—è: " << (strategy->getProcessingFee() * 100) << "%)\n";
            std::cout << "    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: ";
            auto currencies = strategy->getSupportedCurrencies();
            for (size_t i = 0; i < currencies.size(); ++i) {
                std::cout << currencies[i];
                if (i < currencies.size() - 1) std::cout << ", ";
            }
            std::cout << "\n";
        }
    }
    
private:
    PaymentStrategy* findStrategy(const std::string& paymentType) {
        for (const auto& strategy : strategies) {
            if (strategy->getPaymentType() == paymentType) {
                return strategy.get();
            }
        }
        return nullptr;
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –°–ò–°–¢–ï–ú–ê –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–ê–ù–ù–´–•
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ OCP: –§–∏–ª—å—Ç—Ä —Å –∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
 */
class BadDataFilter {
public:
    enum class FilterType {
        BY_NAME,
        BY_AGE,
        BY_SALARY,
        BY_DEPARTMENT  // –ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π - —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏!
    };
    
    struct Employee {
        std::string name;
        int age;
        double salary;
        std::string department;
    };
    
    std::vector<Employee> filter(const std::vector<Employee>& employees, FilterType type, const std::string& value) {
        std::vector<Employee> result;
        
        for (const auto& emp : employees) {
            bool matches = false;
            
            switch (type) {
                case FilterType::BY_NAME:
                    matches = emp.name.find(value) != std::string::npos;
                    break;
                case FilterType::BY_AGE:
                    matches = std::to_string(emp.age) == value;
                    break;
                case FilterType::BY_SALARY:
                    matches = std::to_string(static_cast<int>(emp.salary)) == value;
                    break;
                case FilterType::BY_DEPARTMENT:  // –ù–æ–≤—ã–π case!
                    matches = emp.department == value;
                    break;
            }
            
            if (matches) {
                result.push_back(emp);
            }
        }
        
        return result;
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ OCP: –†–∞—Å—à–∏—Ä—è–µ–º—ã–π —Ñ–∏–ª—å—Ç—Ä
 */
class FilterCriteria {
public:
    virtual ~FilterCriteria() = default;
    virtual bool matches(const BadDataFilter::Employee& employee) const = 0;
    virtual std::string getDescription() const = 0;
};

class NameFilter : public FilterCriteria {
private:
    std::string namePattern;
    
public:
    NameFilter(const std::string& pattern) : namePattern(pattern) {}
    
    bool matches(const BadDataFilter::Employee& employee) const override {
        return employee.name.find(namePattern) != std::string::npos;
    }
    
    std::string getDescription() const override {
        return "–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç: " + namePattern;
    }
};

class AgeFilter : public FilterCriteria {
private:
    int minAge;
    int maxAge;
    
public:
    AgeFilter(int min, int max) : minAge(min), maxAge(max) {}
    
    bool matches(const BadDataFilter::Employee& employee) const override {
        return employee.age >= minAge && employee.age <= maxAge;
    }
    
    std::string getDescription() const override {
        return "–í–æ–∑—Ä–∞—Å—Ç –æ—Ç " + std::to_string(minAge) + " –¥–æ " + std::to_string(maxAge);
    }
};

class SalaryFilter : public FilterCriteria {
private:
    double minSalary;
    double maxSalary;
    
public:
    SalaryFilter(double min, double max) : minSalary(min), maxSalary(max) {}
    
    bool matches(const BadDataFilter::Employee& employee) const override {
        return employee.salary >= minSalary && employee.salary <= maxSalary;
    }
    
    std::string getDescription() const override {
        return "–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç $" + std::to_string(static_cast<int>(minSalary)) + 
               " –¥–æ $" + std::to_string(static_cast<int>(maxSalary));
    }
};

// –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
class DepartmentFilter : public FilterCriteria {
private:
    std::string department;
    
public:
    DepartmentFilter(const std::string& dept) : department(dept) {}
    
    bool matches(const BadDataFilter::Employee& employee) const override {
        return employee.department == department;
    }
    
    std::string getDescription() const override {
        return "–û—Ç–¥–µ–ª: " + department;
    }
};

// –ï—â–µ –æ–¥–∏–Ω –Ω–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä!
class SeniorityFilter : public FilterCriteria {
private:
    int minYears;
    
public:
    SeniorityFilter(int years) : minYears(years) {}
    
    bool matches(const BadDataFilter::Employee& employee) const override {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞–∂ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –º–∏–Ω—É—Å 22 (–≤–æ–∑—Ä–∞—Å—Ç –≤—ã–ø—É—Å–∫–∞)
        int estimatedExperience = employee.age - 22;
        return estimatedExperience >= minYears;
    }
    
    std::string getDescription() const override {
        return "–°—Ç–∞–∂ –Ω–µ –º–µ–Ω–µ–µ " + std::to_string(minYears) + " –ª–µ—Ç";
    }
};

class GoodDataFilter {
public:
    std::vector<BadDataFilter::Employee> filter(const std::vector<BadDataFilter::Employee>& employees,
                                                const std::vector<std::unique_ptr<FilterCriteria>>& criteria) {
        std::vector<BadDataFilter::Employee> result;
        
        for (const auto& emp : employees) {
            bool matchesAll = true;
            
            for (const auto& criterion : criteria) {
                if (!criterion->matches(emp)) {
                    matchesAll = false;
                    break;
                }
            }
            
            if (matchesAll) {
                result.push_back(emp);
            }
        }
        
        return result;
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateBadOCP() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï OCP - –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:\n";
    std::cout << std::string(60, '-') << "\n";
    
    BadPaymentProcessor badProcessor;
    
    BadPaymentProcessor::PaymentRequest request1{};
    request1.type = BadPaymentProcessor::PaymentType::CREDIT_CARD;
    request1.amount = 100.0;
    request1.currency = "USD";
    badProcessor.processPayment(request1);
    
    BadPaymentProcessor::PaymentRequest request2{};
    request2.type = BadPaymentProcessor::PaymentType::CRYPTOCURRENCY;  // –ù–æ–≤—ã–π —Ç–∏–ø!
    request2.amount = 50.0;
    request2.currency = "BTC";
    badProcessor.processPayment(request2);
}

void demonstrateGoodOCP() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï OCP - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏:\n";
    std::cout << std::string(60, '-') << "\n";
    
    PaymentProcessor processor;
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–ª–∞—Ç–µ–∂–µ–π
    processor.addPaymentStrategy(std::make_unique<CreditCardPayment>("1234567890123456", "12/25", "123"));
    processor.addPaymentStrategy(std::make_unique<PayPalPayment>("user@example.com", "password"));
    processor.addPaymentStrategy(std::make_unique<BankTransferPayment>("12345678", "123456789", "Bank of America"));
    
    // –ù–æ–≤—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π - –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
    processor.addPaymentStrategy(std::make_unique<CryptocurrencyPayment>("1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa", "BTC"));
    processor.addPaymentStrategy(std::make_unique<ApplePayPayment>("iPhone123456", "123456"));
    
    // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    processor.listSupportedPayments();
    
    std::cout << "\nüí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π:\n";
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    processor.processPayment("Credit Card", 100.0, "USD");
    processor.processPayment("PayPal", 250.0, "EUR");
    processor.processPayment("Bank Transfer", 1000.0, "GBP");
    processor.processPayment("Cryptocurrency (BTC)", 0.001, "BTC");  // –ù–æ–≤—ã–π —Ç–∏–ø!
    processor.processPayment("Apple Pay", 75.0, "USD");  // –ï—â–µ –æ–¥–∏–Ω –Ω–æ–≤—ã–π —Ç–∏–ø!
}

void demonstrateFilterOCP() {
    std::cout << "\nüîç –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OCP –í –°–ò–°–¢–ï–ú–ï –§–ò–õ–¨–¢–†–ê–¶–ò–ò:\n";
    std::cout << std::string(50, '-') << "\n";
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    std::vector<BadDataFilter::Employee> employees = {
        {"–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", 30, 50000, "IT"},
        {"–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", 25, 45000, "Marketing"},
        {"–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞", 35, 60000, "IT"},
        {"–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞", 28, 48000, "HR"},
        {"–°–µ—Ä–≥–µ–π –°–º–∏—Ä–Ω–æ–≤", 40, 70000, "IT"}
    };
    
    std::cout << "üë• –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n";
    for (const auto& emp : employees) {
        std::cout << "  - " << emp.name << " (–≤–æ–∑—Ä–∞—Å—Ç: " << emp.age 
                  << ", –∑–∞—Ä–ø–ª–∞—Ç–∞: $" << emp.salary << ", –æ—Ç–¥–µ–ª: " << emp.department << ")\n";
    }
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    GoodDataFilter filter;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ IT –æ—Ç–¥–µ–ª—É –∏ –≤–æ–∑—Ä–∞—Å—Ç—É
    std::vector<std::unique_ptr<FilterCriteria>> criteria1;
    criteria1.push_back(std::make_unique<DepartmentFilter>("IT"));
    criteria1.push_back(std::make_unique<AgeFilter>(25, 35));
    
    auto filtered1 = filter.filter(employees, criteria1);
    std::cout << "\nüîç IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 25-35 –ª–µ—Ç:\n";
    for (const auto& emp : filtered1) {
        std::cout << "  - " << emp.name << " (–≤–æ–∑—Ä–∞—Å—Ç: " << emp.age 
                  << ", –∑–∞—Ä–ø–ª–∞—Ç–∞: $" << emp.salary << ")\n";
    }
    
    // –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä - —Å—Ç–∞–∂ - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞!
    std::vector<std::unique_ptr<FilterCriteria>> criteria2;
    criteria2.push_back(std::make_unique<SalaryFilter>(45000, 65000));
    criteria2.push_back(std::make_unique<SeniorityFilter>(5));  // –ù–æ–≤—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π!
    
    auto filtered2 = filter.filter(employees, criteria2);
    std::cout << "\nüîç –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π $45k-$65k –∏ —Å—Ç–∞–∂–µ–º 5+ –ª–µ—Ç:\n";
    for (const auto& emp : filtered2) {
        std::cout << "  - " << emp.name << " (–≤–æ–∑—Ä–∞—Å—Ç: " << emp.age 
                  << ", –∑–∞—Ä–ø–ª–∞—Ç–∞: $" << emp.salary << ", –æ—Ç–¥–µ–ª: " << emp.department << ")\n";
    }
}

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í OCP:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –õ–µ–≥–∫–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –±–∞–≥–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥\n";
    std::cout << "‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π\n";
    std::cout << "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—É –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π overhead –æ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤\n";
    std::cout << "‚Ä¢ –£—Å–ª–æ–∂–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (–±–æ–ª—å—à–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π)\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ–µ over-engineering –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ OCP –¥–ª—è —á–∞—Å—Ç–æ –∏–∑–º–µ–Ω—è—é—â–∏—Ö—Å—è –º–æ–¥—É–ª–µ–π\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Strategy Pattern –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ OCP\n";
    std::cout << "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ Template Method Pattern –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n";
    std::cout << "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ (YAGNI)\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø OPEN/CLOSED PRINCIPLE (OCP)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –æ—Ç–∫—Ä—ã—Ç–æ—Å—Ç–∏/–∑–∞–∫—Ä—ã—Ç–æ—Å—Ç–∏\n\n";
    
    demonstrateBadOCP();
    demonstrateGoodOCP();
    demonstrateFilterOCP();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "OCP: ‚àÄE ‚àà Entities: E ‚àà Extensible ‚àß E ‚àâ Modifiable\n";
    std::cout << "–≥–¥–µ Extensible = {e | –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è e}\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è\n";
    std::cout << "2. –ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏\n";
    std::cout << "3. OCP –¥–æ—Å—Ç–∏–≥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –∏ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º\n";
    std::cout << "4. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É –≥–∏–±–∫–æ—Å—Ç—å—é –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
