/**
 * @file yagni_example.cpp
 * @brief –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞ YAGNI (You Aren't Gonna Need It)
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –ø—Ä–∏–Ω—Ü–∏–ø–∞ YAGNI:
 * - –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * - –ú–µ—Ç–æ–¥—ã –æ—Ç–ª–æ–∂–µ–Ω–∏—è –Ω–µ–Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
 * - –ö–æ–º–ø—Ä–æ–º–∏—Å—Å—ã –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ YAGNI
 */

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <memory>
#include <functional>
#include <chrono>
#include <thread>

/**
 * @brief –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è YAGNI
 * 
 * YAGNI –º–æ–∂–Ω–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
 * ‚àÄF ‚àà Features: F ‚àà CurrentRequirements ‚à® F ‚àà ImmediateNeeds
 * –≥–¥–µ CurrentRequirements = {f | f —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å}
 *     ImmediateNeeds = {f | f –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º}
 * 
 * –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏: –Ω–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å,
 * –ø–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ YAGNI: –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π "–Ω–∞ –±—É–¥—É—â–µ–µ"
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∞—Ä—É—à–∞–µ—Ç YAGNI, —Ä–µ–∞–ª–∏–∑—É—è —Å–ª–æ–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å,
 * –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è.
 */
class BadNotificationSystem {
public:
    enum class NotificationType {
        EMAIL, SMS, PUSH, IN_APP, WEBHOOK, SLACK, DISCORD, TELEGRAM, WHATSAPP
    };
    
    enum class Priority {
        LOW, NORMAL, HIGH, URGENT, CRITICAL
    };
    
    enum class DeliveryStatus {
        PENDING, SENT, DELIVERED, READ, FAILED, RETRYING, CANCELLED
    };
    
    struct NotificationTemplate {
        std::string id;
        std::string subject;
        std::string body;
        NotificationType type;
        Priority priority;
        std::map<std::string, std::string> variables;
        std::chrono::seconds retryInterval;
        int maxRetries;
        std::chrono::seconds ttl;
    };
    
    struct NotificationRecipient {
        std::string id;
        std::string email;
        std::string phone;
        std::string pushToken;
        std::map<NotificationType, bool> preferences;
        std::chrono::system_clock::time_point lastActive;
        std::string timezone;
        std::string language;
    };
    
private:
    std::vector<NotificationTemplate> templates;
    std::vector<NotificationRecipient> recipients;
    std::map<std::string, DeliveryStatus> deliveryStatuses;
    
public:
    void addTemplate(const NotificationTemplate& template) {
        templates.push_back(template);
        std::cout << "üìù –î–æ–±–∞–≤–ª–µ–Ω —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " << template.id << "\n";
    }
    
    void addRecipient(const NotificationRecipient& recipient) {
        recipients.push_back(recipient);
        std::cout << "üë§ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: " << recipient.id << "\n";
    }
    
    void sendNotification(const std::string& templateId, 
                         const std::vector<std::string>& recipientIds,
                         const std::map<std::string, std::string>& variables) {
        
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–∞
        auto templateIt = std::find_if(templates.begin(), templates.end(),
            [&templateId](const NotificationTemplate& t) {
                return t.id == templateId;
            });
        
        if (templateIt == templates.end()) {
            std::cout << "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: " << templateId << "\n";
            return;
        }
        
        const NotificationTemplate& template = *templateIt;
        
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        for (const auto& recipientId : recipientIds) {
            auto recipientIt = std::find_if(recipients.begin(), recipients.end(),
                [&recipientId](const NotificationRecipient& r) {
                    return r.id == recipientId;
                });
            
            if (recipientIt != recipients.end()) {
                sendToRecipient(template, *recipientIt, variables);
            }
        }
    }
    
    void setDeliveryStatus(const std::string& notificationId, DeliveryStatus status) {
        deliveryStatuses[notificationId] = status;
        std::cout << "üìä –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è " << notificationId << " –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ " 
                  << static_cast<int>(status) << "\n";
    }
    
    void scheduleNotification(const std::string& templateId,
                             const std::vector<std::string>& recipientIds,
                             const std::chrono::system_clock::time_point& scheduledTime,
                             const std::map<std::string, std::string>& variables) {
        
        std::cout << "‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ " 
                  << std::chrono::duration_cast<std::chrono::seconds>(
                         scheduledTime.time_since_epoch()).count() << "\n";
        
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...
    }
    
    void configureRetryPolicy(const std::string& templateId, 
                             std::chrono::seconds interval, 
                             int maxRetries) {
        auto it = std::find_if(templates.begin(), templates.end(),
            [&templateId](const NotificationTemplate& t) {
                return t.id == templateId;
            });
        
        if (it != templates.end()) {
            it->retryInterval = interval;
            it->maxRetries = maxRetries;
            std::cout << "üîÑ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è " << templateId << "\n";
        }
    }
    
    void setRecipientPreferences(const std::string& recipientId,
                                NotificationType type, 
                                bool enabled) {
        auto it = std::find_if(recipients.begin(), recipients.end(),
            [&recipientId](const NotificationRecipient& r) {
                return r.id == recipientId;
            });
        
        if (it != recipients.end()) {
            it->preferences[type] = enabled;
            std::cout << "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è " << recipientId 
                      << " –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ç–∏–ø–∞ " << static_cast<int>(type) << "\n";
        }
    }
    
    void generateAnalytics() {
        std::cout << "üìà –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n";
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...
    }
    
    void exportRecipients(const std::string& filename) {
        std::cout << "üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ " << filename << "\n";
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞...
    }
    
    void importTemplates(const std::string& filename) {
        std::cout << "üì• –ò–º–ø–æ—Ä—Ç —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ " << filename << "\n";
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞...
    }
    
private:
    void sendToRecipient(const NotificationTemplate& template,
                        const NotificationRecipient& recipient,
                        const std::map<std::string, std::string>& variables) {
        
        std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è " << template.id 
                  << " –ø–æ–ª—É—á–∞—Ç–µ–ª—é " << recipient.id << "\n";
        
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ YAGNI: –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–±–ª—é–¥–∞–µ—Ç YAGNI, —Ä–µ–∞–ª–∏–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
 */
class SimpleNotificationSystem {
private:
    std::vector<std::string> recipients;
    
public:
    void addRecipient(const std::string& email) {
        recipients.push_back(email);
        std::cout << "üë§ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: " << email << "\n";
    }
    
    void sendNotification(const std::string& message) {
        std::cout << "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n";
        std::cout << "–°–æ–æ–±—â–µ–Ω–∏–µ: " << message << "\n";
        
        for (const auto& recipient : recipients) {
            std::cout << "  ‚Üí " << recipient << "\n";
        }
    }
    
    size_t getRecipientCount() const {
        return recipients.size();
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ YAGNI: –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
 */
template<typename K, typename V>
class BadAdvancedCache {
public:
    enum class EvictionPolicy {
        LRU, LFU, FIFO, RANDOM, TTL_BASED, PRIORITY_BASED
    };
    
    enum class PersistenceMode {
        MEMORY_ONLY, FILE_BASED, DATABASE_BASED, DISTRIBUTED
    };
    
    struct CacheStatistics {
        size_t hits;
        size_t misses;
        size_t evictions;
        double hitRatio;
        std::chrono::milliseconds averageAccessTime;
    };
    
private:
    std::map<K, V> cache;
    std::map<K, std::chrono::system_clock::time_point> accessTimes;
    std::map<K, int> accessCounts;
    std::map<K, std::chrono::system_clock::time_point> expirationTimes;
    std::map<K, double> priorities;
    
    size_t maxSize;
    EvictionPolicy policy;
    PersistenceMode persistence;
    CacheStatistics stats;
    bool compressionEnabled;
    bool encryptionEnabled;
    
public:
    BadAdvancedCache(size_t size, EvictionPolicy evictionPolicy, 
                     PersistenceMode persistenceMode = PersistenceMode::MEMORY_ONLY)
        : maxSize(size), policy(evictionPolicy), persistence(persistenceMode),
          compressionEnabled(false), encryptionEnabled(false) {
        
        stats = {0, 0, 0, 0.0, std::chrono::milliseconds(0)};
        std::cout << "üóÑÔ∏è –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫—ç—à —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π " 
                  << static_cast<int>(policy) << "\n";
    }
    
    void set(const K& key, const V& value, 
             std::chrono::seconds ttl = std::chrono::seconds(0),
             double priority = 1.0) {
        
        auto start = std::chrono::high_resolution_clock::now();
        
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        cache[key] = value;
        accessTimes[key] = std::chrono::system_clock::now();
        accessCounts[key] = 1;
        priorities[key] = priority;
        
        if (ttl.count() > 0) {
            expirationTimes[key] = std::chrono::system_clock::now() + ttl;
        }
        
        if (cache.size() > maxSize) {
            evict();
        }
        
        auto end = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
        stats.averageAccessTime = duration;
        
        std::cout << "üíæ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫—ç—à: " << key << "\n";
    }
    
    V get(const K& key, const V& defaultValue = V{}) {
        auto start = std::chrono::high_resolution_clock::now();
        
        auto it = cache.find(key);
        if (it != cache.end()) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL
            auto expIt = expirationTimes.find(key);
            if (expIt != expirationTimes.end()) {
                if (std::chrono::system_clock::now() > expIt->second) {
                    remove(key);
                    stats.misses++;
                    return defaultValue;
                }
            }
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–∞
            accessTimes[key] = std::chrono::system_clock::now();
            accessCounts[key]++;
            
            stats.hits++;
            stats.hitRatio = static_cast<double>(stats.hits) / (stats.hits + stats.misses);
            
            auto end = std::chrono::high_resolution_clock::now();
            auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
            stats.averageAccessTime = duration;
            
            std::cout << "üìñ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –∫—ç—à–∞: " << key << "\n";
            return it->second;
        }
        
        stats.misses++;
        stats.hitRatio = static_cast<double>(stats.hits) / (stats.hits + stats.misses);
        return defaultValue;
    }
    
    void remove(const K& key) {
        cache.erase(key);
        accessTimes.erase(key);
        accessCounts.erase(key);
        expirationTimes.erase(key);
        priorities.erase(key);
        stats.evictions++;
        std::cout << "üóëÔ∏è –ó–Ω–∞—á–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫—ç—à–∞: " << key << "\n";
    }
    
    CacheStatistics getStatistics() const {
        return stats;
    }
    
    void enableCompression(bool enable) {
        compressionEnabled = enable;
        std::cout << "üóúÔ∏è –°–∂–∞—Ç–∏–µ " << (enable ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ") << "\n";
    }
    
    void enableEncryption(bool enable) {
        encryptionEnabled = enable;
        std::cout << "üîê –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ " << (enable ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ") << "\n";
    }
    
    void setEvictionPolicy(EvictionPolicy newPolicy) {
        policy = newPolicy;
        std::cout << "‚öôÔ∏è –ü–æ–ª–∏—Ç–∏–∫–∞ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ " 
                  << static_cast<int>(newPolicy) << "\n";
    }
    
    void persistToFile(const std::string& filename) {
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –≤ —Ñ–∞–π–ª: " << filename << "\n";
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏...
    }
    
    void loadFromFile(const std::string& filename) {
        std::cout << "üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ –∏–∑ —Ñ–∞–π–ª–∞: " << filename << "\n";
        // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏...
    }
    
private:
    void evict() {
        switch (policy) {
            case EvictionPolicy::LRU:
                evictLRU();
                break;
            case EvictionPolicy::LFU:
                evictLFU();
                break;
            case EvictionPolicy::FIFO:
                evictFIFO();
                break;
            case EvictionPolicy::RANDOM:
                evictRandom();
                break;
            case EvictionPolicy::TTL_BASED:
                evictTTL();
                break;
            case EvictionPolicy::PRIORITY_BASED:
                evictPriority();
                break;
        }
    }
    
    void evictLRU() {
        auto oldest = std::min_element(accessTimes.begin(), accessTimes.end(),
            [](const auto& a, const auto& b) {
                return a.second < b.second;
            });
        
        if (oldest != accessTimes.end()) {
            remove(oldest->first);
        }
    }
    
    void evictLFU() {
        auto leastUsed = std::min_element(accessCounts.begin(), accessCounts.end(),
            [](const auto& a, const auto& b) {
                return a.second < b.second;
            });
        
        if (leastUsed != accessCounts.end()) {
            remove(leastUsed->first);
        }
    }
    
    void evictFIFO() {
        if (!accessTimes.empty()) {
            auto first = accessTimes.begin();
            remove(first->first);
        }
    }
    
    void evictRandom() {
        if (!cache.empty()) {
            auto it = cache.begin();
            std::advance(it, rand() % cache.size());
            remove(it->first);
        }
    }
    
    void evictTTL() {
        auto expired = std::find_if(expirationTimes.begin(), expirationTimes.end(),
            [](const auto& pair) {
                return std::chrono::system_clock::now() > pair.second;
            });
        
        if (expired != expirationTimes.end()) {
            remove(expired->first);
        }
    }
    
    void evictPriority() {
        auto lowestPriority = std::min_element(priorities.begin(), priorities.end(),
            [](const auto& a, const auto& b) {
                return a.second < b.second;
            });
        
        if (lowestPriority != priorities.end()) {
            remove(lowestPriority->first);
        }
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ YAGNI: –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–±–ª—é–¥–∞–µ—Ç YAGNI, —Ä–µ–∞–ª–∏–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
 */
template<typename K, typename V>
class SimpleCache {
private:
    std::map<K, V> cache;
    size_t maxSize;
    
public:
    SimpleCache(size_t size = 100) : maxSize(size) {
        std::cout << "üóÑÔ∏è –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—ç—à —Ä–∞–∑–º–µ—Ä–æ–º " << size << "\n";
    }
    
    void set(const K& key, const V& value) {
        cache[key] = value;
        
        if (cache.size() > maxSize) {
            // –ü—Ä–æ—Å—Ç–æ–µ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            cache.erase(cache.begin());
        }
        
        std::cout << "üíæ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " << key << "\n";
    }
    
    V get(const K& key, const V& defaultValue = V{}) {
        auto it = cache.find(key);
        if (it != cache.end()) {
            std::cout << "üìñ –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: " << key << "\n";
            return it->second;
        }
        
        std::cout << "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: " << key << "\n";
        return defaultValue;
    }
    
    bool exists(const K& key) const {
        return cache.find(key) != cache.end();
    }
    
    size_t size() const {
        return cache.size();
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –ü–†–ï–ñ–î–ï–í–†–ï–ú–ï–ù–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –í –°–ò–°–¢–ï–ú–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ YAGNI: –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class BadLogger {
public:
    enum class LogLevel {
        TRACE, DEBUG, INFO, WARN, ERROR, FATAL
    };
    
    enum class OutputFormat {
        PLAIN_TEXT, JSON, XML, BINARY, CUSTOM
    };
    
    enum class CompressionType {
        NONE, GZIP, BZIP2, LZ4, SNAPPY
    };
    
    struct LogEntry {
        LogLevel level;
        std::string message;
        std::string source;
        std::string threadId;
        std::chrono::system_clock::time_point timestamp;
        std::map<std::string, std::string> metadata;
        std::string correlationId;
    };
    
private:
    std::vector<std::function<void(const LogEntry&)>> handlers;
    std::map<std::string, LogLevel> categoryLevels;
    OutputFormat format;
    CompressionType compression;
    bool asyncEnabled;
    size_t bufferSize;
    std::chrono::seconds flushInterval;
    
public:
    BadLogger(OutputFormat outputFormat = OutputFormat::PLAIN_TEXT,
              CompressionType compType = CompressionType::NONE,
              bool async = false)
        : format(outputFormat), compression(compType), asyncEnabled(async),
          bufferSize(1024), flushInterval(std::chrono::seconds(5)) {
        
        std::cout << "üìù –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ª–æ–≥–≥–µ—Ä —Å —Ñ–æ—Ä–º–∞—Ç–æ–º " 
                  << static_cast<int>(format) << "\n";
    }
    
    void addHandler(std::function<void(const LogEntry&)> handler) {
        handlers.push_back(handler);
        std::cout << "‚ûï –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤\n";
    }
    
    void setCategoryLevel(const std::string& category, LogLevel level) {
        categoryLevels[category] = level;
        std::cout << "üìä –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " << category 
                  << " —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " << static_cast<int>(level) << "\n";
    }
    
    void log(LogLevel level, const std::string& message, 
             const std::string& category = "default") {
        
        LogEntry entry;
        entry.level = level;
        entry.message = message;
        entry.source = category;
        entry.timestamp = std::chrono::system_clock::now();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        auto it = categoryLevels.find(category);
        if (it != categoryLevels.end() && level < it->second) {
            return; // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for (const auto& handler : handlers) {
            handler(entry);
        }
        
        std::cout << "üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: [" << static_cast<int>(level) 
                  << "] " << message << "\n";
    }
    
    void setOutputFormat(OutputFormat newFormat) {
        format = newFormat;
        std::cout << "üé® –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ " << static_cast<int>(newFormat) << "\n";
    }
    
    void setCompression(CompressionType compType) {
        compression = compType;
        std::cout << "üóúÔ∏è –°–∂–∞—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ " << static_cast<int>(compType) << "\n";
    }
    
    void enableAsync(bool enable) {
        asyncEnabled = enable;
        std::cout << "‚ö° –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ " 
                  << (enable ? "–≤–∫–ª—é—á–µ–Ω–æ" : "–≤—ã–∫–ª—é—á–µ–Ω–æ") << "\n";
    }
    
    void setBufferSize(size_t size) {
        bufferSize = size;
        std::cout << "üì¶ –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " << size << "\n";
    }
    
    void setFlushInterval(std::chrono::seconds interval) {
        flushInterval = interval;
        std::cout << "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ " 
                  << interval.count() << " —Å–µ–∫—É–Ω–¥\n";
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ YAGNI: –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–±–ª—é–¥–∞–µ—Ç YAGNI, —Ä–µ–∞–ª–∏–∑—É—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
 */
class SimpleLogger {
public:
    void log(const std::string& message) {
        auto now = std::chrono::system_clock::now();
        auto time_t = std::chrono::system_clock::to_time_t(now);
        
        std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                  << "] " << message << "\n";
    }
    
    void error(const std::string& message) {
        log("ERROR: " + message);
    }
    
    void info(const std::string& message) {
        log("INFO: " + message);
    }
};

// ============================================================================
// –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê
// ============================================================================

void demonstrateBadYAGNI() {
    std::cout << "‚ùå –ù–ê–†–£–®–ï–ù–ò–ï YAGNI - –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "–°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n";
    BadNotificationSystem badSystem;
    
    BadNotificationSystem::NotificationTemplate template1;
    template1.id = "welcome";
    template1.subject = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å";
    template1.body = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!";
    template1.type = BadNotificationSystem::NotificationType::EMAIL;
    template1.priority = BadNotificationSystem::Priority::NORMAL;
    template1.maxRetries = 3;
    
    badSystem.addTemplate(template1);
    badSystem.sendNotification("welcome", {"user1@example.com"}, {});
    badSystem.generateAnalytics(); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    badSystem.exportRecipients("recipients.csv"); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    
    std::cout << "\n–°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    BadAdvancedCache<std::string, std::string> badCache(5, 
        BadAdvancedCache<std::string, std::string>::EvictionPolicy::LRU);
    
    badCache.set("key1", "value1", std::chrono::seconds(3600), 1.0);
    badCache.set("key2", "value2", std::chrono::seconds(3600), 2.0);
    badCache.enableCompression(true); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    badCache.enableEncryption(true); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    badCache.persistToFile("cache.dat"); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    
    std::cout << "\n–°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    BadLogger badLogger(BadLogger::OutputFormat::JSON, 
                       BadLogger::CompressionType::GZIP, true);
    
    badLogger.setCategoryLevel("database", BadLogger::LogLevel::INFO);
    badLogger.setBufferSize(2048); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    badLogger.setFlushInterval(std::chrono::seconds(10)); // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    badLogger.log(BadLogger::LogLevel::INFO, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ", "system");
}

void demonstrateGoodYAGNI() {
    std::cout << "\n‚úÖ –°–û–ë–õ–Æ–î–ï–ù–ò–ï YAGNI - –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n";
    SimpleNotificationSystem simpleSystem;
    simpleSystem.addRecipient("user@example.com");
    simpleSystem.addRecipient("admin@example.com");
    simpleSystem.sendNotification("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
    std::cout << "–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: " << simpleSystem.getRecipientCount() << "\n";
    
    std::cout << "\n–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    SimpleCache<std::string, std::string> simpleCache(5);
    simpleCache.set("key1", "value1");
    simpleCache.set("key2", "value2");
    simpleCache.set("key3", "value3");
    std::cout << "–†–∞–∑–º–µ—Ä –∫—ç—à–∞: " << simpleCache.size() << "\n";
    std::cout << "Key1: " << simpleCache.get("key1") << "\n";
    
    std::cout << "\n–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    SimpleLogger simpleLogger;
    simpleLogger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ");
    simpleLogger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
    simpleLogger.log("–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
}

void analyzeTradeOffs() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–†–û–ú–ò–°–°–û–í YAGNI:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìä –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n";
    std::cout << "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞\n";
    std::cout << "‚Ä¢ –ú–µ–Ω—å—à–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫–æ–¥–∞\n";
    std::cout << "‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ú–µ–Ω—å—à–µ –±–∞–≥–æ–≤\n";
    std::cout << "‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤\n\n";
    
    std::cout << "‚ö†Ô∏è –ù–ï–î–û–°–¢–ê–¢–ö–ò:\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞\n";
    std::cout << "‚Ä¢ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n";
    std::cout << "‚Ä¢ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ –í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–ª–≥–∏\n\n";
    
    std::cout << "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
    std::cout << "‚Ä¢ –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ –û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è\n";
    std::cout << "‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–æ—Å—Ç–∞\n";
}

int main() {
    std::cout << "üéØ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–ò–ù–¶–ò–ü–ê YAGNI (You Aren't Gonna Need It)\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –£–≥–ª—É–±–ª–µ–Ω–Ω–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–Ω–∏—è –Ω–µ–Ω—É–∂–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n\n";
    
    demonstrateBadYAGNI();
    demonstrateGoodYAGNI();
    analyzeTradeOffs();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "YAGNI: ‚àÄF ‚àà Features: F ‚àà CurrentRequirements ‚à® F ‚àà ImmediateNeeds\n";
    std::cout << "–≥–¥–µ CurrentRequirements = {f | f —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ–π—á–∞—Å}\n";
    std::cout << "     ImmediateNeeds = {f | f –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –±—É–¥—É—â–µ–º}\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–∫–∞ –æ–Ω–∞ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è\n";
    std::cout << "2. YAGNI —É—Å–∫–æ—Ä—è–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Å–Ω–∏–∂–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å\n";
    std::cout << "3. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –±–∞–ª–∞–Ω—Å–∞ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã\n";
    std::cout << "4. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
