/**
 * @file principles_comparison.cpp
 * @brief –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ DRY, KISS, YAGNI –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
 * @author Senior C++ Developer
 * @date 2024
 * 
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ DRY, KISS, YAGNI
 * –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –æ–Ω–∏ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞.
 */

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <memory>
#include <chrono>
#include <iomanip>

/**
 * @brief –ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã DRY, KISS –∏ YAGNI —á–∞—Å—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç –∏ –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å:
 * - DRY –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Å KISS)
 * - KISS –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—é (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ —Å DRY)
 * - YAGNI –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å –∫–∞–∫ DRY, —Ç–∞–∫ –∏ KISS
 */

// ============================================================================
// –ü–†–ò–ú–ï–† 1: –ö–û–ù–§–õ–ò–ö–¢ –ú–ï–ñ–î–£ DRY –ò KISS
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ KISS —Ä–∞–¥–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è DRY
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ DRY
 * –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø KISS.
 */
class OverDRYExample {
private:
    // –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    template<typename T>
    class GenericProcessor {
    public:
        virtual ~GenericProcessor() = default;
        virtual T process(const T& input) = 0;
        virtual std::string getProcessorType() const = 0;
    };
    
    template<typename T>
    class ValidationProcessor : public GenericProcessor<T> {
    public:
        T process(const T& input) override {
            // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            std::cout << "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è " << this->getProcessorType() << ": " << input << "\n";
            return input;
        }
    };
    
    template<typename T>
    class TransformationProcessor : public GenericProcessor<T> {
    public:
        T process(const T& input) override {
            // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
            std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è " << this->getProcessorType() << ": " << input << "\n";
            return input;
        }
    };
    
    template<typename T>
    class PersistenceProcessor : public GenericProcessor<T> {
    public:
        T process(const T& input) override {
            // –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ " << this->getProcessorType() << ": " << input << "\n";
            return input;
        }
    };
    
    // –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    class StringValidationProcessor : public ValidationProcessor<std::string> {
    public:
        std::string getProcessorType() const override { return "String"; }
    };
    
    class IntValidationProcessor : public ValidationProcessor<int> {
    public:
        std::string getProcessorType() const override { return "Integer"; }
    };
    
    class StringTransformationProcessor : public TransformationProcessor<std::string> {
    public:
        std::string getProcessorType() const override { return "String"; }
    };
    
    class IntTransformationProcessor : public TransformationProcessor<int> {
    public:
        std::string getProcessorType() const override { return "Integer"; }
    };
    
    // –°–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞–º–∏
    std::map<std::string, std::unique_ptr<GenericProcessor<std::string>>> stringProcessors;
    std::map<std::string, std::unique_ptr<GenericProcessor<int>>> intProcessors;
    
public:
    OverDRYExample() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        stringProcessors["validation"] = std::make_unique<StringValidationProcessor>();
        stringProcessors["transformation"] = std::make_unique<StringTransformationProcessor>();
        
        intProcessors["validation"] = std::make_unique<IntValidationProcessor>();
        intProcessors["transformation"] = std::make_unique<IntTransformationProcessor>();
        
        std::cout << "üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ KISS —Ä–∞–¥–∏ DRY)\n";
    }
    
    std::string processString(const std::string& input, const std::string& operation) {
        auto it = stringProcessors.find(operation);
        if (it != stringProcessors.end()) {
            return it->second->process(input);
        }
        return input;
    }
    
    int processInt(int input, const std::string& operation) {
        auto it = intProcessors.find(operation);
        if (it != intProcessors.end()) {
            return it->second->process(input);
        }
        return input;
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ KISS —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å –ø—Ä–∏–µ–º–ª–µ–º—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
 */
class SimpleExample {
public:
    // –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    static std::string validateString(const std::string& input) {
        std::cout << "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏: " << input << "\n";
        return input;
    }
    
    static int validateInt(int input) {
        std::cout << "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞: " << input << "\n";
        return input;
    }
    
    static std::string transformString(const std::string& input) {
        std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏: " << input << "\n";
        return input;
    }
    
    static int transformInt(int input) {
        std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —á–∏—Å–ª–∞: " << input << "\n";
        return input;
    }
    
    static void processString(const std::string& input) {
        std::string validated = validateString(input);
        std::string transformed = transformString(validated);
        std::cout << "‚úÖ –°—Ç—Ä–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: " << transformed << "\n";
    }
    
    static void processInt(int input) {
        int validated = validateInt(input);
        int transformed = transformInt(validated);
        std::cout << "‚úÖ –ß–∏—Å–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " << transformed << "\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 2: –ö–û–ù–§–õ–ò–ö–¢ –ú–ï–ñ–î–£ YAGNI –ò DRY
// ============================================================================

/**
 * @brief –ù–∞—Ä—É—à–µ–Ω–∏–µ YAGNI —Ä–∞–¥–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è DRY
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
 * –º–æ–∂–µ—Ç –Ω–∞—Ä—É—à–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø YAGNI.
 */
class OverDRYForYAGNI {
private:
    // –°–ª–æ–∂–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    class AbstractDataProcessor {
    public:
        virtual ~AbstractDataProcessor() = default;
        virtual void process() = 0;
        virtual void validate() = 0;
        virtual void transform() = 0;
        virtual void persist() = 0;
        virtual void cleanup() = 0;
    };
    
    class UserDataProcessor : public AbstractDataProcessor {
    private:
        std::string data;
    public:
        UserDataProcessor(const std::string& userData) : data(userData) {}
        
        void process() override {
            std::cout << "üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: " << data << "\n";
        }
        
        void validate() override {
            std::cout << "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        }
        
        void transform() override {
            std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        }
        
        void persist() override {
            std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        }
        
        void cleanup() override {
            std::cout << "üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        }
    };
    
    class ProductDataProcessor : public AbstractDataProcessor {
    private:
        std::string data;
    public:
        ProductDataProcessor(const std::string& productData) : data(productData) {}
        
        void process() override {
            std::cout << "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: " << data << "\n";
        }
        
        void validate() override {
            std::cout << "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        }
        
        void transform() override {
            std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        }
        
        void persist() override {
            std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        }
        
        void cleanup() override {
            std::cout << "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        }
    };
    
    std::vector<std::unique_ptr<AbstractDataProcessor>> processors;
    
public:
    OverDRYForYAGNI() {
        std::cout << "üèóÔ∏è –°–æ–∑–¥–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ (–Ω–∞—Ä—É—à–µ–Ω–∏–µ YAGNI —Ä–∞–¥–∏ DRY)\n";
    }
    
    void addUserProcessor(const std::string& data) {
        processors.push_back(std::make_unique<UserDataProcessor>(data));
    }
    
    void addProductProcessor(const std::string& data) {
        processors.push_back(std::make_unique<ProductDataProcessor>(data));
    }
    
    void processAll() {
        for (const auto& processor : processors) {
            processor->validate();
            processor->transform();
            processor->persist();
            processor->cleanup();
        }
    }
};

/**
 * @brief –°–æ–±–ª—é–¥–µ–Ω–∏–µ YAGNI —Å –ø—Ä–∏–µ–º–ª–µ–º—ã–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–µ–π.
 */
class SimpleYAGNIExample {
public:
    static void processUserData(const std::string& data) {
        std::cout << "üë§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: " << data << "\n";
        std::cout << "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
        std::cout << "üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n";
    }
    
    static void processProductData(const std::string& data) {
        std::cout << "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞: " << data << "\n";
        std::cout << "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        std::cout << "üîÑ –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        std::cout << "üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
        std::cout << "üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞\n";
    }
};

// ============================================================================
// –ü–†–ò–ú–ï–† 3: –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê –í–°–ï–• –ü–†–ò–ù–¶–ò–ü–û–í
// ============================================================================

/**
 * @brief –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å –≤—Å–µ —Ç—Ä–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞
 * –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.
 */
class BalancedApproach {
public:
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ KISS)
    class Validator {
    public:
        static bool isValidEmail(const std::string& email) {
            return !email.empty() && email.find('@') != std::string::npos;
        }
        
        static bool isValidPhone(const std::string& phone) {
            return !phone.empty() && phone.length() >= 7;
        }
        
        static bool isValidPassword(const std::string& password) {
            return password.length() >= 8;
        }
    };
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ YAGNI)
    class NotificationService {
    public:
        static void sendEmail(const std::string& email, const std::string& message) {
            std::cout << "üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ " << email << ": " << message << "\n";
        }
        
        static void sendSMS(const std::string& phone, const std::string& message) {
            std::cout << "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ " << phone << ": " << message << "\n";
        }
    };
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–±–ª—é–¥–µ–Ω–∏–µ DRY)
    class Logger {
    private:
        static void log(const std::string& level, const std::string& message) {
            auto now = std::chrono::system_clock::now();
            auto time_t = std::chrono::system_clock::to_time_t(now);
            std::cout << "[" << std::put_time(std::localtime(&time_t), "%Y-%m-%d %H:%M:%S") 
                      << "] [" << level << "] " << message << "\n";
        }
        
    public:
        static void info(const std::string& message) {
            log("INFO", message);
        }
        
        static void error(const std::string& message) {
            log("ERROR", message);
        }
        
        static void warn(const std::string& message) {
            log("WARN", message);
        }
    };
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    class UserService {
    public:
        static void registerUser(const std::string& email, const std::string& phone, 
                                const std::string& password) {
            
            Logger::info("–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è)
            if (!Validator::isValidEmail(email)) {
                Logger::error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email: " + email);
                return;
            }
            
            if (!Validator::isValidPhone(phone)) {
                Logger::error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: " + phone);
                return;
            }
            
            if (!Validator::isValidPassword(password)) {
                Logger::error("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å");
                return;
            }
            
            // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞)
            Logger::info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " + email);
            
            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ)
            NotificationService::sendEmail(email, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!");
            NotificationService::sendSMS(phone, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
        }
    };
};

// ============================================================================
// –ê–ù–ê–õ–ò–ó –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–†–ò–ù–¶–ò–ü–û–í
// ============================================================================

void analyzePrincipleInteractions() {
    std::cout << "\nüî¨ –ê–ù–ê–õ–ò–ó –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –ü–†–ò–ù–¶–ò–ü–û–í:\n";
    std::cout << std::string(60, '-') << "\n";
    
    std::cout << "üìä –ö–û–ù–§–õ–ò–ö–¢–´:\n";
    std::cout << "‚Ä¢ DRY vs KISS: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–µ—Ç —É—Å–ª–æ–∂–Ω–∏—Ç—å –∫–æ–¥\n";
    std::cout << "‚Ä¢ DRY vs YAGNI: –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è\n";
    std::cout << "‚Ä¢ KISS vs YAGNI: –ü—Ä–æ—Å—Ç–æ—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é\n\n";
    
    std::cout << "ü§ù –°–ò–ù–ï–†–ì–ò–Ø:\n";
    std::cout << "‚Ä¢ DRY + KISS: –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n";
    std::cout << "‚Ä¢ KISS + YAGNI: –ü—Ä–æ—Å—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π\n";
    std::cout << "‚Ä¢ DRY + YAGNI: –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n";
    
    std::cout << "‚öñÔ∏è –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ê:\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –∫–∞–∫ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –∞ –Ω–µ –¥–æ–≥–º—É\n";
    std::cout << "‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π\n";
    std::cout << "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n";
}

void demonstrateConflicts() {
    std::cout << "\n‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–û–ù–§–õ–ò–ö–¢–û–í:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "–ö–æ–Ω—Ñ–ª–∏–∫—Ç DRY vs KISS:\n";
    OverDRYExample overDRY;
    overDRY.processString("test", "validation");
    overDRY.processInt(42, "transformation");
    
    std::cout << "\n–ö–æ–Ω—Ñ–ª–∏–∫—Ç YAGNI vs DRY:\n";
    OverDRYForYAGNI overDRYForYAGNI;
    overDRYForYAGNI.addUserProcessor("user data");
    overDRYForYAGNI.addProductProcessor("product data");
    overDRYForYAGNI.processAll();
}

void demonstrateBalancedApproach() {
    std::cout << "\n‚úÖ –°–ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –ü–û–î–•–û–î:\n";
    std::cout << std::string(50, '-') << "\n";
    
    BalancedApproach::UserService::registerUser(
        "user@example.com", 
        "+1234567890", 
        "securepassword"
    );
    
    std::cout << "\n–ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (KISS):\n";
    BalancedApproach::SimpleExample::processString("hello");
    BalancedApproach::SimpleExample::processInt(123);
    
    std::cout << "\n–ü—Ä–æ—Å—Ç–æ–π YAGNI –ø–æ–¥—Ö–æ–¥:\n";
    BalancedApproach::SimpleYAGNIExample::processUserData("user info");
    BalancedApproach::SimpleYAGNIExample::processProductData("product info");
}

void provideRecommendations() {
    std::cout << "\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ë–ê–õ–ê–ù–°–ò–†–û–í–ö–ï:\n";
    std::cout << std::string(50, '-') << "\n";
    
    std::cout << "üìã –ü–†–ò–û–†–ò–¢–ï–¢–´ –í –†–ê–ó–ù–´–• –°–¶–ï–ù–ê–†–ò–Ø–•:\n";
    std::cout << "‚Ä¢ –ü—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: KISS > YAGNI > DRY\n";
    std::cout << "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥: DRY > KISS > YAGNI\n";
    std::cout << "‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: KISS > DRY > YAGNI\n";
    std::cout << "‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: DRY > YAGNI > KISS\n\n";
    
    std::cout << "üîß –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´:\n";
    std::cout << "‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è (KISS)\n";
    std::cout << "‚Ä¢ –£—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Ç—Ä–µ—Ç—å–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ (DRY)\n";
    std::cout << "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (YAGNI)\n";
    std::cout << "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏—Ç–µ –∫–æ–¥\n";
    std::cout << "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π\n\n";
    
    std::cout << "üìä –ú–ï–¢–†–ò–ö–ò –î–õ–Ø –û–¶–ï–ù–ö–ò:\n";
    std::cout << "‚Ä¢ Cyclomatic Complexity (KISS)\n";
    std::cout << "‚Ä¢ Code Duplication Percentage (DRY)\n";
    std::cout << "‚Ä¢ Feature Usage Statistics (YAGNI)\n";
    std::cout << "‚Ä¢ Time to Understand Code (KISS)\n";
    std::cout << "‚Ä¢ Maintenance Cost (–≤—Å–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã)\n";
}

int main() {
    std::cout << "üéØ –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–ò–ù–¶–ò–ü–û–í DRY, KISS, YAGNI\n";
    std::cout << "–ê–≤—Ç–æ—Ä: Senior C++ Developer\n";
    std::cout << "–¶–µ–ª—å: –ê–Ω–∞–ª–∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏\n\n";
    
    demonstrateConflicts();
    demonstrateBalancedApproach();
    analyzePrincipleInteractions();
    provideRecommendations();
    
    std::cout << "\nüìö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–û–°–ù–û–í–ê–ù–ò–ï:\n";
    std::cout << "DRY: ‚àÄK ‚àà Knowledge: |Representations(K)| = 1\n";
    std::cout << "KISS: Complexity(Code) = Œ£(Complexity(Component)) ‚Üí min\n";
    std::cout << "YAGNI: ‚àÄF ‚àà Features: F ‚àà CurrentRequirements ‚à® F ‚àà ImmediateNeeds\n\n";
    
    std::cout << "üí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:\n";
    std::cout << "1. –ü—Ä–∏–Ω—Ü–∏–ø—ã –º–æ–≥—É—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º\n";
    std::cout << "2. –í–∞–∂–µ–Ω –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏\n";
    std::cout << "3. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã\n";
    std::cout << "4. –ó–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –≤–∞–∂–Ω–µ–µ —Å–ª–µ–ø–æ–≥–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø—Ä–∏–Ω—Ü–∏–ø–∞–º\n\n";
    
    std::cout << "üî¨ –ü—Ä–∏–Ω—Ü–∏–ø—ã - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö!\n";
    
    return 0;
}
