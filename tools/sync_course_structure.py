#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞.

–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π COURSE_STRUCTURE_COMPLETE.md.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python sync_course_structure.py [--output FILE] [--check-only]

–û–ø—Ü–∏–∏:
    --output FILE       –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: COURSE_STRUCTURE_COMPLETE.md)
    --check-only        –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª
    --verbose           –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    --json              –í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
"""

import os
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Set, Tuple
from dataclasses import dataclass, field, asdict
from collections import defaultdict

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞)
PROJECT_ROOT = Path(__file__).parent.parent


@dataclass
class PatternStatus:
    """–°—Ç–∞—Ç—É—Å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
    
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    module_number: int
    module_name: str
    lesson_number: int
    lesson_name: str
    pattern_name: str
    directory: Path
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    has_readme: bool = False
    has_cmakelists: bool = False
    
    # Security —Ñ–∞–π–ª—ã
    has_security_analysis: bool = False
    has_security_poster: bool = False
    has_vulnerabilities: bool = False
    has_exploits: bool = False
    has_secure_alternatives: bool = False
    
    # C++23 —Ñ–∞–π–ª—ã
    has_cpp23_comparison: bool = False
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    main_cpp_files: List[str] = field(default_factory=list)
    other_files: List[str] = field(default_factory=list)
    
    def completion_percentage(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
        # –í–µ—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        weights = {
            'has_readme': 10,
            'has_cmakelists': 10,
            'has_security_analysis': 15,
            'has_security_poster': 15,
            'has_vulnerabilities': 15,
            'has_exploits': 10,
            'has_secure_alternatives': 15,
            'has_cpp23_comparison': 10,
        }
        
        total_weight = sum(weights.values())
        achieved_weight = sum(
            weight for attr, weight in weights.items() 
            if getattr(self, attr)
        )
        
        return (achieved_weight / total_weight) * 100
    
    def get_status_emoji(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏."""
        completion = self.completion_percentage()
        if completion >= 90:
            return "‚úÖ"
        elif completion >= 70:
            return "üü¢"
        elif completion >= 50:
            return "üü°"
        elif completion >= 30:
            return "üü†"
        else:
            return "üî¥"
    
    def get_status_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å."""
        completion = self.completion_percentage()
        if completion >= 90:
            return "–ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù"
        elif completion >= 70:
            return "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ó–ê–í–ï–†–®–Å–ù"
        elif completion >= 50:
            return "–ß–ê–°–¢–ò–ß–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù"
        elif completion >= 30:
            return "–ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê"
        else:
            return "–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê"


@dataclass
class ModuleStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥—É–ª—é."""
    module_number: int
    module_name: str
    patterns: List[PatternStatus] = field(default_factory=list)
    
    def total_patterns(self) -> int:
        return len(self.patterns)
    
    def average_completion(self) -> float:
        if not self.patterns:
            return 0.0
        return sum(p.completion_percentage() for p in self.patterns) / len(self.patterns)


class CourseStructureScanner:
    """–°–∫–∞–Ω–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞."""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
    MODULES = {
        '01-basics': (1, '–û—Å–Ω–æ–≤—ã C++'),
        '02-principles': (2, '–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'),
        '03-creational': (3, '–ü–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'),
        '04-structural': (4, '–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'),
        '05-behavioral': (5, '–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã'),
        '06-modern-cpp': (6, '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π C++'),
        '07-concurrency': (7, '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏'),
        '08-high-load': (8, '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º'),
        '09-performance': (9, '–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
    }
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.patterns: List[PatternStatus] = []
        self.modules: Dict[int, ModuleStats] = {}
    
    def scan(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞."""
        print(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        
        for module_dir, (module_num, module_name) in self.MODULES.items():
            module_path = self.project_root / module_dir
            
            if not module_path.exists():
                print(f"‚ö†Ô∏è  –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {module_dir}")
                continue
            
            print(f"üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è {module_num}: {module_name}")
            module_stats = ModuleStats(module_num, module_name)
            
            # –ò—â–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ (lesson_*)
            for lesson_dir in sorted(module_path.glob('lesson_*')):
                if not lesson_dir.is_dir():
                    continue
                
                pattern_status = self._scan_lesson(module_num, module_name, lesson_dir)
                if pattern_status:
                    self.patterns.append(pattern_status)
                    module_stats.patterns.append(pattern_status)
            
            if module_stats.patterns:
                self.modules[module_num] = module_stats
        
        print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {len(self.patterns)}")
    
    def _scan_lesson(self, module_num: int, module_name: str, lesson_dir: Path) -> PatternStatus:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —É—Ä–æ–∫–∞."""
        # –ü–∞—Ä—Å–∏–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: lesson_X_Y_pattern_name
        parts = lesson_dir.name.split('_')
        if len(parts) < 3:
            return None
        
        lesson_num = int(parts[1])
        pattern_name = '_'.join(parts[3:]) if len(parts) > 3 else parts[2]
        lesson_name = pattern_name.replace('_', ' ').title()
        
        status = PatternStatus(
            module_number=module_num,
            module_name=module_name,
            lesson_number=lesson_num,
            lesson_name=lesson_name,
            pattern_name=pattern_name,
            directory=lesson_dir.relative_to(self.project_root)
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        status.has_readme = (lesson_dir / 'README.md').exists()
        status.has_cmakelists = (lesson_dir / 'CMakeLists.txt').exists()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º security —Ñ–∞–π–ª—ã
        status.has_security_analysis = (lesson_dir / 'SECURITY_ANALYSIS.md').exists()
        status.has_vulnerabilities = any(lesson_dir.glob('*_vulnerabilities.cpp'))
        status.has_secure_alternatives = any(lesson_dir.glob('secure_*_alternatives.cpp'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º exploits –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        exploits_dir = lesson_dir / 'exploits'
        status.has_exploits = exploits_dir.exists() and any(exploits_dir.glob('*.cpp'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º security poster (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
        poster_patterns = [
            f'*SECURITY_POSTER.md',
            f'{pattern_name.upper()}_SECURITY_POSTER.md',
        ]
        status.has_security_poster = any(
            lesson_dir.glob(pattern) for pattern in poster_patterns
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º C++23 comparison —Ñ–∞–π–ª—ã
        cpp23_patterns = [
            f'*_cpp23_comparison.cpp',
            f'*_cpp23_*.cpp',
        ]
        status.has_cpp23_comparison = any(
            lesson_dir.glob(pattern) for pattern in cpp23_patterns
        )
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ .cpp —Ñ–∞–π–ª–æ–≤
        for cpp_file in lesson_dir.glob('*.cpp'):
            if 'vulnerabilities' not in cpp_file.name and \
               'secure_' not in cpp_file.name and \
               'cpp23' not in cpp_file.name:
                status.main_cpp_files.append(cpp_file.name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
        for md_file in lesson_dir.glob('*.md'):
            if md_file.name not in ['README.md', 'SECURITY_ANALYSIS.md'] and \
               'SECURITY_POSTER' not in md_file.name:
                status.other_files.append(md_file.name)
        
        return status
    
    def get_overall_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        total_patterns = len(self.patterns)
        avg_completion = sum(p.completion_percentage() for p in self.patterns) / total_patterns if total_patterns else 0
        
        # –ü–æ–¥—Å—á—ë—Ç —Ñ–∞–π–ª–æ–≤
        total_files = {
            'readme': sum(1 for p in self.patterns if p.has_readme),
            'cmakelists': sum(1 for p in self.patterns if p.has_cmakelists),
            'security_analysis': sum(1 for p in self.patterns if p.has_security_analysis),
            'security_poster': sum(1 for p in self.patterns if p.has_security_poster),
            'vulnerabilities': sum(1 for p in self.patterns if p.has_vulnerabilities),
            'exploits': sum(1 for p in self.patterns if p.has_exploits),
            'secure_alternatives': sum(1 for p in self.patterns if p.has_secure_alternatives),
            'cpp23_comparison': sum(1 for p in self.patterns if p.has_cpp23_comparison),
        }
        
        return {
            'total_patterns': total_patterns,
            'average_completion': avg_completion,
            'files': total_files,
            'modules': len(self.modules),
        }
    
    def generate_markdown(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç markdown –æ—Ç—á—ë—Ç."""
        lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        lines.append("# üìÅ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        lines.append("")
        lines.append(f"**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        lines.append(f"**–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä**: `tools/sync_course_structure.py`")
        lines.append("")
        lines.append("---")
        lines.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.get_overall_stats()
        lines.append("## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        lines.append("")
        lines.append(f"**–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤**: {stats['total_patterns']}")
        lines.append(f"**–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å**: {stats['average_completion']:.1f}%")
        lines.append(f"**–ú–æ–¥—É–ª–µ–π**: {stats['modules']}")
        lines.append("")
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        lines.append("### –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        lines.append("")
        lines.append("| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç | –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ | –ü—Ä–æ—Ü–µ–Ω—Ç |")
        lines.append("|-----------|-------------|---------|")
        
        for component, count in stats['files'].items():
            percentage = (count / stats['total_patterns']) * 100
            emoji = "‚úÖ" if percentage >= 90 else "üü°" if percentage >= 70 else "üî¥"
            component_name = component.replace('_', ' ').title()
            lines.append(f"| {component_name} | {count}/{stats['total_patterns']} | {emoji} {percentage:.0f}% |")
        
        lines.append("")
        lines.append("---")
        lines.append("")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º
        lines.append("## üìö –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º")
        lines.append("")
        
        for module_num in sorted(self.modules.keys()):
            module = self.modules[module_num]
            avg_comp = module.average_completion()
            
            lines.append(f"### –ú–æ–¥—É–ª—å {module_num}: {module.module_name}")
            lines.append("")
            lines.append(f"**–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤**: {module.total_patterns()} | **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å**: {avg_comp:.1f}%")
            lines.append("")
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ–¥—É–ª—è
            lines.append("| # | –ü–∞—Ç—Ç–µ—Ä–Ω | –°—Ç–∞—Ç—É—Å | –ó–∞–≤–µ—Ä—à–µ–Ω–æ | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã |")
            lines.append("|---|---------|--------|-----------|------------|")
            
            for pattern in module.patterns:
                components = []
                if pattern.has_readme: components.append("üìñ")
                if pattern.has_security_analysis: components.append("üîí")
                if pattern.has_security_poster: components.append("üìã")
                if pattern.has_vulnerabilities: components.append("‚ö†Ô∏è")
                if pattern.has_exploits: components.append("üí£")
                if pattern.has_secure_alternatives: components.append("‚úÖ")
                if pattern.has_cpp23_comparison: components.append("üöÄ")
                
                components_str = " ".join(components) if components else "‚Äî"
                
                lines.append(
                    f"| {pattern.lesson_number} | {pattern.lesson_name} | "
                    f"{pattern.get_status_emoji()} {pattern.get_status_text()} | "
                    f"{pattern.completion_percentage():.0f}% | {components_str} |"
                )
            
            lines.append("")
            
            # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
            for pattern in module.patterns:
                self._add_pattern_details(lines, pattern)
            
            lines.append("---")
            lines.append("")
        
        # –õ–µ–≥–µ–Ω–¥–∞
        lines.append("## üìñ –õ–µ–≥–µ–Ω–¥–∞")
        lines.append("")
        lines.append("### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        lines.append("- üìñ README.md - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Ä–æ–∫–∞")
        lines.append("- üîí SECURITY_ANALYSIS.md - –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        lines.append("- üìã *_SECURITY_POSTER.md - security –ø–ª–∞–∫–∞—Ç")
        lines.append("- ‚ö†Ô∏è *_vulnerabilities.cpp - —É—è–∑–≤–∏–º—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
        lines.append("- üí£ exploits/*_exploits.cpp - —ç–∫—Å–ø–ª–æ–∏—Ç—ã")
        lines.append("- ‚úÖ secure_*_alternatives.cpp - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã")
        lines.append("- üöÄ *_cpp23_comparison.cpp - C++23 —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
        lines.append("")
        
        lines.append("### –°—Ç–∞—Ç—É—Å—ã")
        lines.append("- ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù (‚â•90%)")
        lines.append("- üü¢ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ó–ê–í–ï–†–®–Å–ù (70-89%)")
        lines.append("- üü° –ß–ê–°–¢–ò–ß–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù (50-69%)")
        lines.append("- üü† –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (30-49%)")
        lines.append("- üî¥ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (<30%)")
        lines.append("")
        
        lines.append("---")
        lines.append("")
        lines.append(f"*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")
        
        return "\n".join(lines)
    
    def _add_pattern_details(self, lines: List[str], pattern: PatternStatus) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –æ—Ç—á—ë—Ç."""
        lines.append(f"#### –£—Ä–æ–∫ {pattern.module_number}.{pattern.lesson_number}: {pattern.lesson_name} "
                    f"{pattern.get_status_emoji()} ({pattern.completion_percentage():.0f}%)")
        lines.append("")
        
        # –§–∞–π–ª—ã –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        lines.append("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞:**")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        lines.append(f"- README.md {'‚úÖ' if pattern.has_readme else '‚ùå'}")
        lines.append(f"- CMakeLists.txt {'‚úÖ' if pattern.has_cmakelists else '‚ùå'}")
        
        # Main cpp files
        if pattern.main_cpp_files:
            for cpp_file in sorted(pattern.main_cpp_files):
                lines.append(f"- {cpp_file} ‚úÖ")
        
        # Security components
        lines.append("")
        lines.append("**Security:**")
        lines.append(f"- SECURITY_ANALYSIS.md {'‚úÖ' if pattern.has_security_analysis else '‚ùå'}")
        lines.append(f"- Security Poster {'‚úÖ' if pattern.has_security_poster else '‚ùå'}")
        lines.append(f"- Vulnerabilities {'‚úÖ' if pattern.has_vulnerabilities else '‚ùå'}")
        lines.append(f"- Exploits {'‚úÖ' if pattern.has_exploits else '‚ùå'}")
        lines.append(f"- Secure Alternatives {'‚úÖ' if pattern.has_secure_alternatives else '‚ùå'}")
        
        # C++23
        lines.append("")
        lines.append("**Modern C++:**")
        lines.append(f"- C++23 Comparison {'‚úÖ' if pattern.has_cpp23_comparison else '‚ùå'}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        if pattern.other_files:
            lines.append("")
            lines.append("**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**")
            for other_file in sorted(pattern.other_files):
                lines.append(f"- {other_file} ‚úÖ")
        
        lines.append("")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    parser = argparse.ArgumentParser(
        description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        '--output', '-o',
        type=Path,
        default=PROJECT_ROOT / 'COURSE_STRUCTURE_COMPLETE.md',
        help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: COURSE_STRUCTURE_COMPLETE.md)'
    )
    
    parser.add_argument(
        '--check-only', '-c',
        action='store_true',
        help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    parser.add_argument(
        '--json', '-j',
        action='store_true',
        help='–í—ã–≤–æ–¥ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞—ë–º —Å–∫–∞–Ω–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    scanner = CourseStructureScanner(PROJECT_ROOT)
    scanner.scan()
    
    # JSON –≤—ã–≤–æ–¥
    if args.json:
        data = {
            'timestamp': datetime.now().isoformat(),
            'stats': scanner.get_overall_stats(),
            'patterns': [asdict(p) for p in scanner.patterns],
        }
        print(json.dumps(data, indent=2, default=str))
        return 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = scanner.get_overall_stats()
    print("\n" + "="*60)
    print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {stats['total_patterns']}")
    print(f"–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å: {stats['average_completion']:.1f}%")
    print(f"–ú–æ–¥—É–ª–µ–π: {stats['modules']}")
    print()
    
    print("–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    for component, count in sorted(stats['files'].items()):
        percentage = (count / stats['total_patterns']) * 100
        emoji = "‚úÖ" if percentage >= 90 else "üü°" if percentage >= 70 else "üî¥"
        component_name = component.replace('_', ' ').title()
        print(f"  {emoji} {component_name:25} {count:2}/{stats['total_patterns']:2} ({percentage:5.1f}%)")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º markdown
    if not args.check_only:
        print(f"\nüìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...")
        markdown = scanner.generate_markdown()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        output_path = args.output
        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(markdown, encoding='utf-8')
        
        print(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        print(f"   –†–∞–∑–º–µ—Ä: {len(markdown)} —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        print("\n‚ö†Ô∏è  –†–µ–∂–∏–º --check-only: —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω")
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

