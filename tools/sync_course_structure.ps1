# PowerShell —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫—É—Ä—Å–∞
#
# –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
# –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π COURSE_STRUCTURE_COMPLETE.md
#
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   .\sync_course_structure.ps1 [-OutputFile FILE] [-CheckOnly] [-Verbose]
#
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
#   -OutputFile     –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: COURSE_STRUCTURE_COMPLETE.md)
#   -CheckOnly      –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ñ–∞–π–ª
#   -Verbose        –î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥

[CmdletBinding()]
param(
    [string]$OutputFile = "COURSE_STRUCTURE_COMPLETE.md",
    [switch]$CheckOnly = $false,
    [switch]$VerboseOutput = $false
)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
$ProjectRoot = Split-Path -Parent $PSScriptRoot

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π –∫—É—Ä—Å–∞
$Modules = @{
    "01-basics"       = @{ Number = 1; Name = "–û—Å–Ω–æ–≤—ã C++" }
    "02-principles"   = @{ Number = 2; Name = "–ü—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" }
    "03-creational"   = @{ Number = 3; Name = "–ü–æ—Ä–æ–∂–¥–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã" }
    "04-structural"   = @{ Number = 4; Name = "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã" }
    "05-behavioral"   = @{ Number = 5; Name = "–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã" }
    "06-modern-cpp"   = @{ Number = 6; Name = "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π C++" }
    "07-concurrency"  = @{ Number = 7; Name = "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏" }
    "08-high-load"    = @{ Number = 8; Name = "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º" }
    "09-performance"  = @{ Number = 9; Name = "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" }
}

# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
class PatternStatus {
    [int]$ModuleNumber
    [string]$ModuleName
    [int]$LessonNumber
    [string]$LessonName
    [string]$PatternName
    [string]$Directory
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    [bool]$HasReadme = $false
    [bool]$HasCMakeLists = $false
    
    # Security —Ñ–∞–π–ª—ã
    [bool]$HasSecurityAnalysis = $false
    [bool]$HasSecurityPoster = $false
    [bool]$HasVulnerabilities = $false
    [bool]$HasExploits = $false
    [bool]$HasSecureAlternatives = $false
    
    # C++23 —Ñ–∞–π–ª—ã
    [bool]$HasCpp23Comparison = $false
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
    [string[]]$MainCppFiles = @()
    [string[]]$OtherFiles = @()
    
    # –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç–∏
    [double] CompletionPercentage() {
        $weights = @{
            HasReadme = 10
            HasCMakeLists = 10
            HasSecurityAnalysis = 15
            HasSecurityPoster = 15
            HasVulnerabilities = 15
            HasExploits = 10
            HasSecureAlternatives = 15
            HasCpp23Comparison = 10
        }
        
        $totalWeight = ($weights.Values | Measure-Object -Sum).Sum
        $achievedWeight = 0
        
        foreach ($key in $weights.Keys) {
            if ($this.$key) {
                $achievedWeight += $weights[$key]
            }
        }
        
        return ($achievedWeight / $totalWeight) * 100
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji —Å—Ç–∞—Ç—É—Å–∞
    [string] GetStatusEmoji() {
        $completion = $this.CompletionPercentage()
        if ($completion -ge 90) { return "‚úÖ" }
        if ($completion -ge 70) { return "üü¢" }
        if ($completion -ge 50) { return "üü°" }
        if ($completion -ge 30) { return "üü†" }
        return "üî¥"
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    [string] GetStatusText() {
        $completion = $this.CompletionPercentage()
        if ($completion -ge 90) { return "–ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù" }
        if ($completion -ge 70) { return "–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ó–ê–í–ï–†–®–Å–ù" }
        if ($completion -ge 50) { return "–ß–ê–°–¢–ò–ß–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù" }
        if ($completion -ge 30) { return "–ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê" }
        return "–ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê"
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
function Scan-Lesson {
    param(
        [int]$ModuleNum,
        [string]$ModuleName,
        [System.IO.DirectoryInfo]$LessonDir
    )
    
    # –ü–∞—Ä—Å–∏–º –∏–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: lesson_X_Y_pattern_name
    $parts = $LessonDir.Name -split '_'
    if ($parts.Length -lt 3) {
        return $null
    }
    
    $lessonNum = [int]$parts[1]
    $patternName = ($parts[3..($parts.Length-1)] -join '_')
    if ([string]::IsNullOrEmpty($patternName)) {
        $patternName = $parts[2]
    }
    $lessonName = ($patternName -replace '_', ' ').ToUpper()
    
    $status = [PatternStatus]::new()
    $status.ModuleNumber = $ModuleNum
    $status.ModuleName = $ModuleName
    $status.LessonNumber = $lessonNum
    $status.LessonName = $lessonName
    $status.PatternName = $patternName
    $status.Directory = $LessonDir.FullName.Replace($ProjectRoot + '\', '')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    $status.HasReadme = Test-Path (Join-Path $LessonDir.FullName "README.md")
    $status.HasCMakeLists = Test-Path (Join-Path $LessonDir.FullName "CMakeLists.txt")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º security —Ñ–∞–π–ª—ã
    $status.HasSecurityAnalysis = Test-Path (Join-Path $LessonDir.FullName "SECURITY_ANALYSIS.md")
    $status.HasVulnerabilities = (Get-ChildItem -Path $LessonDir.FullName -Filter "*_vulnerabilities.cpp" -ErrorAction SilentlyContinue).Count -gt 0
    $status.HasSecureAlternatives = (Get-ChildItem -Path $LessonDir.FullName -Filter "secure_*_alternatives.cpp" -ErrorAction SilentlyContinue).Count -gt 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º exploits –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    $exploitsDir = Join-Path $LessonDir.FullName "exploits"
    if (Test-Path $exploitsDir) {
        $status.HasExploits = (Get-ChildItem -Path $exploitsDir -Filter "*.cpp" -ErrorAction SilentlyContinue).Count -gt 0
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º security poster
    $status.HasSecurityPoster = (Get-ChildItem -Path $LessonDir.FullName -Filter "*SECURITY_POSTER.md" -ErrorAction SilentlyContinue).Count -gt 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º C++23 comparison —Ñ–∞–π–ª—ã
    $cpp23Files = Get-ChildItem -Path $LessonDir.FullName -Filter "*_cpp23*.cpp" -ErrorAction SilentlyContinue
    $status.HasCpp23Comparison = $cpp23Files.Count -gt 0
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ .cpp —Ñ–∞–π–ª–æ–≤
    $cppFiles = Get-ChildItem -Path $LessonDir.FullName -Filter "*.cpp" -ErrorAction SilentlyContinue
    foreach ($cppFile in $cppFiles) {
        if ($cppFile.Name -notmatch 'vulnerabilities' -and 
            $cppFile.Name -notmatch '^secure_' -and 
            $cppFile.Name -notmatch 'cpp23') {
            $status.MainCppFiles += $cppFile.Name
        }
    }
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ markdown —Ñ–∞–π–ª—ã
    $mdFiles = Get-ChildItem -Path $LessonDir.FullName -Filter "*.md" -ErrorAction SilentlyContinue
    foreach ($mdFile in $mdFiles) {
        if ($mdFile.Name -ne 'README.md' -and 
            $mdFile.Name -ne 'SECURITY_ANALYSIS.md' -and 
            $mdFile.Name -notmatch 'SECURITY_POSTER') {
            $status.OtherFiles += $mdFile.Name
        }
    }
    
    return $status
}

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ markdown –æ—Ç—á—ë—Ç–∞
function Generate-Markdown {
    param(
        [PatternStatus[]]$Patterns
    )
    
    $lines = @()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    $lines += "# üìÅ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞ - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ"
    $lines += ""
    $lines += "**–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    $lines += "**–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä**: ``tools/sync_course_structure.ps1``"
    $lines += ""
    $lines += "---"
    $lines += ""
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    $totalPatterns = $Patterns.Count
    $avgCompletion = ($Patterns | ForEach-Object { $_.CompletionPercentage() } | Measure-Object -Average).Average
    
    $lines += "## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    $lines += ""
    $lines += "**–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤**: $totalPatterns"
    $lines += "**–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å**: $($avgCompletion.ToString('F1'))%"
    $lines += ""
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    $lines += "### –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    $lines += ""
    $lines += "| –ö–æ–º–ø–æ–Ω–µ–Ω—Ç | –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ | –ü—Ä–æ—Ü–µ–Ω—Ç |"
    $lines += "|-----------|-------------|---------|"
    
    $components = @(
        @{ Name = "README"; Prop = "HasReadme" },
        @{ Name = "CMakeLists"; Prop = "HasCMakeLists" },
        @{ Name = "Security Analysis"; Prop = "HasSecurityAnalysis" },
        @{ Name = "Security Poster"; Prop = "HasSecurityPoster" },
        @{ Name = "Vulnerabilities"; Prop = "HasVulnerabilities" },
        @{ Name = "Exploits"; Prop = "HasExploits" },
        @{ Name = "Secure Alternatives"; Prop = "HasSecureAlternatives" },
        @{ Name = "C++23 Comparison"; Prop = "HasCpp23Comparison" }
    )
    
    foreach ($component in $components) {
        $count = ($Patterns | Where-Object { $_.$($component.Prop) }).Count
        $percentage = ($count / $totalPatterns) * 100
        $emoji = if ($percentage -ge 90) { "‚úÖ" } elseif ($percentage -ge 70) { "üü°" } else { "üî¥" }
        $lines += "| $($component.Name) | $count/$totalPatterns | $emoji $($percentage.ToString('F0'))% |"
    }
    
    $lines += ""
    $lines += "---"
    $lines += ""
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º
    $lines += "## üìö –î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥—É–ª—è–º"
    $lines += ""
    
    $groupedPatterns = $Patterns | Group-Object -Property ModuleNumber | Sort-Object Name
    
    foreach ($group in $groupedPatterns) {
        $modulePatterns = $group.Group | Sort-Object LessonNumber
        $moduleName = $modulePatterns[0].ModuleName
        $moduleNum = $group.Name
        $avgComp = ($modulePatterns | ForEach-Object { $_.CompletionPercentage() } | Measure-Object -Average).Average
        
        $lines += "### –ú–æ–¥—É–ª—å $moduleNum`: $moduleName"
        $lines += ""
        $lines += "**–ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤**: $($modulePatterns.Count) | **–ó–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å**: $($avgComp.ToString('F1'))%"
        $lines += ""
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–æ–¥—É–ª—è
        $lines += "| # | –ü–∞—Ç—Ç–µ—Ä–Ω | –°—Ç–∞—Ç—É—Å | –ó–∞–≤–µ—Ä—à–µ–Ω–æ | –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã |"
        $lines += "|---|---------|--------|-----------|------------|"
        
        foreach ($pattern in $modulePatterns) {
            $components = @()
            if ($pattern.HasReadme) { $components += "üìñ" }
            if ($pattern.HasSecurityAnalysis) { $components += "üîí" }
            if ($pattern.HasSecurityPoster) { $components += "üìã" }
            if ($pattern.HasVulnerabilities) { $components += "‚ö†Ô∏è" }
            if ($pattern.HasExploits) { $components += "üí£" }
            if ($pattern.HasSecureAlternatives) { $components += "‚úÖ" }
            if ($pattern.HasCpp23Comparison) { $components += "üöÄ" }
            
            $componentsStr = if ($components.Count -gt 0) { $components -join " " } else { "‚Äî" }
            
            $lines += "| $($pattern.LessonNumber) | $($pattern.LessonName) | " +
                     "$($pattern.GetStatusEmoji()) $($pattern.GetStatusText()) | " +
                     "$($pattern.CompletionPercentage().ToString('F0'))% | $componentsStr |"
        }
        
        $lines += ""
        $lines += "---"
        $lines += ""
    }
    
    # –õ–µ–≥–µ–Ω–¥–∞
    $lines += "## üìñ –õ–µ–≥–µ–Ω–¥–∞"
    $lines += ""
    $lines += "### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"
    $lines += "- üìñ README.md - –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —É—Ä–æ–∫–∞"
    $lines += "- üîí SECURITY_ANALYSIS.md - –∞–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    $lines += "- üìã *_SECURITY_POSTER.md - security –ø–ª–∞–∫–∞—Ç"
    $lines += "- ‚ö†Ô∏è *_vulnerabilities.cpp - —É—è–∑–≤–∏–º—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
    $lines += "- üí£ exploits/*_exploits.cpp - —ç–∫—Å–ø–ª–æ–∏—Ç—ã"
    $lines += "- ‚úÖ secure_*_alternatives.cpp - –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"
    $lines += "- üöÄ *_cpp23_comparison.cpp - C++23 —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"
    $lines += ""
    
    $lines += "### –°—Ç–∞—Ç—É—Å—ã"
    $lines += "- ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù (‚â•90%)"
    $lines += "- üü¢ –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò –ó–ê–í–ï–†–®–Å–ù (70-89%)"
    $lines += "- üü° –ß–ê–°–¢–ò–ß–ù–û –†–ï–ê–õ–ò–ó–û–í–ê–ù (50-69%)"
    $lines += "- üü† –ë–ê–ó–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (30-49%)"
    $lines += "- üî¥ –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê (<30%)"
    $lines += ""
    
    $lines += "---"
    $lines += ""
    $lines += "*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')*"
    
    return $lines -join "`n"
}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
Write-Host "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: $ProjectRoot" -ForegroundColor Cyan
Write-Host ""

$allPatterns = @()

foreach ($moduleDir in $Modules.Keys | Sort-Object) {
    $moduleInfo = $Modules[$moduleDir]
    $modulePath = Join-Path $ProjectRoot $moduleDir
    
    if (-not (Test-Path $modulePath)) {
        Write-Host "‚ö†Ô∏è  –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $moduleDir" -ForegroundColor Yellow
        continue
    }
    
    Write-Host "üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è $($moduleInfo.Number): $($moduleInfo.Name)" -ForegroundColor Green
    
    # –ò—â–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —É—Ä–æ–∫–æ–≤ (lesson_*)
    $lessonDirs = Get-ChildItem -Path $modulePath -Directory -Filter "lesson_*" | Sort-Object Name
    
    foreach ($lessonDir in $lessonDirs) {
        $pattern = Scan-Lesson -ModuleNum $moduleInfo.Number -ModuleName $moduleInfo.Name -LessonDir $lessonDir
        if ($pattern) {
            $allPatterns += $pattern
            if ($VerboseOutput) {
                Write-Host "  ‚îî‚îÄ $($pattern.LessonName): $($pattern.GetStatusEmoji()) $($pattern.CompletionPercentage().ToString('F0'))%" -ForegroundColor Gray
            }
        }
    }
}

Write-Host ""
Write-Host "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: $($allPatterns.Count)" -ForegroundColor Green
Write-Host ""

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
Write-Host ("=" * 60) -ForegroundColor Cyan
Write-Host "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" -ForegroundColor Cyan
Write-Host ("=" * 60) -ForegroundColor Cyan

$totalPatterns = $allPatterns.Count
$avgCompletion = ($allPatterns | ForEach-Object { $_.CompletionPercentage() } | Measure-Object -Average).Average

Write-Host "–í—Å–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: $totalPatterns"
Write-Host "–°—Ä–µ–¥–Ω—è—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ—Å—Ç—å: $($avgCompletion.ToString('F1'))%"
Write-Host ""

Write-Host "–ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:"
$components = @(
    @{ Name = "README"; Prop = "HasReadme" },
    @{ Name = "Security Analysis"; Prop = "HasSecurityAnalysis" },
    @{ Name = "Security Poster"; Prop = "HasSecurityPoster" },
    @{ Name = "Vulnerabilities"; Prop = "HasVulnerabilities" },
    @{ Name = "Exploits"; Prop = "HasExploits" },
    @{ Name = "Secure Alternatives"; Prop = "HasSecureAlternatives" },
    @{ Name = "C++23 Comparison"; Prop = "HasCpp23Comparison" }
)

foreach ($component in $components) {
    $count = ($allPatterns | Where-Object { $_.$($component.Prop) }).Count
    $percentage = ($count / $totalPatterns) * 100
    $emoji = if ($percentage -ge 90) { "‚úÖ" } elseif ($percentage -ge 70) { "üü°" } else { "üî¥" }
    $paddedName = $component.Name.PadRight(25)
    Write-Host "  $emoji $paddedName $count/$totalPatterns ($($percentage.ToString('F1'))%)"
}

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º markdown
if (-not $CheckOnly) {
    Write-Host ""
    Write-Host "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞..." -ForegroundColor Cyan
    
    $markdown = Generate-Markdown -Patterns $allPatterns
    
    $outputPath = if ([System.IO.Path]::IsPathRooted($OutputFile)) {
        $OutputFile
    } else {
        Join-Path $ProjectRoot $OutputFile
    }
    
    $markdown | Out-File -FilePath $outputPath -Encoding UTF8
    
    Write-Host "‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: $outputPath" -ForegroundColor Green
    Write-Host "   –†–∞–∑–º–µ—Ä: $($markdown.Length) —Å–∏–º–≤–æ–ª–æ–≤"
} else {
    Write-Host ""
    Write-Host "‚ö†Ô∏è  –†–µ–∂–∏–º -CheckOnly: —Ñ–∞–π–ª –Ω–µ –æ–±–Ω–æ–≤–ª—ë–Ω" -ForegroundColor Yellow
}

